{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const add = (a, b = 5) => a + b;\nconsole.log(add(3));",
      "options": {
        "A": "undefined",
        "B": "3",
        "C": "8",
        "D": "Error"
      },
      "correct_answer": "C"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which of the following is true about 'var', 'let', and 'const' in JavaScript?",
      "options": {
        "A": "Variables declared with 'let' can be redeclared within the same scope",
        "B": "Variables declared with 'const' cannot have their properties modified if they are objects",
        "C": "Variables declared with 'var' are block-scoped",
        "D": "Variables declared with 'const' must be initialized with a value"
      },
      "correct_answer": "D"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const person = { name: 'John', age: 30 };\nconst { name, job = 'Developer' } = person;\nconsole.log(job);",
      "options": {
        "A": "undefined",
        "B": "null",
        "C": "Developer",
        "D": "Error"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What is the main difference between 'require()' and 'import' in Node.js?",
      "options": {
        "A": "require() is synchronous while import is asynchronous",
        "B": "import can only be used with JSON files",
        "C": "require() can only be used with JavaScript files",
        "D": "There is no difference, they are interchangeable"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const numbers = [1, 2, 3, 4];\nnumbers.push(5);\nnumbers[10] = 10;\nconsole.log(numbers.length);",
      "options": {
        "A": "5",
        "B": "6",
        "C": "10",
        "D": "11"
      },
      "correct_answer": "D"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "How would you access an environment variable named 'API_KEY' in a Node.js application?",
      "options": {
        "A": "env.API_KEY",
        "B": "process.env.API_KEY",
        "C": "process.API_KEY",
        "D": "environment.API_KEY"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const result = 5 ** 2 % 3;\nconsole.log(result);",
      "options": {
        "A": "1",
        "B": "2",
        "C": "4",
        "D": "7"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What is an IIFE in JavaScript?",
      "options": {
        "A": "A function that can only be called once",
        "B": "A function that is defined inside another function",
        "C": "A function that is executed immediately after it's created",
        "D": "A function that automatically inherits from its parent"
      },
      "correct_answer": "C"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "(function() {\n  var x = 10;\n})();\nconsole.log(typeof x);",
      "options": {
        "A": "number",
        "B": "undefined",
        "C": "Error",
        "D": "object"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which of the following statements about the 'fs' module in Node.js is TRUE?",
      "options": {
        "A": "It is a built-in browser JavaScript API",
        "B": "It must be installed separately via npm",
        "C": "It provides methods to interact with the file system",
        "D": "It can only read files but not write to them"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const isAdult = true;\nconst message = isAdult ? 'Welcome' : 'Not allowed';\nconsole.log(message);",
      "options": {
        "A": "true",
        "B": "false",
        "C": "Welcome",
        "D": "Not allowed"
      },
      "correct_answer": "C"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const obj1 = {};\nconst obj2 = new Object();\nconsole.log(typeof obj1, typeof obj2);",
      "options": {
        "A": "object object",
        "B": "{} Object",
        "C": "object Object",
        "D": "undefined undefined"
      },
      "correct_answer": "A"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What is the purpose of 'event.preventDefault()' in browser JavaScript?",
      "options": {
        "A": "To stop event propagation to parent elements",
        "B": "To prevent the default behavior associated with the event",
        "C": "To remove all event listeners from an element",
        "D": "To delay event execution until the DOM is fully loaded"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log('5' === 5);\nconsole.log('5' == 5);",
      "options": {
        "A": "true true",
        "B": "false false",
        "C": "true false",
        "D": "false true"
      },
      "correct_answer": "D"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "async function fetchData() {\n  return 'Data';\n}\n\nconsole.log(fetchData());",
      "options": {
        "A": "Data",
        "B": "Promise { 'Data' }",
        "C": "undefined",
        "D": "Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "Which of the following is NOT a key difference between Node.js and browser JavaScript?",
      "options": {
        "A": "Node.js has direct access to the file system while browsers have limited access",
        "B": "Node.js uses V8 engine while browsers use different JavaScript engines",
        "C": "Node.js lacks a DOM API while browsers have it",
        "D": "Node.js lacks support for ES6 modules while browsers support them"
      },
      "correct_answer": "D"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const promise = new Promise((resolve, reject) => {\n  resolve('Success');\n  reject('Error');\n});\n\npromise\n  .then(value => console.log(value))\n  .catch(error => console.log(error));",
      "options": {
        "A": "Success",
        "B": "Error",
        "C": "Success Error",
        "D": "undefined"
      },
      "correct_answer": "A"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What is the main advantage of using streams to read large files in Node.js?",
      "options": {
        "A": "Streams automatically compress file data",
        "B": "Streams process data in chunks, reducing memory usage",
        "C": "Streams can only read text files, which are more efficient",
        "D": "Streams automatically encrypt the file data"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const user = {\n  name: 'John',\n  address: {\n    city: 'New York',\n    zip: '10001'\n  }\n};\n\nconst { name, address: { city } } = user;\nconsole.log(address);",
      "options": {
        "A": "{ city: 'New York', zip: '10001' }",
        "B": "undefined",
        "C": "ReferenceError",
        "D": "null"
      },
      "correct_answer": "C"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "Which of the following is NOT a valid way to prevent SQL injection in a Node.js application?",
      "options": {
        "A": "Using prepared statements with parameterized queries",
        "B": "Using an ORM like Sequelize that escapes inputs",
        "C": "Validating and sanitizing user inputs",
        "D": "Storing SQL queries in environment variables"
      },
      "correct_answer": "D"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function greet(name, greeting = 'Hello') {\n  return `${greeting}, ${name}`;\n}\n\nconsole.log(greet('John', undefined));",
      "options": {
        "A": "undefined, John",
        "B": "Hello, John",
        "C": "undefined, undefined",
        "D": "Hello, undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What is the purpose of error handling middleware in Express.js?",
      "options": {
        "A": "To prevent errors from occurring in Express applications",
        "B": "To automatically fix programming errors in your code",
        "C": "To centralize error processing and response generation",
        "D": "To bypass normal middleware execution flow"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const numbers = [1, 2, 3];\nnumbers.forEach(async (num) => {\n  const result = await Promise.resolve(num * 2);\n  console.log(result);\n});\nconsole.log('Done');",
      "options": {
        "A": "2 4 6 Done",
        "B": "Done 2 4 6",
        "C": "Error",
        "D": "2 Done 4 6"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "Which statement about JWT (JSON Web Tokens) authentication is TRUE?",
      "options": {
        "A": "JWTs should always be stored in browser localStorage for best security",
        "B": "JWTs cannot be used for authorization, only for authentication",
        "C": "JWTs are stateless and don't require server-side session storage",
        "D": "JWTs automatically encrypt all user data for secure transmission"
      },
      "correct_answer": "C"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = { name: 'Alice' };\n\nfunction sayHello(greeting) {\n  console.log(`${greeting}, ${this.name}!`);\n}\n\nsayHello.call(obj, 'Hello');",
      "options": {
        "A": "Hello, Alice!",
        "B": "Hello, undefined!",
        "C": "Hello, !",
        "D": "TypeError"
      },
      "correct_answer": "A"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What is 'callback hell' in JavaScript?",
      "options": {
        "A": "A situation where callbacks are defined but never used",
        "B": "A specific Node.js error that occurs when too many callbacks are used",
        "C": "A pattern of deeply nested callbacks that makes code hard to read and maintain",
        "D": "A state where callbacks call themselves recursively causing an infinite loop"
      },
      "correct_answer": "C"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const promise = Promise.resolve('First');\n\npromise\n  .then(result => {\n    console.log(result);\n    throw new Error('Error!');\n    return 'Second';\n  })\n  .then(result => console.log(result))\n  .catch(error => console.log(error.message))\n  .finally(() => console.log('Done'));",
      "options": {
        "A": "First Error! Done",
        "B": "First Second Done",
        "C": "First Second Error! Done",
        "D": "Error! Done"
      },
      "correct_answer": "A"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "Which of the following is NOT a valid method for body parsing in Express.js?",
      "options": {
        "A": "express.json()",
        "B": "express.urlencoded({ extended: true })",
        "C": "express.form()",
        "D": "express.raw()"
      },
      "correct_answer": "C"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.sayName = function() {\n  return this.name;\n};\n\nfunction Employee(name, title) {\n  Person.call(this, name);\n  this.title = title;\n}\n\nEmployee.prototype = Object.create(Person.prototype);\nEmployee.prototype.constructor = Employee;\n\nconst emp = new Employee('John', 'Developer');\nconsole.log(emp.sayName());",
      "options": {
        "A": "undefined",
        "B": "John",
        "C": "Developer",
        "D": "TypeError"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "How does JavaScript inheritance differ from classical OOP inheritance?",
      "options": {
        "A": "JavaScript doesn't support inheritance at all",
        "B": "JavaScript uses prototypal inheritance instead of class-based inheritance",
        "C": "JavaScript inheritance is always multiple inheritance unlike classical OOP",
        "D": "JavaScript inheritance is only possible with ES6 classes"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "async function fetchData() {\n  try {\n    return await Promise.reject('Error');\n  } catch (error) {\n    return 'Caught';\n  } finally {\n    return 'Finally';\n  }\n}\n\nfetchData().then(result => console.log(result));",
      "options": {
        "A": "Error",
        "B": "Caught",
        "C": "Finally",
        "D": "undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What is the purpose of Schema validation in MongoDB with Mongoose?",
      "options": {
        "A": "To automatically create database indexes for faster queries",
        "B": "To ensure data consistency by enforcing a specific structure",
        "C": "To compress data before storing it in the database",
        "D": "To convert MongoDB documents into JavaScript objects"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates handling unhandled Promise rejections?",
      "options": {
        "A": "Error caught: Oops! and Error: Unhandled promise rejection",
        "B": "Error caught: Oops! only",
        "C": "Error: Unhandled promise rejection only",
        "D": "No output, the program exits silently"
      },
      "correct_answer": "B",
      "code_example": "process.on('unhandledRejection', (reason, promise) => {\n  console.error('Error: Unhandled promise rejection');\n});\n\nconst promiseWithCatch = new Promise((resolve, reject) => {\n  reject('Oops!');\n}).catch(err => {\n  console.log('Error caught:', err);\n});\n\nconst timer = setTimeout(() => {\n  console.log('This will run');\n}, 100);"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "Which of the following is NOT a valid configuration in a docker-compose.yml file for a Node.js application?",
      "options": {
        "A": "services.nodejs.volumes",
        "B": "services.nodejs.depends_on",
        "C": "services.nodejs.optimize_v8",
        "D": "services.nodejs.environment"
      },
      "correct_answer": "C",
      "code_example": ""
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates V8 Engine optimizations with hidden classes?",
      "options": {
        "A": "Obj1 and Obj2 share the same hidden class: true",
        "B": "Obj1 and Obj2 share the same hidden class: false",
        "C": "TypeError: Cannot determine hidden class of objects",
        "D": "undefined"
      },
      "correct_answer": "B",
      "code_example": "function createObj1() {\n  const obj = {};\n  obj.x = 1;\n  obj.y = 2;\n  return obj;\n}\n\nfunction createObj2() {\n  const obj = {};\n  obj.y = 2;\n  obj.x = 1;\n  return obj;\n}\n\nconst obj1 = createObj1();\nconst obj2 = createObj2();\n\n// V8 creates different hidden classes due to property order\nconsole.log('Obj1 and Obj2 share the same hidden class:', obj1.__proto__ === obj2.__proto__);"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which Prometheus metric type would be MOST appropriate for measuring the duration of HTTP requests in a Node.js application?",
      "options": {
        "A": "Counter",
        "B": "Gauge",
        "C": "Histogram",
        "D": "Summary"
      },
      "correct_answer": "C",
      "code_example": ""
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates transform streams?",
      "options": {
        "A": "Original: hello world, Transformed: HELLO WORLD",
        "B": "hello world HELLO WORLD",
        "C": "HELLO WORLD",
        "D": "Nothing, the code will throw an error"
      },
      "correct_answer": "C",
      "code_example": "const { Transform } = require('stream');\nconst { Readable } = require('stream');\n\nconst upperCaseTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, chunk.toString().toUpperCase());\n  }\n});\n\nconst readableStream = new Readable({\n  read() {}\n});\n\nreadableStream\n  .pipe(upperCaseTransform)\n  .on('data', (data) => {\n    console.log(data.toString());\n  });\n\nreadableStream.push('hello world');\nreadableStream.push(null);"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What is the main security vulnerability that a properly implemented CSRF token protects against?",
      "options": {
        "A": "Cross-site scripting (XSS) attacks",
        "B": "Unauthorized state-changing requests from an authenticated user",
        "C": "SQL injection attacks",
        "D": "Man-in-the-middle attacks"
      },
      "correct_answer": "B",
      "code_example": ""
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will the cluster module output in the following Node.js code?",
      "options": {
        "A": "Master process created 4 workers",
        "B": "It logs 'Worker started' exactly 4 times",
        "C": "It logs the worker process IDs, with the exact number depending on the machine's CPU cores",
        "D": "Error: cluster.fork() is not a function"
      },
      "correct_answer": "C",
      "code_example": "const cluster = require('cluster');\nconst os = require('os');\n\nif (cluster.isMaster) {\n  const numCPUs = os.cpus().length;\n  \n  for (let i = 0; i < numCPUs; i++) {\n    const worker = cluster.fork();\n    console.log(`Worker process started with PID: ${worker.process.pid}`);\n  }\n} else {\n  console.log('Worker started');\n}"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses socket.io for WebSockets implementation?",
      "options": {
        "A": "Client connected, then Client disconnected",
        "B": "Server started on port 3000, then Client connected",
        "C": "Server started on port 3000",
        "D": "Error: io.on is not a function"
      },
      "correct_answer": "C",
      "code_example": "const http = require('http');\nconst server = http.createServer();\nconst io = require('socket.io')(server);\n\nserver.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n\nio.on('connection', (socket) => {\n  console.log('Client connected');\n  \n  socket.on('disconnect', () => {\n    console.log('Client disconnected');\n  });\n});"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What security issue might occur in the following JWT implementation?",
      "options": {
        "A": "Using a hardcoded secret in the source code",
        "B": "Setting expiresIn to '1h' is too short",
        "C": "The algorithm 'HS256' is weak",
        "D": "JWT should not be stored in an HTTP-only cookie"
      },
      "correct_answer": "A",
      "code_example": "const jwt = require('jsonwebtoken');\nconst express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  // Authenticate user first (not shown)\n  const userId = 123;\n  \n  const token = jwt.sign(\n    { userId: userId },\n    'super-secret-hard-coded-key-123',\n    { expiresIn: '1h', algorithm: 'HS256' }\n  );\n  \n  res.cookie('token', token, { httpOnly: true });\n  res.json({ success: true });\n});"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which line in this Dockerfile is INCORRECT or represents a bad practice for a Node.js application?",
      "options": {
        "A": "COPY . /app",
        "B": "RUN npm ci",
        "C": "USER node",
        "D": "EXPOSE 8080"
      },
      "correct_answer": "A",
      "code_example": "FROM node:16-alpine\nWORKDIR /app\nCOPY . /app\nRUN npm ci\nUSER node\nEXPOSE 8080\nCMD [\"npm\", \"start\"]"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating JIT compilation behavior in V8?",
      "options": {
        "A": "Time with optimization: [faster time] ms",
        "B": "TypeError: %OptimizeFunctionOnNextCall is not a function",
        "C": "The function will run at the same speed in both cases",
        "D": "The code will crash with a V8 internal error"
      },
      "correct_answer": "B",
      "code_example": "function add(a, b) {\n  return a + b;\n}\n\n// Warm up the function\nfor (let i = 0; i < 100000; i++) {\n  add(i, i + 1);\n}\n\n// Try to force optimization\n%OptimizeFunctionOnNextCall(add);\n\nconst start = performance.now();\nfor (let i = 0; i < 1000000; i++) {\n  add(i, i + 1);\n}\nconst end = performance.now();\n\nconsole.log(`Time with optimization: ${end - start} ms`);"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be the output when the following code for encrypting sensitive data is executed?",
      "options": {
        "A": "Original: secret data, Decrypted: secret data",
        "B": "A hexadecimal string representing encrypted data, followed by 'secret data'",
        "C": "Error: Invalid IV length",
        "D": "Error: crypto.createCipheriv is not a function"
      },
      "correct_answer": "A",
      "code_example": "const crypto = require('crypto');\n\nfunction encryptData(data, secretKey) {\n  const algorithm = 'aes-256-cbc';\n  const key = crypto.scryptSync(secretKey, 'salt', 32);\n  const iv = crypto.randomBytes(16);\n  \n  const cipher = crypto.createCipheriv(algorithm, key, iv);\n  let encrypted = cipher.update(data, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  \n  return { iv: iv.toString('hex'), encryptedData: encrypted };\n}\n\nfunction decryptData(encrypted, secretKey) {\n  const algorithm = 'aes-256-cbc';\n  const key = crypto.scryptSync(secretKey, 'salt', 32);\n  const iv = Buffer.from(encrypted.iv, 'hex');\n  \n  const decipher = crypto.createDecipheriv(algorithm, key, iv);\n  let decrypted = decipher.update(encrypted.encryptedData, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  return decrypted;\n}\n\nconst secretKey = 'my-secret-key';\nconst data = 'secret data';\n\nconst encrypted = encryptData(data, secretKey);\nconst decrypted = decryptData(encrypted, secretKey);\n\nconsole.log(`Original: ${data}, Decrypted: ${decrypted}`);"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "In a Kubernetes deployment for a Node.js application, which field correctly specifies the container's health check?",
      "options": {
        "A": "pod.healthCheck",
        "B": "pod.spec.containers[0].livenessProbe",
        "C": "containers.health",
        "D": "spec.template.metadata.health"
      },
      "correct_answer": "B",
      "code_example": ""
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will the following PM2 load balancing configuration do?",
      "options": {
        "A": "Start 4 instances of the application",
        "B": "Start instances based on available CPU cores",
        "C": "Start the application in cluster mode with 0 instances (error)",
        "D": "Start the application in fork mode with maximum instances"
      },
      "correct_answer": "B",
      "code_example": "module.exports = {\n  apps: [{\n    name: \"api-service\",\n    script: \"app.js\",\n    instances: \"max\",\n    exec_mode: \"cluster\",\n    env: {\n      NODE_ENV: \"production\",\n      PORT: 3000\n    }\n  }]\n};"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates inline caching in V8?",
      "options": {
        "A": "monomorphic, polymorphic, megamorphic",
        "B": "All function calls print 'Object {}'",
        "C": "SyntaxError: Unexpected token 'function'",
        "D": "The code will run but produce no output"
      },
      "correct_answer": "D",
      "code_example": "// Hidden class and inline caching example\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\n// Monomorphic - always same hidden class\nfunction monomorphicAccess(point) {\n  return point.x;\n}\n\n// Polymorphic - different hidden classes\nfunction polymorphicAccess(obj) {\n  return obj.x;\n}\n\n// Create points with same hidden class\nconst p1 = new Point(1, 2);\nconst p2 = new Point(3, 4);\n\n// Create object with different hidden class\nconst obj = { x: 5, z: 6 };\n\n// Monomorphic call site (optimized)\nmonomorphicAccess(p1);\nmonomorphicAccess(p2);\n\n// Polymorphic call site (less optimized)\npolymorphicAccess(p1);\npolymorphicAccess(obj);"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "Which command is used to list all running Docker containers with their resource usage statistics?",
      "options": {
        "A": "docker ps",
        "B": "docker stats",
        "C": "docker container ls --stats",
        "D": "docker info --containers"
      },
      "correct_answer": "B",
      "code_example": ""
    }
  ]
}
