{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let age = 17;\nlet message = age >= 18 ? 'You can vote' : 'Too young';\nconsole.log(message);",
      "options": {
        "A": "You can vote",
        "B": "Too young",
        "C": "undefined",
        "D": "Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "How do you stop an event from bubbling up the DOM tree?",
      "options": {
        "A": "event.stopBubble()",
        "B": "event.cancelBubble()",
        "C": "event.stopPropagation()",
        "D": "event.preventBubbling()"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What is the primary difference between function declarations and function expressions?",
      "options": {
        "A": "Function declarations are not allowed in JavaScript",
        "B": "Function expressions cannot be anonymous",
        "C": "Function declarations are hoisted, while function expressions are not",
        "D": "Function expressions can take parameters, but function declarations cannot"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled);",
      "options": {
        "A": "[1, 2, 3, 4, 5]",
        "B": "[2, 4, 6, 8, 10]",
        "C": "Error: map is not a function",
        "D": "[1, 4, 9, 16, 25]"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "var x = 10;\nlet y = 20;\nconst z = 30;\n\n{\n  var x = 1;\n  let y = 2;\n  const z = 3;\n}\n\nconsole.log(x, y, z);",
      "options": {
        "A": "10 20 30",
        "B": "1 20 30",
        "C": "1 2 3",
        "D": "10 2 3"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "function greet(name = 'Guest') {\n  return `Hello, ${name}!`;\n}\n\nconsole.log(greet());\nconsole.log(greet('John'));",
      "options": {
        "A": "Hello, undefined! Hello, John!",
        "B": "Hello, ! Hello, John!",
        "C": "Hello, Guest! Hello, John!",
        "D": "Error: name is not defined"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const name = 'Alice';\nconst age = 25;\nconsole.log(`${name} is ${age} years old.`);",
      "options": {
        "A": "name is age years old.",
        "B": "${name} is ${age} years old.",
        "C": "Alice is 25 years old.",
        "D": "Alice is age years old."
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "Which method is used to prevent a form from submitting in a standard way when a submit button is clicked?",
      "options": {
        "A": "event.stopSubmit()",
        "B": "event.preventDefault()",
        "C": "event.cancelDefault()",
        "D": "event.stopDefault()"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined);",
      "options": {
        "A": "[1, 2, 3, [4, 5, 6]]",
        "B": "[[1, 2, 3], [4, 5, 6]]",
        "C": "[1, 2, 3, 4, 5, 6]",
        "D": "Error: Spread is not a function"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(Number('123'));\nconsole.log(Number('12.3'));\nconsole.log(Number('hello'));",
      "options": {
        "A": "123 12.3 0",
        "B": "123 12.3 NaN",
        "C": "'123' '12.3' 'hello'",
        "D": "Error: Invalid conversion"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const a = 5;  // 101 in binary\nconst b = 3;  // 011 in binary\nconsole.log(a & b); // Bitwise AND",
      "options": {
        "A": "8",
        "B": "1",
        "C": "2",
        "D": "15"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let sum = 0;\nfor (let i = 0; i < 5; i++) {\n  if (i === 3) continue;\n  sum += i;\n}\nconsole.log(sum);",
      "options": {
        "A": "10",
        "B": "6",
        "C": "15",
        "D": "4"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "function sum() {\n  let total = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\n\nconsole.log(sum(1, 2, 3));",
      "options": {
        "A": "Error: arguments is not defined",
        "B": "Error: cannot iterate over arguments",
        "C": "6",
        "D": "0"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(true && false);\nconsole.log(true || false);\nconsole.log(!true);",
      "options": {
        "A": "true true false",
        "B": "false true false",
        "C": "false false true",
        "D": "true false true"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const fruits = ['apple', 'banana', 'cherry'];\nfruits.push('date');\nfruits.pop();\nfruits.unshift('apricot');\nconsole.log(fruits);",
      "options": {
        "A": "['apple', 'banana', 'cherry']",
        "B": "['apricot', 'apple', 'banana', 'cherry', 'date']",
        "C": "['apricot', 'apple', 'banana', 'cherry']",
        "D": "['apricot', 'apple', 'banana']"
      },
      "correct_answer": "C"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let fruit = 'apple';\n\nswitch (fruit) {\n  case 'banana':\n    console.log('Yellow');\n    break;\n  case 'apple':\n    console.log('Red');\n    break;\n  case 'grape':\n    console.log('Purple');\n    break;\n  default:\n    console.log('Unknown');\n}",
      "options": {
        "A": "Yellow",
        "B": "Red",
        "C": "Purple",
        "D": "Unknown"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "Which middleware is commonly used to parse URL-encoded form data in Express.js?",
      "options": {
        "A": "express.form()",
        "B": "express.formData()",
        "C": "express.urlencoded()",
        "D": "express.parseForm()"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "Which of the following is NOT an effective way to prevent NoSQL injection in MongoDB?",
      "options": {
        "A": "Using mongoose schema validation",
        "B": "Using the sanitize-html package",
        "C": "Directly embedding user input in query objects",
        "D": "Using the express-validator package"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "Which of the following operations would cause the most DOM reflows?",
      "options": {
        "A": "Changing an element's background color",
        "B": "Repeatedly reading and changing an element's height",
        "C": "Adding a new CSS class to an element",
        "D": "Changing an element's text content once"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function createCounter() {\n  let count = 0;\n  \n  return function() {\n    count++;\n    return count;\n  };\n}\n\nconst counter1 = createCounter();\nconst counter2 = createCounter();\n\nconsole.log(counter1());\nconsole.log(counter1());\nconsole.log(counter2());",
      "options": {
        "A": "1 2 3",
        "B": "1 1 1",
        "C": "1 2 1",
        "D": "1 1 2"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "async function fetchData() {\n  try {\n    // Simulating a fetch that fails\n    await Promise.reject('API Error');\n    return 'Data';\n  } catch (error) {\n    return `Error: ${error}`;\n  }\n}\n\nfetchData().then(result => console.log(result));",
      "options": {
        "A": "Data",
        "B": "API Error",
        "C": "Error: API Error",
        "D": "Uncaught (in promise) API Error"
      },
      "correct_answer": "C"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const id1 = Symbol('id');\nconst id2 = Symbol('id');\n\nconst obj = {\n  [id1]: 'value1',\n  [id2]: 'value2'\n};\n\nconsole.log(id1 === id2);\nconsole.log(Object.keys(obj).length);",
      "options": {
        "A": "true 2",
        "B": "false 2",
        "C": "true 0",
        "D": "false 0"
      },
      "correct_answer": "D"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "When streaming large files in Node.js using fs.createReadStream, what is the default chunk size?",
      "options": {
        "A": "8KB",
        "B": "16KB",
        "C": "64KB",
        "D": "128KB"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const person = {\n  name: 'Alex',\n  greet() {\n    return `Hello, my name is ${this.name}`;\n  }\n};\n\nconst greetFunc = person.greet;\nconsole.log(greetFunc());",
      "options": {
        "A": "Hello, my name is Alex",
        "B": "Hello, my name is undefined",
        "C": "Hello, my name is ",
        "D": "Error: Cannot read property 'name' of undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "Which of the following is the recommended approach for API versioning in RESTful services?",
      "options": {
        "A": "There is no need for versioning if using proper HTTP methods",
        "B": "Using query parameters like ?version=1",
        "C": "Using URL path segments like /api/v1/resource",
        "D": "Using custom HTTP headers only"
      },
      "correct_answer": "C"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following recursive function?",
      "code_example": "function factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5));",
      "options": {
        "A": "5",
        "B": "15",
        "C": "120",
        "D": "Error: Maximum call stack size exceeded"
      },
      "correct_answer": "C"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "Which validator would you use to check if a field is a valid email with express-validator?",
      "code_example": "const { check } = require('express-validator');\n\napp.post('/signup', [\n  // Which validator should be used here for validating email?\n], (req, res) => {\n  // Handle request\n});",
      "options": {
        "A": "check('email').isEmail()",
        "B": "check('email').isEmailValid()",
        "C": "check('email').validateEmail()",
        "D": "check('email').matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i)"
      },
      "correct_answer": "A"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following function composition code?",
      "code_example": "const add2 = x => x + 2;\nconst multiply3 = x => x * 3;\nconst divide2 = x => x / 2;\n\nconst compose = (...fns) => x => fns.reduceRight((acc, fn) => fn(acc), x);\nconst calculate = compose(divide2, multiply3, add2);\n\nconsole.log(calculate(4));",
      "options": {
        "A": "9",
        "B": "10.5",
        "C": "7.5",
        "D": "9.5"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "Which middleware is used to parse JSON request bodies in Express.js?",
      "options": {
        "A": "express.parseJSON()",
        "B": "express.bodyParser()",
        "C": "express.json()",
        "D": "express.JSONParser()"
      },
      "correct_answer": "C"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will happen if many requests are made to an Express route with rate limiting set to 100 requests per hour?",
      "code_example": "const rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 60 * 60 * 1000, // 1 hour\n  max: 100\n});\n\napp.use('/api/', limiter);\n\napp.get('/api/data', (req, res) => {\n  res.json({ data: 'Important information' });\n});",
      "options": {
        "A": "The server will crash after 100 requests",
        "B": "The 101st request will receive a 429 (Too Many Requests) response",
        "C": "The 101st request will be queued and processed after the rate limit window expires",
        "D": "The limiter will automatically increase the limit if traffic is consistent"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code depicting callback hell?",
      "code_example": "function step1(callback) {\n  setTimeout(() => {\n    console.log('Step 1 complete');\n    callback();\n  }, 100);\n}\n\nfunction step2(callback) {\n  setTimeout(() => {\n    console.log('Step 2 complete');\n    callback();\n  }, 100);\n}\n\nfunction step3() {\n  setTimeout(() => {\n    console.log('Step 3 complete');\n  }, 100);\n}\n\nstep1(() => {\n  step2(() => {\n    step3();\n  });\n});\n\nconsole.log('Starting steps...');",
      "options": {
        "A": "Starting steps... Step 1 complete Step 2 complete Step 3 complete",
        "B": "Step 1 complete Step 2 complete Step 3 complete Starting steps...",
        "C": "Steps running in parallel, order will vary each time",
        "D": "Error: Maximum call stack size exceeded"
      },
      "correct_answer": "A"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following Express.js route handler?",
      "code_example": "app.get('/api/user', (req, res) => {\n  const user = {\n    id: 1,\n    name: 'John Doe',\n    email: 'john@example.com'\n  };\n  \n  res.status(200).json(user);\n});",
      "options": {
        "A": "The user object as plain text",
        "B": "A JSON string with content-type text/html",
        "C": "A JSON object with content-type application/json",
        "D": "Error: json is not a function"
      },
      "correct_answer": "C"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What will be the output of the following code which demonstrates a WeakMap for memory-sensitive caching?",
      "options": {
        "A": "Error: Cannot read property 'data' of undefined",
        "B": "{ id: 123, name: 'User' }",
        "C": "undefined",
        "D": "null"
      },
      "correct_answer": "C",
      "code_example": "const cache = new WeakMap();\n\nlet user = { id: 123, name: 'User' };\nlet userData = { data: { permissions: ['read', 'write'] } };\n\ncache.set(user, userData);\n\nconsole.log(cache.get(user).data);\n\n// After some time, user reference is removed\nuser = null;\n\n// Force garbage collection (note: this is conceptual, as explicit\n// garbage collection cannot be reliably triggered in standard JavaScript)\n// setTimeout is used here to simulate the passage of time\n\nsetTimeout(() => {\n  let newUser = { id: 123, name: 'User' };\n  console.log(cache.get(newUser));\n}, 100);"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "When implementing JWT authentication, which of the following is the most secure way to store JWT secrets in a Node.js application?",
      "options": {
        "A": "Hardcoding the secret in the authentication middleware",
        "B": "Storing the secret in a public GitHub repository for easy access",
        "C": "Using environment variables loaded from a .env file that is not committed to version control",
        "D": "Storing the secret as a global variable in app.js"
      },
      "correct_answer": "C"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will the following code using bcrypt return?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "An error because the number of salt rounds is too high",
        "D": "A promise that resolves to true"
      },
      "correct_answer": "A",
      "code_example": "const bcrypt = require('bcrypt');\n\nasync function checkPassword() {\n  const password = 'securepassword123';\n  const saltRounds = 10;\n  \n  // Hash the password\n  const hash = await bcrypt.hash(password, saltRounds);\n  \n  // Compare the original password with the hash\n  const result = await bcrypt.compare('securepassword123', hash);\n  return result;\n}\n\n// This would log true in an actual execution\nconsole.log(checkPassword());"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "In a cluster module setup with Node.js, which of the following statements is true about the behavior of listening ports?",
      "options": {
        "A": "Each worker process must listen on a different port",
        "B": "Only the master process can bind to a port",
        "C": "Worker processes automatically share the same port when the master binds first",
        "D": "Workers must use IPC to communicate with the master process to receive port bindings"
      },
      "correct_answer": "C"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following code which demonstrates manipulating streams in Node.js?",
      "options": {
        "A": "Original: hello world, Transformed: HELLO WORLD",
        "B": "Original: hello world, Transformed: hello world",
        "C": "Original: hello, Transformed: HELLO",
        "D": "Error: Cannot read property 'pipe' of undefined"
      },
      "correct_answer": "A",
      "code_example": "const { Transform } = require('stream');\nconst { StringDecoder } = require('string_decoder');\n\n// Create a transform stream that converts data to uppercase\nclass UppercaseTransform extends Transform {\n  constructor(options) {\n    super(options);\n    this.decoder = new StringDecoder('utf8');\n  }\n\n  _transform(chunk, encoding, callback) {\n    const uppercase = this.decoder.write(chunk).toUpperCase();\n    this.push(uppercase);\n    callback();\n  }\n}\n\n// Create a readable stream (from a Buffer source)\nconst { Readable } = require('stream');\nconst source = Buffer.from('hello world');\nconst readableStream = new Readable({\n  read() {\n    this.push(source);\n    this.push(null); // Signals end of stream\n  }\n});\n\n// Create our transform stream\nconst uppercaseTransform = new UppercaseTransform();\n\n// Capture the original data\nlet original = '';\nreadableStream.on('data', (chunk) => {\n  original += chunk.toString();\n});\n\n// Pipe through transform and capture transformed data\nlet transformed = '';\nconst transformedStream = readableStream.pipe(uppercaseTransform);\ntransformedStream.on('data', (chunk) => {\n  transformed += chunk.toString();\n});\n\n// When everything is done\ntransformedStream.on('end', () => {\n  console.log(`Original: ${original}, Transformed: ${transformed}`);\n});"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "Which of the following express-rate-limit configurations correctly limits API requests to 100 requests per IP address per 15-minute window?",
      "options": {
        "A": "const limiter = rateLimit({ windowMs: 15 * 60, max: 100, standardHeaders: true });",
        "B": "const limiter = rateLimit({ window: '15m', maxRequests: 100, headers: true });",
        "C": "const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100, standardHeaders: true });",
        "D": "const limiter = rateLimit({ time: 15 * 60 * 1000, limit: 100, headers: true });"
      },
      "correct_answer": "C"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What does the following docker-compose.yml file do?",
      "options": {
        "A": "Runs a MongoDB container with data persistence and a separate app container connecting to it on the default port",
        "B": "Creates a network of three containers: app, MongoDB, and Redis, all sharing the same volume",
        "C": "Launches a standalone MongoDB container with no persistence",
        "D": "Deploys the application in development mode with hot reloading"
      },
      "correct_answer": "A",
      "code_example": "version: '3'\nservices:\n  mongodb:\n    image: mongo:latest\n    container_name: mongodb\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongodb_data:/data/db\n    networks:\n      - app-network\n    restart: always\n\n  app:\n    build: .\n    container_name: nodejs-app\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - MONGO_URI=mongodb://mongodb:27017/myapp\n    depends_on:\n      - mongodb\n    networks:\n      - app-network\n    restart: always\n\nnetworks:\n  app-network:\n    driver: bridge\n\nvolumes:\n  mongodb_data:\n    driver: local"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "When implementing refresh token rotation with JWT authentication, which of the following best practices should you follow?",
      "options": {
        "A": "Store both the access token and refresh token in localStorage for persistence",
        "B": "Make refresh tokens short-lived and access tokens long-lived",
        "C": "Implement a refresh token reuse detection strategy and maintain a token invalidation list",
        "D": "Always send both tokens in every API request to simplify authentication"
      },
      "correct_answer": "C"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will the following code using a WeakSet output?",
      "options": {
        "A": "true, true",
        "B": "true, false",
        "C": "ReferenceError: userB is not defined",
        "D": "TypeError: Invalid value used in weak set"
      },
      "correct_answer": "B",
      "code_example": "const visitedUsers = new WeakSet();\n\n// User objects\nlet userA = { id: 1, name: 'Alice' };\nlet userB = { id: 2, name: 'Bob' };\n\n// Mark users as having visited the site\nvisitedUsers.add(userA);\nvisitedUsers.add(userB);\n\nconsole.log(visitedUsers.has(userA)); // Check if userA visited\n\n// UserB account deleted, reference removed\nuserB = null;\n\n// Create a new reference with the same data\nconst newUserB = { id: 2, name: 'Bob' };\n\n// Check if this "same" user is in our WeakSet\nconsole.log(visitedUsers.has(newUserB));"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "In the context of V8 engine optimizations, what is the primary purpose of hidden classes?",
      "options": {
        "A": "To encrypt JavaScript code for security purposes",
        "B": "To optimize memory usage by sharing property information between similar objects",
        "C": "To hide implementation details from the developer",
        "D": "To provide a way to use private class fields in older JavaScript versions"
      },
      "correct_answer": "B"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What is the result of the following code that demonstrates Node.js clustering?",
      "options": {
        "A": "Worker 1 started, Worker 2 started, Worker 3 started, Worker 4 started",
        "B": "Master process is running, Worker process started, Worker process started",
        "C": "Error: cluster.fork() can only be called from the master process",
        "D": "Worker 1 pid: [number], Worker 2 pid: [number], Worker 3 pid: [number], Worker 4 pid: [number]"
      },
      "correct_answer": "D",
      "code_example": "const cluster = require('cluster');\nconst os = require('os');\n\nif (cluster.isMaster) {\n  // Count machine cores\n  const numCPUs = os.cpus().length;\n  \n  // Fork workers based on CPU count\n  for (let i = 0; i < numCPUs; i++) {\n    const worker = cluster.fork();\n    console.log(`Worker ${i + 1} pid: ${worker.process.pid}`);\n  }\n  \n  // Handle worker exit\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`Worker ${worker.process.pid} died`);\n    // Restart the worker\n    cluster.fork();\n  });\n} else {\n  // Workers share the TCP connection\n  // This is where you would start your express server\n  // require('./server.js');\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "When configuring winston for log monitoring in a production Node.js application, which of the following transport configurations is most appropriate?",
      "options": {
        "A": "A Console transport with level set to 'debug'",
        "B": "A File transport with daily rotation, combined with an error-only File transport and Sentry integration for critical errors",
        "C": "Only a Console transport with colorization enabled",
        "D": "A single File transport that logs all levels to the same file"
      },
      "correct_answer": "B"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will the following code measuring V8 memory usage output?",
      "options": {
        "A": "Larger heap values after creating objects and smaller values after nullifying them",
        "B": "The same heap values before and after, since V8 optimization prevents memory growth",
        "C": "Larger heap values after creating objects but no change after nullifying them until garbage collection runs",
        "D": "Error: getHeapStatistics is not a function"
      },
      "correct_answer": "C",
      "code_example": "// Measure memory usage in V8\nconst v8 = require('v8');\n\n// Helper function to log memory usage\nfunction logMemoryUsage() {\n  const stats = v8.getHeapStatistics();\n  console.log({\n    totalHeapSize: stats.total_heap_size / (1024 * 1024) + ' MB',\n    usedHeapSize: stats.used_heap_size / (1024 * 1024) + ' MB',\n    heapSizeLimit: stats.heap_size_limit / (1024 * 1024) + ' MB'\n  });\n}\n\n// Log initial memory usage\nconsole.log('Initial memory usage:');\nlogMemoryUsage();\n\n// Create a lot of objects to increase memory usage\nlet objects = [];\nfor (let i = 0; i < 1000000; i++) {\n  objects.push({ \n    id: i, \n    data: 'Some data that takes up memory ' + i,\n    moreData: new Array(10).fill('more data')\n  });\n}\n\n// Log memory usage after creating objects\nconsole.log('\\nMemory usage after creating objects:');\nlogMemoryUsage();\n\n// Remove references to allow garbage collection\nobjects = null;\n\n// Log memory usage after removing references\n// Note: Garbage collection may not run immediately\nconsole.log('\\nMemory usage after nullifying references:');\nlogMemoryUsage();"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which combination of security headers provides the strongest protection against common web vulnerabilities?",
      "options": {
        "A": "X-Frame-Options: DENY; X-XSS-Protection: 1; mode=block",
        "B": "Referrer-Policy: no-referrer; X-Content-Type-Options: nosniff; Content-Security-Policy: default-src 'self'",
        "C": "X-Protected-By: Node.js; X-Security-Level: high",
        "D": "Cache-Control: no-store; Pragma: no-cache"
      },
      "correct_answer": "B"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What is the primary distinction between horizontal and vertical scaling in the context of Node.js applications?",
      "options": {
        "A": "Horizontal scaling uses PM2 while vertical scaling uses Docker",
        "B": "Horizontal scaling adds more machines to the resource pool, while vertical scaling adds more power to existing machines",
        "C": "Vertical scaling is always more cost-effective than horizontal scaling",
        "D": "Horizontal scaling can only be achieved through Kubernetes, while vertical scaling only through increasing RAM"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will the following code using PM2's programmatic API output?",
      "options": {
        "A": "Error: No script path was specified",
        "B": "Successfully started 4 processes named 'api-workers'",
        "C": "PM2 daemon started: Process successfully started",
        "D": "{ name: 'api-workers', instances: 4, pid: [array of PIDs] }"
      },
      "correct_answer": "D",
      "code_example": "const pm2 = require('pm2');\n\n// Connect to PM2\npm2.connect((err) => {\n  if (err) {\n    console.error(err);\n    process.exit(2);\n  }\n\n  // Start a new app with load-balancing\n  pm2.start({\n    script: 'api-server.js',\n    name: 'api-workers',\n    instances: 4,           // Creates 4 instances for load balancing\n    exec_mode: 'cluster',   // Run in cluster mode (as opposed to 'fork')\n    max_memory_restart: '300M', // Restart if memory exceeds this\n    env: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    output: './logs/out.log',\n    error: './logs/error.log'\n  }, (err, apps) => {\n    pm2.disconnect();\n    if (err) throw err;\n    console.log(apps[0]);  // Log information about the first app\n  });\n});"
    }
  ]
}
