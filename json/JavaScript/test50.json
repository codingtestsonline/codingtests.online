{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const message = `The sum of 5 and 3 is ${5 + 3}`;\\nconsole.log(message);",
      "options": {
        "A": "The sum of 5 and 3 is 8",
        "B": "The sum of 5 and 3 is ${5 + 3}",
        "C": "The sum of 5 and 3 is 53",
        "D": "Error: Template literals cannot include expressions"
      },
      "correct_answer": "A"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "How do you select an element with the ID 'main-content' using JavaScript?",
      "options": {
        "A": "document.querySelector('#main-content')",
        "B": "document.getElementById('main-content')",
        "C": "Both A and B will work",
        "D": "document.getElementByName('main-content')"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(sayHello());\\n\\nfunction sayHello() {\\n  return 'Hello!';\\n}",
      "options": {
        "A": "undefined",
        "B": "Error: sayHello is not defined",
        "C": "Error: Cannot access sayHello before initialization",
        "D": "Hello!"
      },
      "correct_answer": "D"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const numbers = [1, 2, 3, 4, 5];\\nconst doubled = numbers.map(num => num * 2);\\nconsole.log(doubled);",
      "options": {
        "A": "[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]",
        "B": "[2, 4, 6, 8, 10]",
        "C": "[1, 4, 9, 16, 25]",
        "D": "Error: map is not a function"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "for (let i = 0; i < 5; i++) {\\n  if (i === 2) {\\n    continue;\\n  }\\n  console.log(i);\\n}",
      "options": {
        "A": "0 1 3 4",
        "B": "0 1 2 3 4",
        "C": "0 1",
        "D": "2"
      },
      "correct_answer": "A"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const arr1 = [1, 2, 3];\\nconst arr2 = [4, 5, 6];\\nconst combined = [...arr1, ...arr2];\\nconsole.log(combined);",
      "options": {
        "A": "[[1, 2, 3], [4, 5, 6]]",
        "B": "[1, 2, 3, 4, 5, 6]",
        "C": "[arr1, arr2]",
        "D": "Error: Spread operator can only be used in function calls"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "(function() {\\n  const message = 'Hello from IIFE';\\n  console.log(message);\\n})();",
      "options": {
        "A": "Nothing, the function is never called",
        "B": "Error: Function statements require a function name",
        "C": "Hello from IIFE",
        "D": "undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "In a package.json file, which section defines the commands that can be run using npm run?",
      "options": {
        "A": "commands",
        "B": "scripts",
        "C": "run",
        "D": "executables"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "function processData(data, callback) {\\n  const result = data * 2;\\n  callback(result);\\n}\\n\\nprocessData(5, function(result) {\\n  console.log(result);\\n});",
      "options": {
        "A": "5",
        "B": "function(result) { console.log(result); }",
        "C": "10",
        "D": "undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which of the following best describes Node.js?",
      "options": {
        "A": "A JavaScript framework for creating user interfaces",
        "B": "A runtime environment that executes JavaScript code outside a web browser",
        "C": "A JavaScript library focused on DOM manipulation",
        "D": "A programming language derived from JavaScript"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "How does Node.js differ from browser JavaScript regarding the global object?",
      "options": {
        "A": "Browser uses 'window' while Node.js uses 'global'",
        "B": "Browser uses 'document' while Node.js uses 'window'",
        "C": "Browser uses 'global' while Node.js uses 'process'",
        "D": "There is no difference; both use 'window'"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const age = 17;\\nconst message = age >= 18 ? 'Adult' : 'Minor';\\nconsole.log(message);",
      "options": {
        "A": "Adult",
        "B": "Minor",
        "C": "Age is 17",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "Which of the following is the correct way to export a function in Node.js using CommonJS?",
      "options": {
        "A": "export default function myFunction() {}",
        "B": "export function myFunction() {}",
        "C": "module.exports = function myFunction() {}",
        "D": "exports = { myFunction: function() {} }"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const value = 5n;\\nconsole.log(typeof value);",
      "options": {
        "A": "number",
        "B": "string",
        "C": "bigint",
        "D": "object"
      },
      "correct_answer": "C"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const person = { name: 'Alice', age: 30, job: 'Engineer' };\\nconst { name, job } = person;\\nconsole.log(name, job);",
      "options": {
        "A": "{ name: 'Alice' } { job: 'Engineer' }",
        "B": "Alice Engineer",
        "C": "undefined undefined",
        "D": "Error: Invalid left-hand side in assignment"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What is the correct way to change the text content of an element with id 'message' in JavaScript?",
      "options": {
        "A": "document.getElementById('message').text = 'Hello';",
        "B": "document.getElementById('message').textContent = 'Hello';",
        "C": "document.getElementById('message').value = 'Hello';",
        "D": "document.getElementById('message').innerText = 'Hello';"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function greet() {\\n  return `Hello, ${this.name}!`;\\n}\\n\\nconst person = { name: 'Sophie' };\\nconsole.log(greet.call(person));",
      "options": {
        "A": "Hello, undefined!",
        "B": "Hello, Sophie!",
        "C": "Error: this.name is not defined",
        "D": "function greet() { return `Hello, ${this.name}!`; }"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const promise = new Promise((resolve, reject) => {\\n  setTimeout(() => resolve('Success!'), 100);\\n});\\n\\npromise.then(result => {\\n  console.log(result);\\n  return 'Next step';\\n}).then(result => {\\n  console.log(result);\\n});",
      "options": {
        "A": "Success! Next step",
        "B": "Promise { <pending> } Promise { <pending> }",
        "C": "Success! Success!",
        "D": "Next step Next step"
      },
      "correct_answer": "A"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "Which of the following is NOT a valid way to implement caching in a Node.js application?",
      "options": {
        "A": "Using Redis as an in-memory data store",
        "B": "Using node-cache to store data in memory",
        "C": "Using HTTP headers like Cache-Control and ETag",
        "D": "Using console.cache() to store values"
      },
      "correct_answer": "D"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "In Express.js, what is the correct way to send a JSON response with a status code of 201?",
      "code_example": "app.post('/api/users', (req, res) => {\\n  // Create user logic here\\n  const newUser = { id: 123, name: 'John' };\\n  // Send response",
      "options": {
        "A": "res.json(201, newUser);",
        "B": "res.status(201).json(newUser);",
        "C": "res.send(201, JSON.stringify(newUser));",
        "D": "res.sendJson(newUser, 201);"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What does it mean for a function to be 'pure'?",
      "options": {
        "A": "It only uses arrow function syntax",
        "B": "It doesn't modify state outside its scope and returns the same output for the same inputs",
        "C": "It doesn't use any external libraries or dependencies",
        "D": "It's defined using the 'pure' keyword"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const id = Symbol('id');\\nconst user = {\\n  name: 'Alice',\\n  [id]: 12345\\n};\\n\\nconsole.log(Object.keys(user));",
      "options": {
        "A": "['name', Symbol(id)]",
        "B": "['name', 'id']",
        "C": "['name']",
        "D": "['name', 12345]"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function outer() {\\n  let count = 0;\\n  function inner() {\\n    count++;\\n    return count;\\n  }\\n  return inner;\\n}\\n\\nconst increment = outer();\\nconsole.log(increment());\\nconsole.log(increment());",
      "options": {
        "A": "1 1",
        "B": "1 2",
        "C": "0 1",
        "D": "Error: count is not defined"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "Which HTTP method is typically used for updating an existing resource?",
      "options": {
        "A": "GET",
        "B": "POST",
        "C": "PUT",
        "D": "DELETE"
      },
      "correct_answer": "C"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const p1 = Promise.resolve('First');\\nconst p2 = new Promise((resolve) => setTimeout(() => resolve('Second'), 100));\\nconst p3 = Promise.resolve('Third');\\n\\nPromise.all([p1, p2, p3]).then((values) => {\\n  console.log(values);\\n});",
      "options": {
        "A": "['First', 'Second', 'Third']",
        "B": "['First', 'Third', 'Second']",
        "C": "['First']",
        "D": "First Second Third"
      },
      "correct_answer": "A"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What is the best practice for API versioning in a RESTful API?",
      "options": {
        "A": "Use a version parameter in the query string (e.g., /api?version=1)",
        "B": "Include the version in the URL path (e.g., /api/v1/resource)",
        "C": "Use a custom HTTP header (e.g., Accept-Version: 1.0)",
        "D": "All of the above are valid approaches depending on requirements"
      },
      "correct_answer": "D"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "In Express.js, what middleware should you use to parse form data submitted with Content-Type: application/x-www-form-urlencoded?",
      "code_example": "const express = require('express');\\nconst app = express();\\n\\n// What should go here to handle form data?\\n\\napp.post('/form', (req, res) => {\\n  console.log(req.body);\\n  res.send('Form received');\\n});",
      "options": {
        "A": "app.use(express.form())",
        "B": "app.use(express.urlencoded({ extended: true }))",
        "C": "app.use(express.bodyParser())",
        "D": "app.use(express.formData())"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What is the difference between a Buffer and a Stream in Node.js?",
      "options": {
        "A": "Buffers process data in chunks while Streams process all data at once",
        "B": "Buffers are used for binary data while Streams are only for text data",
        "C": "Streams process data in chunks while Buffers hold data in memory all at once",
        "D": "There is no difference; the terms are interchangeable"
      },
      "correct_answer": "C"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "let counter = 0;\\n\\nconst interval = setInterval(() => {\\n  counter++;\\n  console.log(counter);\\n  if (counter === 3) {\\n    clearInterval(interval);\\n  }\\n}, 100);\\n\\n// After all intervals complete",
      "options": {
        "A": "1 2 3",
        "B": "0 1 2",
        "C": "1 2 3 4",
        "D": "The function will run indefinitely"
      },
      "correct_answer": "A"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What is a closure in JavaScript?",
      "options": {
        "A": "A way to seal variables so they cannot be modified",
        "B": "A programming error that occurs when a function is called incorrectly",
        "C": "A function that has access to variables from its outer (enclosing) scope, even after the outer function has returned",
        "D": "A method to close open network connections"
      },
      "correct_answer": "C"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What is the correct way to connect to a MongoDB database using Mongoose?",
      "code_example": "const mongoose = require('mongoose');\\n\\n// What code should go here to connect to a MongoDB database named 'testdb'?",
      "options": {
        "A": "mongoose.connect('mongodb://localhost/testdb');",
        "B": "mongoose.open('mongodb://localhost/testdb');",
        "C": "mongoose.db.connect('mongodb://localhost/testdb');",
        "D": "mongoose.createConnection('mongodb://localhost/testdb');"
      },
      "correct_answer": "A"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following Express.js route handler?",
      "code_example": "app.get('/api/users/:id', (req, res) => {\\n  const userId = req.params.id;\\n  res.json({\\n    endpoint: `/api/users/${userId}`,\\n    method: req.method,\\n    id: userId\\n  });\\n});\\n\\n// When a request is made to /api/users/42",
      "options": {
        "A": "{ \"endpoint\": \"/api/users/42\", \"method\": \"GET\", \"id\": \"42\" }",
        "B": "{ \"endpoint\": \"/api/users/:id\", \"method\": \"GET\", \"id\": \"42\" }",
        "C": "{ \"endpoint\": \"/api/users/42\", \"method\": \"get\", \"id\": 42 }",
        "D": "Error: userId is not defined"
      },
      "correct_answer": "A"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What will be the output when running this code that uses bcrypt for password hashing?",
      "code_example": "const bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst plainPassword = 'secure123';\n\nasync function hashAndCompare() {\n  const hash1 = await bcrypt.hash(plainPassword, saltRounds);\n  const hash2 = await bcrypt.hash(plainPassword, saltRounds);\n  \n  console.log(hash1 === hash2);\n  console.log(await bcrypt.compare(plainPassword, hash1));\n  console.log(await bcrypt.compare('wrong', hash1));\n}\n\nhashAndCompare();",
      "options": {
        "A": "true, true, false",
        "B": "false, true, false",
        "C": "false, false, false",
        "D": "true, false, true"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "Which of the following is NOT a valid way to debug a Node.js application using the built-in inspector?",
      "options": {
        "A": "node --inspect app.js",
        "B": "node --inspect-brk app.js",
        "C": "node --inspect=9229 app.js",
        "D": "node --debug-inspector app.js"
      },
      "correct_answer": "D"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What is the output of this code using Helmet.js for security?",
      "code_example": "const express = require('express');\nconst helmet = require('helmet');\n\nconst app = express();\n\n// First middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\"]\n    }\n  }\n}));\n\n// Second middleware\napp.use(helmet.contentSecurityPolicy({\n  directives: {\n    defaultSrc: [\"'none'\"],\n    scriptSrc: [\"'self'\"]\n  }\n}));\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\n// What will be the effective Content-Security-Policy header value?\nconsole.log(app._router.stack\n  .filter(layer => layer.name === 'contentSecurityPolicy')\n  .map(layer => layer.handle)[1]\n  .getDefaultDirectives().defaultSrc);",
      "options": {
        "A": "['self', 'unsafe-inline']",
        "B": "['self']",
        "C": "['none']",
        "D": "Error: Cannot read properties of undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be logged when executing this Winston logger configuration?",
      "code_example": "const winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.simple(),\n      level: 'warn'\n    })\n  ]\n});\n\nlogger.info('This is an info message');\nlogger.warn('This is a warning');\nlogger.debug('This is a debug message');\n\n// What will be logged to the console?",
      "options": {
        "A": "All three messages will be logged",
        "B": "Only 'This is a warning' will be logged",
        "C": "'This is an info message' and 'This is a warning' will be logged",
        "D": "No messages will be logged"
      },
      "correct_answer": "B"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What is the result when running this Node.js stream processing code?",
      "code_example": "const { Transform } = require('stream');\nconst { createReadStream, createWriteStream } = require('fs');\n\nconst uppercaseTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    this.push(chunk.toString().toUpperCase());\n    callback();\n  }\n});\n\nconst countTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    const transformedChunk = chunk.toString();\n    const count = transformedChunk.split('\\n').length - 1;\n    this.push(`${transformedChunk}\\nLine count: ${count}`);\n    callback();\n  }\n});\n\nconst inputData = 'line 1\\nline 2\\nline 3';\nconst inputFilePath = '/tmp/input.txt';\nconst outputFilePath = '/tmp/output.txt';\n\nrequire('fs').writeFileSync(inputFilePath, inputData);\n\ncreateReadStream(inputFilePath)\n  .pipe(uppercaseTransform)\n  .pipe(countTransform)\n  .pipe(createWriteStream(outputFilePath))\n  .on('finish', () => {\n    console.log(require('fs').readFileSync(outputFilePath, 'utf8'));\n  });",
      "options": {
        "A": "LINE 1\nLINE 2\nLINE 3\nLine count: 3",
        "B": "LINE 1\nLINE 2\nLINE 3\nLine count: 2",
        "C": "line 1\nline 2\nline 3\nLine count: 3",
        "D": "line 1\nline 2\nline 3\nLine count: 2"
      },
      "correct_answer": "A"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "When using Prometheus for monitoring a Node.js application, which of the following metrics types would be MOST appropriate for tracking the duration of HTTP requests?",
      "options": {
        "A": "Counter",
        "B": "Gauge",
        "C": "Histogram",
        "D": "Summary"
      },
      "correct_answer": "C"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be the result of executing this code related to CORS configuration?",
      "code_example": "const express = require('express');\nconst cors = require('cors');\nconst app = express();\n\nconst corsOptions = {\n  origin: ['https://trusted-site.com', 'https://api.trusted-site.com'],\n  methods: ['GET', 'POST'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true\n};\n\napp.use(cors(corsOptions));\n\n// Mock request and response\nconst mockReq = {\n  method: 'OPTIONS',\n  headers: {\n    origin: 'https://malicious-site.com',\n    'access-control-request-method': 'POST',\n    'access-control-request-headers': 'Content-Type'\n  }\n};\n\nconst mockRes = {\n  headers: {},\n  statusCode: 200,\n  setHeader(name, value) { this.headers[name] = value; },\n  getHeader(name) { return this.headers[name]; },\n  status(code) { this.statusCode = code; return this; },\n  end() {}\n};\n\nconst corsMiddleware = cors(corsOptions);\ncorsMiddleware(mockReq, mockRes, () => {});\n\nconsole.log(mockRes.headers['access-control-allow-origin']);\nconsole.log(mockRes.statusCode);",
      "options": {
        "A": "https://malicious-site.com, 200",
        "B": "undefined, 200",
        "C": "false, 403",
        "D": "null, 204"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will this WebSocket server using socket.io log when a client connects and sends messages?",
      "code_example": "const http = require('http');\nconst server = http.createServer();\nconst io = require('socket.io')(server);\n\nio.use((socket, next) => {\n  if (socket.handshake.query.token === 'secret') {\n    return next();\n  }\n  return next(new Error('Authentication error'));\n});\n\nio.on('connection', (socket) => {\n  console.log('Client connected');\n  \n  socket.on('private message', (msg) => {\n    console.log('Private:', msg);\n  });\n  \n  socket.join('room1');\n  \n  socket.on('room message', (msg) => {\n    socket.to('room1').emit('room message', msg);\n    console.log('Room:', msg);\n  });\n});\n\n// Simulate client behavior\nconst socketClient = require('socket.io-client');\n\n// First client (authenticated)\nconst client1 = socketClient('http://localhost:3000', {\n  query: { token: 'secret' }\n});\n\n// Second client (authenticated)\nconst client2 = socketClient('http://localhost:3000', {\n  query: { token: 'secret' }\n});\n\n// Third client (unauthenticated)\nconst client3 = socketClient('http://localhost:3000', {\n  query: { token: 'wrong' }\n});\n\nserver.listen(3000, () => {\n  // Wait for connections\n  setTimeout(() => {\n    client1.emit('private message', 'Hello from client1');\n    client1.emit('room message', 'Broadcast from client1');\n  }, 100);\n});",
      "options": {
        "A": "Client connected (3 times), Private: Hello from client1, Room: Broadcast from client1",
        "B": "Client connected (2 times), Private: Hello from client1, Room: Broadcast from client1",
        "C": "Client connected (3 times), Private: Hello from client1",
        "D": "Error: Authentication error"
      },
      "correct_answer": "B"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of this code that processes a large file using streams?",
      "code_example": "const fs = require('fs');\nconst { pipeline, Transform } = require('stream');\n\n// Create a large file for testing\nconst testFilePath = '/tmp/large-test-file.txt';\nlet testData = '';\nfor (let i = 0; i < 1000; i++) {\n  testData += `Line ${i + 1}: ${'*'.repeat(10)}\\n`;\n}\nfs.writeFileSync(testFilePath, testData);\n\n// Create processing streams\nclass LineCounter extends Transform {\n  constructor(options) {\n    super(options);\n    this.count = 0;\n    this.totalBytes = 0;\n  }\n  \n  _transform(chunk, encoding, callback) {\n    const data = chunk.toString();\n    this.count += (data.match(/\\n/g) || []).length;\n    this.totalBytes += chunk.length;\n    callback(null, chunk);\n  }\n  \n  _flush(callback) {\n    this.push(`\\nProcessed ${this.count} lines, ${this.totalBytes} bytes\\n`);\n    callback();\n  }\n}\n\n// Process file with custom highWaterMark\nconst readStream = fs.createReadStream(testFilePath, { highWaterMark: 1024 });\nconst lineCounter = new LineCounter({ encoding: 'utf8' });\nconst devNull = fs.createWriteStream('/dev/null');\n\npipeline(readStream, lineCounter, devNull, (err) => {\n  if (err) {\n    console.error('Pipeline failed', err);\n  } else {\n    console.log(`Final count: ${lineCounter.count}`);\n  }\n});",
      "options": {
        "A": "Final count: 1000",
        "B": "Final count: 1001",
        "C": "Pipeline failed: Error: ENOENT: no such file or directory",
        "D": "Final count: 999"
      },
      "correct_answer": "A"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following is the MOST effective defense against Cross-Site Request Forgery (CSRF) attacks in a Node.js Express application?",
      "options": {
        "A": "Using JSON Web Tokens (JWT) for authentication",
        "B": "Implementing a SameSite=Strict cookie policy",
        "C": "Using double-submit cookie pattern with CSRF tokens",
        "D": "Setting HTTP-only cookies"
      },
      "correct_answer": "C"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "When configuring Nginx as a reverse proxy for a Node.js application, which directive is MOST important to set to ensure client IP addresses are properly forwarded to the Node.js application?",
      "options": {
        "A": "proxy_set_header Host $host;",
        "B": "proxy_set_header X-Real-IP $remote_addr;",
        "C": "proxy_redirect off;",
        "D": "proxy_http_version 1.1;"
      },
      "correct_answer": "B"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will this Node.js clustering code output when executed on a 4-core machine?",
      "code_example": "const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isPrimary) {\n  console.log(`Primary ${process.pid} is running`);\n  let workerCount = 0;\n\n  // Custom logic: Fork max 2 workers\n  const maxWorkers = Math.min(2, numCPUs);\n  \n  for (let i = 0; i < maxWorkers; i++) {\n    cluster.fork();\n    workerCount++;\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`Worker ${worker.process.pid} died`);\n    if (workerCount < numCPUs) {\n      cluster.fork();\n      workerCount++;\n      console.log(`New worker started`);\n    }\n  });\n\n  // Simulate a worker crash after 100ms\n  setTimeout(() => {\n    const workerIds = Object.keys(cluster.workers);\n    if (workerIds.length > 0) {\n      cluster.workers[workerIds[0]].kill();\n    }\n  }, 100);\n} else {\n  console.log(`Worker ${process.pid} started`);\n  \n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n}",
      "options": {
        "A": "Primary process, 2 workers initially, worker death, 1 new worker started (total: 2)",
        "B": "Primary process, 2 workers initially, worker death, 1 new worker started (total: 3)",
        "C": "Primary process, 4 workers initially, worker death, no new worker",
        "D": "Primary process, 2 workers initially, worker death, no new worker"
      },
      "correct_answer": "A"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "When deploying a Node.js application with Helm, which of the following Kubernetes resources would you NOT typically define in your Helm chart?",
      "options": {
        "A": "Deployment",
        "B": "Service",
        "C": "Namespace",
        "D": "CronJob"
      },
      "correct_answer": "C"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the result of running this code for encrypting and decrypting sensitive data?",
      "code_example": "const crypto = require('crypto');\n\nfunction encryptDecrypt() {\n  // Generate a secure encryption key and initialization vector\n  const algorithm = 'aes-256-cbc';\n  const key = crypto.randomBytes(32);\n  const iv = crypto.randomBytes(16);\n  \n  // Original sensitive data\n  const sensitiveData = { \n    username: 'admin',\n    password: 'super-secret!',\n    apiKey: '9d91jd91j19j19d1j9dj19d'\n  };\n  \n  try {\n    // Encrypt the data\n    const cipher = crypto.createCipheriv(algorithm, key, iv);\n    let encrypted = cipher.update(JSON.stringify(sensitiveData), 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    // Try to decrypt with wrong key but correct IV\n    const wrongKey = Buffer.from(key.toString('hex').replace(/^./, '1'), 'hex');\n    const decipher = crypto.createDecipheriv(algorithm, wrongKey, iv);\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    \n    return JSON.parse(decrypted);\n  } catch (error) {\n    return error.code || error.message;\n  }\n}\n\nconsole.log(encryptDecrypt());",
      "options": {
        "A": "The original sensitive data object is returned",
        "B": "A SyntaxError is returned due to invalid JSON",
        "C": "A 'bad decrypt' error message is returned",
        "D": "ERR_OSSL_EVP_BAD_DECRYPT"
      },
      "correct_answer": "C"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What would be the result of executing this code comparing container management approaches?",
      "code_example": "const { execSync } = require('child_process');\n\nfunction compareContainers() {\n  try {\n    // Create a Docker container\n    const dockerResult = execSync(\n      'docker run --name test-container -d nginx:alpine && ' +\n      'docker inspect -f \"{{.State.Status}}\" test-container && ' +\n      'docker rm -f test-container',\n      { encoding: 'utf8' }\n    ).trim();\n    \n    // Simulate a Kubernetes pod creation (simplified for example purposes)\n    const k8sResult = 'Running';\n    \n    // Compare Docker container vs Kubernetes pod status\n    const isMatch = dockerResult === k8sResult;\n    \n    // Return structured comparison data\n    return {\n      containerType: 'Docker',\n      containerStatus: dockerResult,\n      podType: 'Kubernetes',\n      podStatus: k8sResult,\n      statusMatch: isMatch\n    };\n  } catch (error) {\n    // In case Docker is not installed or permissions issue\n    return { error: error.message };\n  }\n}\n\nconsole.log(compareContainers());",
      "options": {
        "A": "{ containerType: 'Docker', containerStatus: 'running', podType: 'Kubernetes', podStatus: 'Running', statusMatch: true }",
        "B": "{ containerType: 'Docker', containerStatus: 'running', podType: 'Kubernetes', podStatus: 'Running', statusMatch: false }",
        "C": "{ error: 'Command failed: docker run --name test-container -d nginx:alpine...' }",
        "D": "{ containerType: 'Docker', containerStatus: 'Running', podType: 'Kubernetes', podStatus: 'Running', statusMatch: true }"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "Which of the following statements correctly describes a key difference between WebSockets, REST, and GraphQL?",
      "options": {
        "A": "REST always uses XML for data transfer, GraphQL uses JSON, and WebSockets only support binary data",
        "B": "REST is stateless, GraphQL requires client-side caching, and WebSockets maintain a persistent connection",
        "C": "GraphQL requires multiple endpoints for different resource types, REST uses a single endpoint, and WebSockets don't use HTTP",
        "D": "WebSockets require HTTP/2, REST works only with HTTP/1.1, and GraphQL requires a specific database technology"
      },
      "correct_answer": "B"
    }
  ]
}
