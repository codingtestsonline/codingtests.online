{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = { a: 1, b: 2, c: 3 };\nconsole.log(Object.keys(obj));",
      "options": {
        "A": "['a', 'b', 'c']",
        "B": "[1, 2, 3]",
        "C": "{ a: 1, b: 2, c: 3 }",
        "D": "['a: 1', 'b: 2', 'c: 3']"
      },
      "correct_answer": "A"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = { a: 1, b: 2, c: 3 };\nconsole.log(Object.values(obj));",
      "options": {
        "A": "['a', 'b', 'c']",
        "B": "[1, 2, 3]",
        "C": "{ 1: 'a', 2: 'b', 3: 'c' }",
        "D": "['a: 1', 'b: 2', 'c: 3']"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const obj1 = { a: 1, b: 2 };\nconst obj2 = { b: 3, c: 4 };\nconst merged = Object.assign({}, obj1, obj2);\nconsole.log(merged);",
      "options": {
        "A": "{ a: 1, b: 2, b: 3, c: 4 }",
        "B": "{ a: 1, b: 2, c: 4 }",
        "C": "{ a: 1, b: 3, c: 4 }",
        "D": "{ a: 1, b: [2, 3], c: 4 }"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What's the difference between `let` and `const` in JavaScript?",
      "options": {
        "A": "let is function-scoped, const is block-scoped",
        "B": "let cannot be reassigned, const can be reassigned",
        "C": "let is hoisted, const is not hoisted",
        "D": "let can be reassigned, const cannot be reassigned"
      },
      "correct_answer": "D"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let x = 10;\nlet y = '10';\nconsole.log(x == y);\nconsole.log(x === y);",
      "options": {
        "A": "true, true",
        "B": "false, false",
        "C": "true, false",
        "D": "false, true"
      },
      "correct_answer": "C"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const numbers = [1, 2, 3, 4, 5];\nconst [first, ...rest] = numbers;\nconsole.log(first);\nconsole.log(rest);",
      "options": {
        "A": "1, [1, 2, 3, 4, 5]",
        "B": "1, [2, 3, 4, 5]",
        "C": "[1], [2, 3, 4, 5]",
        "D": "1, 2, 3, 4, 5"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "Which statement accurately describes the correct way to create an array in JavaScript?",
      "options": {
        "A": "const arr = Array(1, 2, 3)",
        "B": "const arr = [1, 2, 3]",
        "C": "const arr = new Array[1, 2, 3]",
        "D": "All of the above are correct"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(typeof null);\nconsole.log(typeof undefined);\nconsole.log(typeof 'hello');\nconsole.log(typeof 123);",
      "options": {
        "A": "'null', 'undefined', 'string', 'number'",
        "B": "'object', 'undefined', 'string', 'number'",
        "C": "'null', 'object', 'string', 'number'",
        "D": "'object', 'object', 'string', 'number'"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What does the following code do?",
      "code_example": "function displayMessage(message) {\n  message = message || 'Default message';\n  console.log(message);\n}\n\ndisplayMessage('');",
      "options": {
        "A": "Displays an empty string",
        "B": "Displays 'Default message'",
        "C": "Throws an error",
        "D": "Displays 'undefined'"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What's the primary difference between CommonJS's require() and ES6's import?",
      "options": {
        "A": "require() is synchronous, import is asynchronous",
        "B": "require() works only in Node.js, import works only in browsers",
        "C": "require() loads the entire module, import allows selective loading",
        "D": "There is no difference, they are just different syntax"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "function sum() {\n  let total = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\n\nconsole.log(sum(1, 2, 3));",
      "options": {
        "A": "Error: arguments is not defined",
        "B": "6",
        "C": "[1, 2, 3]",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const condition = true;\nconst result = condition ? 'Yes' : 'No';\nconsole.log(result);",
      "options": {
        "A": "true",
        "B": "false",
        "C": "'Yes'",
        "D": "'No'"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What's a key difference between JavaScript in a browser and in Node.js?",
      "options": {
        "A": "Node.js doesn't support ES6 features",
        "B": "Browser JavaScript includes the DOM and window objects",
        "C": "Node.js can only run synchronous code",
        "D": "Browser JavaScript cannot access the file system"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const fruits = ['apple', 'banana', 'cherry'];\nfruits.forEach((fruit, index) => {\n  console.log(`${index}: ${fruit}`);\n});\n// What's logged to the console?",
      "options": {
        "A": "'0: apple', '1: banana', '2: cherry'",
        "B": "'apple', 'banana', 'cherry'",
        "C": "'apple: 0', 'banana: 1', 'cherry: 2'",
        "D": "['apple', 'banana', 'cherry']"
      },
      "correct_answer": "A"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "Which of the following is NOT a primitive type in JavaScript?",
      "options": {
        "A": "string",
        "B": "array",
        "C": "number",
        "D": "boolean"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = {\n  name: 'John',\n  greet: function() {\n    return `Hello, ${this.name}`;\n  }\n};\nconsole.log(obj.greet());",
      "options": {
        "A": "Hello, undefined",
        "B": "Hello, John",
        "C": "Hello, ${this.name}",
        "D": "Error: this.name is not defined"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function createCounter() {\n  let count = 0;\n  return function() {\n    return ++count;\n  };\n}\n\nconst counter1 = createCounter();\nconst counter2 = createCounter();\n\nconsole.log(counter1());\nconsole.log(counter1());\nconsole.log(counter2());",
      "options": {
        "A": "1, 2, 3",
        "B": "1, 2, 1",
        "C": "1, 1, 1",
        "D": "0, 0, 0"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "Which HTTP status code indicates a successful response?",
      "options": {
        "A": "404",
        "B": "500",
        "C": "200",
        "D": "403"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.greet = function() {\n  return `Hello, my name is ${this.name}`;\n};\n\nconst john = new Person('John');\nconsole.log(john.greet());",
      "options": {
        "A": "Error: greet is not a function",
        "B": "Hello, my name is John",
        "C": "Hello, my name is undefined",
        "D": "Hello, my name is ${this.name}"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "let value = null;\nlet defaultValue = 'default';\nlet result = value ?? defaultValue;\nconsole.log(result);",
      "options": {
        "A": "null",
        "B": "'default'",
        "C": "undefined",
        "D": "Error: Invalid syntax"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Success!');\n  }, 100);\n});\n\npromise.then(value => {\n  console.log(value);\n  return 'Next step';\n}).then(value => {\n  console.log(value);\n});",
      "options": {
        "A": "'Success!' 'Next step'",
        "B": "'Next step' 'Success!'",
        "C": "'Success!' only",
        "D": "Nothing is logged"
      },
      "correct_answer": "A"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "Which Helmet.js middleware helps protect against Cross-Site Scripting (XSS) attacks?",
      "options": {
        "A": "helmet.noCache()",
        "B": "helmet.xssFilter()",
        "C": "helmet.frameguard()",
        "D": "helmet.hsts()"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function applyOperation(a, b, operation) {\n  return operation(a, b);\n}\n\nconst add = (x, y) => x + y;\nconst multiply = (x, y) => x * y;\n\nconsole.log(applyOperation(3, 4, add));\nconsole.log(applyOperation(3, 4, multiply));",
      "options": {
        "A": "7, 12",
        "B": "7, 7",
        "C": "Error: operation is not a function",
        "D": "undefined, undefined"
      },
      "correct_answer": "A"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "Which approach helps prevent SQL injection in a Node.js application?",
      "options": {
        "A": "Using string concatenation to build SQL queries",
        "B": "Using parameterized queries or prepared statements",
        "C": "Storing SQL queries in environment variables",
        "D": "Using JavaScript eval() function"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const proto = {\n  greeting: 'Hello'\n};\n\nconst obj = Object.create(proto);\nobj.name = 'World';\n\nconsole.log(obj.greeting);\nconsole.log(obj.hasOwnProperty('greeting'));\nconsole.log(obj.hasOwnProperty('name'));",
      "options": {
        "A": "'Hello', true, true",
        "B": "'Hello', false, true",
        "C": "undefined, false, true",
        "D": "'Hello', true, false"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "In Express.js, what's the correct way to send a JSON response with a 201 status code?",
      "code_example": "// Express route handler",
      "options": {
        "A": "res.send(201, { success: true })",
        "B": "res.status(201).send({ success: true })",
        "C": "res.status(201).json({ success: true })",
        "D": "res.json(201, { success: true })"
      },
      "correct_answer": "C"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "Which is the best practice for API versioning in a RESTful API?",
      "options": {
        "A": "Including the version in the URL path (e.g., /api/v1/resources)",
        "B": "Using query parameters (e.g., /api/resources?version=1)",
        "C": "Using custom HTTP headers (e.g., API-Version: 1)",
        "D": "All are valid approaches with different trade-offs"
      },
      "correct_answer": "D"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const url = 'https://example.com/products/123?color=blue&size=medium';\nconst parsedUrl = new URL(url);\nconsole.log(parsedUrl.pathname);\nconsole.log(parsedUrl.searchParams.get('color'));",
      "options": {
        "A": "'/products/123', 'blue'",
        "B": "'/products/123?color=blue&size=medium', null",
        "C": "'/products/123', null",
        "D": "'products/123', 'blue'"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What is the purpose of the 'loading=\"lazy\"' attribute on image elements?",
      "options": {
        "A": "It improves image quality when loading on slow connections",
        "B": "It defers loading of images until they enter the viewport",
        "C": "It applies a lazy animation effect to images when loading",
        "D": "It reduces the resolution of images to load faster"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const person = {\n  name: {\n    first: 'John',\n    last: 'Doe'\n  },\n  age: 30,\n  hobbies: ['reading', 'coding']\n};\n\nconst { name: { first }, hobbies: [firstHobby] } = person;\nconsole.log(first);\nconsole.log(firstHobby);",
      "options": {
        "A": "'John', 'reading'",
        "B": "'John', ['reading', 'coding']",
        "C": "{ first: 'John', last: 'Doe' }, 'reading'",
        "D": "undefined, undefined"
      },
      "correct_answer": "A"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "Which HTTP status code would you use when a resource is temporarily unavailable?",
      "options": {
        "A": "404 Not Found",
        "B": "503 Service Unavailable",
        "C": "403 Forbidden",
        "D": "500 Internal Server Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\n// What does this code create?",
      "options": {
        "A": "A middleware function",
        "B": "A route handler for POST requests",
        "C": "A basic Express server with a single route",
        "D": "A database connection"
      },
      "correct_answer": "C"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the key difference between WeakMap and Map in JavaScript?",
      "options": {
        "A": "WeakMap allows any type of key, while Map only allows object keys",
        "B": "WeakMap keys are weakly referenced, allowing garbage collection if there's no other reference to the key",
        "C": "WeakMap has a size property, while Map doesn't",
        "D": "WeakMap entries can expire after a set time period"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "'WeakSet has size: undefined'",
        "B": "'WeakSet has size: 2'",
        "C": "TypeError: wset.size is not a function",
        "D": "TypeError: Cannot read property 'size' of undefined"
      },
      "correct_answer": "A",
      "code_example": "const obj1 = { name: 'Object 1' };\nconst obj2 = { name: 'Object 2' };\n\nconst wset = new WeakSet([obj1, obj2]);\nconsole.log(`WeakSet has size: ${wset.size}`);"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "In a docker-compose.yml file, which of the following correctly sets up a volume for a Node.js application?",
      "options": {
        "A": "volume: - ./app:/app",
        "B": "volumes: ./app:/app",
        "C": "volumes:\n  - ./app:/app",
        "D": "volumes: {\n  './app': '/app'\n}"
      },
      "correct_answer": "C"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "When deploying a Node.js application to Vercel, which of the following is NOT a valid configuration in vercel.json?",
      "options": {
        "A": "\"version\": 2",
        "B": "\"builds\": [{ \"src\": \"index.js\", \"use\": \"@vercel/node\" }]",
        "C": "\"routes\": [{ \"src\": \"/(.*)\", \"dest\": \"/index.js\" }]",
        "D": "\"scaling\": { \"minInstances\": 3, \"maxInstances\": 10 }"
      },
      "correct_answer": "D"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating hidden classes and inline caching in V8?",
      "options": {
        "A": "Points have the same hidden class: true",
        "B": "Points have the same hidden class: false",
        "C": "TypeError: Cannot determine hidden class",
        "D": "ReferenceError: %HaveSameMap is not defined"
      },
      "correct_answer": "B",
      "code_example": "// Note: This code would need the --allow-natives-syntax flag to run\n// For the purpose of this test, we're showing conceptual behavior\n\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nconst p1 = new Point(1, 2);\nconst p2 = new Point(3, 4);\n\n// Add property in different order\np1.z = 5;\np2.w = 6;\np2.z = 7;\n\n// For demonstration purposes only - showing what V8 would return\n// Actual code would fail without proper flags\nconst sameHiddenClass = %HaveSameMap(p1, p2);\nconsole.log(`Points have the same hidden class: ${sameHiddenClass}`);"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following Socket.io code when a client connects?",
      "options": {
        "A": "\"Client connected\" and \"Message received: Hello Server\"",
        "B": "\"Client connected\" only",
        "C": "\"Message received: Hello Server\" only",
        "D": "No output, as the code contains a syntax error"
      },
      "correct_answer": "A",
      "code_example": "// Server-side code\nconst server = require('http').createServer();\nconst io = require('socket.io')(server);\n\nio.on('connection', (socket) => {\n  console.log('Client connected');\n  \n  socket.on('message', (data) => {\n    console.log(`Message received: ${data}`);\n  });\n});\n\nserver.listen(3000);\n\n// Client-side code (would run in browser)\n// const socket = io('http://localhost:3000');\n// socket.emit('message', 'Hello Server');"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which of the following statements about how JavaScript allocates memory is INCORRECT?",
      "options": {
        "A": "JavaScript uses a garbage collector to automatically free memory that's no longer being used",
        "B": "V8's garbage collector uses a generational approach with young and old generations",
        "C": "Allocating memory in JavaScript requires manual malloc() and free() operations for efficiency",
        "D": "Memory leaks can still occur in JavaScript despite automatic garbage collection"
      },
      "correct_answer": "C"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "Which header in the following code is NOT correct for preventing CORS vulnerabilities?",
      "options": {
        "A": "Access-Control-Allow-Origin: https://trusted-site.com",
        "B": "Access-Control-Allow-Methods: GET, POST, OPTIONS",
        "C": "Access-Control-Allow-Headers: Content-Type, Authorization",
        "D": "Access-Control-Allow-All: true"
      },
      "correct_answer": "D",
      "code_example": "const express = require('express');\nconst app = express();\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', 'https://trusted-site.com');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  res.header('Access-Control-Allow-All', 'true');\n  next();\n});\n\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'Secure data' });\n});\n\napp.listen(3000);"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "In a GitHub Actions CI/CD workflow, which of the following is the correct syntax for specifying when the workflow should run?",
      "options": {
        "A": "trigger:\n  - push:\n      branches: [ main ]",
        "B": "on:\n  push:\n    branches: [ main ]",
        "C": "when:\n  event: [ push ]\n  branch: [ main ]",
        "D": "execute:\n  on: push\n  branch: main"
      },
      "correct_answer": "B"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of the following code for reading a large file with streams?",
      "options": {
        "A": "File processing started\nChunk received: [contents of first chunk]\nFile processing completed",
        "B": "File processing started\nChunk received: [entire file content]\nFile processing completed",
        "C": "File processing started\nFile processing completed",
        "D": "Error: Cannot read property 'on' of undefined"
      },
      "correct_answer": "A",
      "code_example": "const fs = require('fs');\n\nconsole.log('File processing started');\n\nconst readStream = fs.createReadStream('large-file.txt', { \n  encoding: 'utf8',\n  highWaterMark: 1024 * 64 // 64KB chunks\n});\n\nlet chunkCount = 0;\n\nreadStream.on('data', (chunk) => {\n  if (chunkCount === 0) {\n    console.log(`Chunk received: ${chunk.substring(0, 20)}...`);\n  }\n  chunkCount++;\n});\n\nreadStream.on('end', () => {\n  console.log('File processing completed');\n});\n\nreadStream.on('error', (error) => {\n  console.error(`Error: ${error.message}`);\n});"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What is the MOST secure way to store JWT secrets in a Node.js application?",
      "options": {
        "A": "Hardcoded in the application code as a constant",
        "B": "In a .env file with proper .gitignore configuration",
        "C": "Using environment variables managed by a secrets manager service",
        "D": "In a config.json file with restricted read permissions"
      },
      "correct_answer": "C"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be the output of the following code related to JIT compilation behavior?",
      "options": {
        "A": "cold: 546ms, warm: 18ms, optimized: 3ms",
        "B": "cold: 546ms, warm: 18ms, optimized: 18ms",
        "C": "cold: 546ms, warm: 546ms, optimized: 3ms",
        "D": "TypeError: Unable to measure JIT compilation"
      },
      "correct_answer": "A",
      "code_example": "function calculateFibonacci(n) {\n  if (n <= 1) return n;\n  return calculateFibonacci(n-1) + calculateFibonacci(n-2);\n}\n\n// First run - cold (interpreted)\nconst coldStart = performance.now();\ncalculateFibonacci(30);\nconst coldEnd = performance.now();\n\n// Second run - warm (partially compiled)\nconst warmStart = performance.now();\ncalculateFibonacci(30);\nconst warmEnd = performance.now();\n\n// Multiple runs to trigger optimization\nfor (let i = 0; i < 5; i++) {\n  calculateFibonacci(30);\n}\n\n// Final run - optimized\nconst optStart = performance.now();\ncalculateFibonacci(30);\nconst optEnd = performance.now();\n\nconsole.log(`cold: ${Math.round(coldEnd - coldStart)}ms, warm: ${Math.round(warmEnd - warmStart)}ms, optimized: ${Math.round(optEnd - optStart)}ms`);"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code handling real-time data with streams?",
      "options": {
        "A": "Original: [1,2,3,4,5]\nTransformed: [2,4,6,8,10]\nFiltered: [6,8,10]\nProcessed all data!",
        "B": "Original: 1,2,3,4,5\nTransformed: 2,4,6,8,10\nFiltered: 6,8,10\nProcessed all data!",
        "C": "Error: Cannot pipe to self",
        "D": "Processed all data!"
      },
      "correct_answer": "B",
      "code_example": "const { Transform, Readable, Writable } = require('stream');\n\n// Create source stream\nconst numbers = [1, 2, 3, 4, 5];\nconst sourceStream = Readable.from(numbers);\n\n// Create transform stream that doubles each number\nconst doubleTransform = new Transform({\n  objectMode: true,\n  transform(chunk, encoding, callback) {\n    callback(null, chunk * 2);\n  }\n});\n\n// Create filter transform stream\nconst filterTransform = new Transform({\n  objectMode: true,\n  transform(chunk, encoding, callback) {\n    if (chunk > 5) {\n      callback(null, chunk);\n    } else {\n      callback();\n    }\n  }\n});\n\n// Create custom writable streams for logging\nclass LoggingStream extends Writable {\n  constructor(label) {\n    super({ objectMode: true });\n    this.label = label;\n    this.chunks = [];\n  }\n  \n  _write(chunk, encoding, callback) {\n    this.chunks.push(chunk);\n    callback();\n  }\n  \n  _final(callback) {\n    console.log(`${this.label}: ${this.chunks}`);\n    callback();\n  }\n}\n\nconst originalLogger = new LoggingStream('Original');\nconst transformedLogger = new LoggingStream('Transformed');\nconst filteredLogger = new LoggingStream('Filtered');\n\n// Set up pipeline\nsourceStream.pipe(originalLogger);\nsourceStream\n  .pipe(doubleTransform)\n  .pipe(transformedLogger)\n  .pipe(filterTransform)\n  .pipe(filteredLogger)\n  .on('finish', () => {\n    console.log('Processed all data!');\n  });"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating a common memory leak pattern?",
      "options": {
        "A": "'Button clicked!' printed once when clicked, memory eventually released",
        "B": "'Button clicked!' printed once when clicked, memory leak occurs",
        "C": "'Button clicked!' printed multiple times when clicked, memory eventually released",
        "D": "'Button clicked!' printed multiple times when clicked, memory leak occurs"
      },
      "correct_answer": "D",
      "code_example": "// Browser environment code\nfunction setupButton() {\n  const data = new Array(1000000).fill('potential memory leak');\n  \n  function processClick() {\n    console.log('Button clicked!');\n    // Uses data array but doesn't clean it up\n    processData(data);\n  }\n  \n  function processData(dataArray) {\n    // Some processing using the large data array\n    return dataArray.length;\n  }\n  \n  // Adds new event listener each time function is called\n  document.getElementById('myButton').addEventListener('click', processClick);\n}\n\n// This function is called multiple times in the application\nsetupButton();\nsetupButton();\nsetupButton();\n\n// Later, button is removed from DOM but event handlers remain\ndocument.getElementById('myButton').remove();"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "When debugging a Node.js application with node --inspect, which of the following is NOT a valid way to interact with the debugger?",
      "options": {
        "A": "Opening chrome://inspect in Chrome browser",
        "B": "Using the 'Debugger' tab in VS Code",
        "C": "Connecting directly via telnet to port 9229",
        "D": "Using the built-in Node.js debug console with repl commands"
      },
      "correct_answer": "C"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code using express-rate-limit?",
      "options": {
        "A": "The server accepts the first 5 requests and sends 429 status responses for subsequent requests",
        "B": "The server rejects all requests and responds with 429 status",
        "C": "The server accepts all requests as the rate limiter is misconfigured",
        "D": "The server throws an error when more than 5 requests are received"
      },
      "correct_answer": "A",
      "code_example": "const express = require('express');\nconst rateLimit = require('express-rate-limit');\n\nconst app = express();\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 requests per window\n  standardHeaders: true, // Return rate limit info in headers\n  legacyHeaders: false, // Disable X-RateLimit-* headers\n  message: 'Too many requests, please try again after 15 minutes'\n});\n\n// Apply rate limiter to API routes\napp.use('/api/', apiLimiter);\n\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'API data response' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
    }
  ]
}
