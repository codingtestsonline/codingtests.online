{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const message = 'Hello';\nconst element = document.createElement('div');\nelement.textContent = message;\nconsole.log(element.textContent);",
      "options": {
        "A": "undefined",
        "B": "Hello",
        "C": "''",
        "D": "null"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which of the following is NOT a primitive type in JavaScript?",
      "code_example": "",
      "options": {
        "A": "string",
        "B": "array",
        "C": "symbol",
        "D": "bigint"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(parseInt('42px'));",
      "options": {
        "A": "42",
        "B": "NaN",
        "C": "'42px'",
        "D": "Error"
      },
      "correct_answer": "A"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What's the difference between a function declaration and a function expression?",
      "code_example": "",
      "options": {
        "A": "Function declarations are not hoisted, but function expressions are",
        "B": "Function declarations are hoisted, but function expressions are not",
        "C": "Function declarations cannot be anonymous, while function expressions must be anonymous",
        "D": "There is no difference, they are just different syntax"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code in a Node.js environment?",
      "code_example": "process.env.MY_VARIABLE = 'hello';\nconsole.log(process.env.MY_VARIABLE);",
      "options": {
        "A": "undefined",
        "B": "null",
        "C": "hello",
        "D": "Error: process is not defined"
      },
      "correct_answer": "C"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let sum = 0;\nfor (let i = 0; i < 5; i++) {\n  if (i === 3) continue;\n  sum += i;\n}\nconsole.log(sum);",
      "options": {
        "A": "10",
        "B": "7",
        "C": "6",
        "D": "15"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const person = {\n  name: 'John',\n  greet: function() {\n    return `Hello, ${this.name}`;\n  }\n};\nconsole.log(person.greet());",
      "options": {
        "A": "Hello, John",
        "B": "Hello, undefined",
        "C": "Hello, ${this.name}",
        "D": "Error"
      },
      "correct_answer": "A"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const arr = [1, 2, 3, 4];\narr.push(5);\narr.shift();\nconsole.log(arr);",
      "options": {
        "A": "[2, 3, 4, 5]",
        "B": "[1, 2, 3, 4, 5]",
        "C": "[1, 2, 3, 4]",
        "D": "[5, 1, 2, 3, 4]"
      },
      "correct_answer": "A"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const [a, , c] = [1, 2, 3, 4];\nconsole.log(a, c);",
      "options": {
        "A": "1 2",
        "B": "1 3",
        "C": "undefined undefined",
        "D": "Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which of the following is a valid way to create an empty object in JavaScript?",
      "code_example": "",
      "options": {
        "A": "const obj = {};",
        "B": "const obj = new Object();",
        "C": "Both A and B",
        "D": "None of the above"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(5 & 3);",
      "options": {
        "A": "8",
        "B": "2",
        "C": "1",
        "D": "15"
      },
      "correct_answer": "C"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const { name, age = 25 } = { name: 'Alice' };\nconsole.log(name, age);",
      "options": {
        "A": "Alice undefined",
        "B": "Alice 25",
        "C": "undefined undefined",
        "D": "Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "Which of the following is NOT a key difference between Node.js and browser JavaScript?",
      "code_example": "",
      "options": {
        "A": "Node.js has access to the file system via the 'fs' module",
        "B": "Browser JavaScript has the 'window' object",
        "C": "Node.js uses a different syntax for JavaScript",
        "D": "Node.js has a global 'process' object"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const isLoggedIn = false;\nconst message = isLoggedIn ? 'Welcome back!' : 'Please log in';\nconsole.log(message);",
      "options": {
        "A": "Welcome back!",
        "B": "Please log in",
        "C": "true",
        "D": "false"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What is the purpose of event.preventDefault() in JavaScript?",
      "code_example": "",
      "options": {
        "A": "To prevent event bubbling",
        "B": "To stop the propagation of an event",
        "C": "To prevent the default behavior associated with an event",
        "D": "To remove all event listeners"
      },
      "correct_answer": "C"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What's the difference between module.exports and export in Node.js?",
      "code_example": "",
      "options": {
        "A": "module.exports is used in CommonJS, while export is used in ES modules",
        "B": "They are exactly the same",
        "C": "module.exports is deprecated",
        "D": "export can only export functions, while module.exports can export any value"
      },
      "correct_answer": "A"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "In the context of the JavaScript Event Loop, which of the following is a microtask?",
      "code_example": "",
      "options": {
        "A": "setTimeout callback",
        "B": "setInterval callback",
        "C": "Promise.then callback",
        "D": "requestAnimationFrame callback"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const id1 = Symbol('id');\nconst id2 = Symbol('id');\nconsole.log(id1 === id2);",
      "options": {
        "A": "true",
        "B": "false",
        "C": "Error",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "In Node.js, what is the primary purpose of the compression middleware?",
      "code_example": "",
      "options": {
        "A": "To encrypt HTTP responses",
        "B": "To compress files before storing them",
        "C": "To compress HTTP responses before sending them to clients",
        "D": "To reduce the size of JavaScript files during runtime"
      },
      "correct_answer": "C"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const person = {\n  name: 'John',\n  greet: function() {\n    return `Hello, ${this.name}`;\n  },\n  greetArrow: () => {\n    return `Hi, ${this.name}`;\n  }\n};\nconsole.log(person.greetArrow());",
      "options": {
        "A": "Hi, John",
        "B": "Hi, undefined",
        "C": "Error",
        "D": "Hi, ${this.name}"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\nconst values = [1, 2, 3, 4];\nconsole.log(sum(...values));",
      "options": {
        "A": "10",
        "B": "[1, 2, 3, 4]",
        "C": "Error",
        "D": "0"
      },
      "correct_answer": "A"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "When working with large files in Node.js, which approach is most memory-efficient?",
      "code_example": "",
      "options": {
        "A": "Reading the entire file with fs.readFileSync",
        "B": "Using streams with fs.createReadStream",
        "C": "Using fs.readFile with a callback",
        "D": "Loading the file into a Buffer all at once"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "Which HTTP method is considered idempotent but not safe?",
      "code_example": "",
      "options": {
        "A": "GET",
        "B": "POST",
        "C": "PUT",
        "D": "OPTIONS"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function doSomething(callback) {\n  setTimeout(() => {\n    const result = 42;\n    callback(result);\n  }, 1000);\n}\n\ndoSomething(function(value) {\n  console.log(value);\n});\nconsole.log('Waiting...');",
      "options": {
        "A": "42 followed by 'Waiting...'",
        "B": "'Waiting...' followed by 42",
        "C": "Only 42",
        "D": "Only 'Waiting...'"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "In MongoDB with Mongoose, which of the following methods would you use to update a specific document and return the updated version?",
      "code_example": "",
      "options": {
        "A": "updateOne({ _id: id }, data)",
        "B": "findByIdAndUpdate(id, data)",
        "C": "findByIdAndUpdate(id, data, { new: true })",
        "D": "update({ _id: id }, data)"
      },
      "correct_answer": "C"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What is the best practice for API versioning in RESTful services?",
      "code_example": "",
      "options": {
        "A": "Include the version in the URL path (e.g., /api/v1/users)",
        "B": "Use query parameters (e.g., /api/users?version=1)",
        "C": "Use HTTP headers (e.g., Accept-Version: 1.0)",
        "D": "All of the above are acceptable approaches"
      },
      "correct_answer": "D"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function createCounter() {\n  let count = 0;\n  return function() {\n    return ++count;\n  };\n}\n\nconst counter1 = createCounter();\nconst counter2 = createCounter();\n\nconsole.log(counter1());\nconsole.log(counter1());\nconsole.log(counter2());",
      "options": {
        "A": "1, 2, 3",
        "B": "1, 2, 1",
        "C": "1, 1, 1",
        "D": "0, 1, 0"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "Which technique would you use to reduce redundant database queries in a Node.js/Express application?",
      "code_example": "",
      "options": {
        "A": "Implementing database indexing",
        "B": "Using caching mechanisms like Redis",
        "C": "Implementing connection pooling",
        "D": "Reducing the database size"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function factorial(n) {\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n}\n\nconsole.log(factorial(4));",
      "options": {
        "A": "4",
        "B": "12",
        "C": "24",
        "D": "Error: Maximum call stack size exceeded"
      },
      "correct_answer": "C"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What is the primary purpose of using Helmet.js in a Node.js/Express application?",
      "code_example": "",
      "options": {
        "A": "To provide authentication middleware",
        "B": "To compress HTTP responses",
        "C": "To set various HTTP security headers",
        "D": "To validate user input"
      },
      "correct_answer": "C"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const fs = require('fs');\n\ntry {\n  fs.writeFileSync('test.txt', 'Hello');\n  fs.appendFileSync('test.txt', ' World');\n  const content = fs.readFileSync('test.txt', 'utf8');\n  console.log(content);\n} catch (err) {\n  console.error(err);\n}",
      "options": {
        "A": "HelloWorld",
        "B": "World",
        "C": "Hello World",
        "D": "Error"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code in an Express.js application?",
      "code_example": "app.get('/api/user', (req, res) => {\n  const user = { name: 'John', age: 30 };\n  res.json(user);\n  res.send('User data');\n});",
      "options": {
        "A": "JSON response with user data, followed by 'User data'",
        "B": "Only 'User data' will be sent",
        "C": "Only the JSON response will be sent",
        "D": "Error: Cannot set headers after they are sent to the client"
      },
      "correct_answer": "D"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which Nginx configuration is correct for setting up a reverse proxy that forwards requests to a Node.js server running on localhost:3000?",
      "options": {
        "A": "server { listen 80; location / { proxy_http localhost:3000; } }",
        "B": "server { listen 80; location / { proxy_pass http://localhost:3000; } }",
        "C": "server { listen 80; location / { forward_to http://localhost:3000; } }",
        "D": "server { listen 80; location / { redirect http://localhost:3000; } }"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates handling an unhandled Promise rejection?",
      "options": {
        "A": "Promise rejected: Error occurred",
        "B": "Caught rejection: Error occurred",
        "C": "Unhandled promise rejection: Error occurred",
        "D": "UnhandledPromiseRejectionWarning: Error occurred"
      },
      "correct_answer": "C",
      "code_example": "process.on('unhandledRejection', (reason) => {\n  console.log('Unhandled promise rejection:', reason);\n});\n\nnew Promise((resolve, reject) => {\n  reject('Error occurred');\n});"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "When implementing security headers, which of the following combinations provides the best protection against clickjacking, MIME-type sniffing, and controlling referrer information?",
      "options": {
        "A": "X-Frame-Options: DENY; X-Content-Type-Options: nosniff; Referrer-Policy: no-referrer",
        "B": "X-Frame-Protection: SAMEORIGIN; X-Content-Type: secure; Referrer-Policy: origin",
        "C": "X-Frame-Options: ALLOW; X-Content-Type-Options: detect; Referrer-Policy: unsafe-url",
        "D": "X-Frame-Security: BLOCK; X-Content-Protection: enabled; Referrer: none"
      },
      "correct_answer": "A"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following Node.js code that demonstrates reading a large file with streams?",
      "options": {
        "A": "Total bytes read: 1024",
        "B": "Chunk received with size: [dynamic size]",
        "C": "File read completed",
        "D": "An error because highWaterMark is set incorrectly"
      },
      "correct_answer": "B",
      "code_example": "const fs = require('fs');\n\nconst readStream = fs.createReadStream('./large-file.txt', {\n  highWaterMark: 1024 // 1KB chunks\n});\n\nreadStream.on('data', (chunk) => {\n  console.log(`Chunk received with size: ${chunk.length}`);\n});\n\nreadStream.on('end', () => {\n  console.log('File read completed');\n});"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "Which V8 optimization technique is responsible for identifying frequently executed JavaScript functions and compiling them to optimized machine code?",
      "options": {
        "A": "Garbage Collection",
        "B": "Just-In-Time (JIT) Compilation",
        "C": "Hidden Class Optimization",
        "D": "Inline Caching"
      },
      "correct_answer": "B"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following Socket.io server code when a client connects and emits a 'message' event?",
      "options": {
        "A": "User connected: [socket.id]",
        "B": "User connected\nReceived message: Hello server",
        "C": "New connection established\nMessage from client: Hello server",
        "D": "Socket connection error: Handshake failed"
      },
      "correct_answer": "B",
      "code_example": "const http = require('http');\nconst server = http.createServer();\nconst io = require('socket.io')(server);\n\nio.on('connection', (socket) => {\n  console.log('User connected');\n  \n  socket.on('message', (msg) => {\n    console.log('Received message:', msg);\n  });\n});\n\nserver.listen(3000);\n\n// Client code (for reference, not part of the question):\n// const socket = io('http://localhost:3000');\n// socket.emit('message', 'Hello server');"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "When managing Docker containers in a Node.js application environment, which command correctly runs a container with a volume mounted from the host's current directory to /app in the container, exposing port 3000?",
      "options": {
        "A": "docker start -v $(pwd):/app -p 3000:3000 my-node-app",
        "B": "docker run -v $(pwd):/app -p 3000:3000 my-node-app",
        "C": "docker container -v ./:/app -p 3000:3000 my-node-app",
        "D": "docker execute -v $(pwd):/app -p 3000:3000 my-node-app"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates the Node.js cluster module for creating worker processes?",
      "options": {
        "A": "Master 12345 is running\nWorker 23456 started\nWorker 34567 started",
        "B": "Master process started\nWorker process started\nWorker process started",
        "C": "Primary 12345 is running\nWorker 23456 started\nWorker 34567 started",
        "D": "Error: Cannot call fork() from worker process"
      },
      "correct_answer": "A",
      "code_example": "const cluster = require('cluster');\nconst os = require('os');\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n  \n  // Fork workers based on CPU cores (limited to 2 for this example)\n  for (let i = 0; i < Math.min(2, os.cpus().length); i++) {\n    cluster.fork();\n  }\n  \n} else {\n  console.log(`Worker ${process.pid} started`);\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "In the context of scaling Node.js applications, which statement about Horizontal vs. Vertical Scaling is correct?",
      "options": {
        "A": "Vertical scaling requires load balancing, while horizontal scaling does not",
        "B": "Horizontal scaling has lower cost efficiency for handling sudden traffic spikes",
        "C": "Vertical scaling has no upper limit, while horizontal scaling is constrained by hardware",
        "D": "Horizontal scaling distributes load across multiple machines, while vertical scaling adds resources to a single machine"
      },
      "correct_answer": "D"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What is the correct YAML configuration for creating a basic Kubernetes pod that runs a Node.js application container with environment variables?",
      "options": {
        "A": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: nodejs-app\nspec:\n  containers:\n  - name: nodejs-container\n    image: nodejs-app:latest\n    env:\n    - name: DATABASE_URL\n      value: mongodb://db:27017",
        "B": "apiVersion: v1\nkind: Deployment\nmetadata:\n  name: nodejs-app\nspec:\n  containers:\n  - name: nodejs-container\n    image: nodejs-app:latest\n    environment:\n    - DATABASE_URL=mongodb://db:27017",
        "C": "apiVersion: v1\nkind: Container\nmetadata:\n  name: nodejs-app\nspec:\n  image: nodejs-app:latest\n  env:\n  - name: DATABASE_URL\n    value: mongodb://db:27017",
        "D": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: nodejs-app\ncontainers:\n- name: nodejs-container\n  image: nodejs-app:latest\n  env:\n  - name: DATABASE_URL\n    value: mongodb://db:27017"
      },
      "correct_answer": "A"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates a Cross-Site Scripting (XSS) vulnerability?",
      "options": {
        "A": "Hello, &lt;script&gt;alert('XSS');&lt;/script&gt;!",
        "B": "Hello, <script>alert('XSS');</script>!",
        "C": "Error: Potential XSS attack detected",
        "D": "Hello, [object Object]!"
      },
      "correct_answer": "B",
      "code_example": "const express = require('express');\nconst app = express();\n\napp.get('/greet', (req, res) => {\n  const name = req.query.name;\n  // Vulnerable code - directly inserting user input into HTML\n  res.send(`Hello, ${name}!`);\n});\n\napp.listen(3000);\n\n// Example request: GET /greet?name=<script>alert('XSS');</script>"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "When setting up a CI/CD pipeline for a Node.js application in GitHub Actions, which YAML configuration correctly defines a workflow that installs dependencies, runs tests, and deploys to production only on the main branch?",
      "options": {
        "A": "name: Node.js CI/CD\non:\n  push:\n    branches: [main]\njobs:\n  test-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - run: npm ci\n    - run: npm test\n    - if: github.ref == 'refs/heads/main'\n      run: npm run deploy",
        "B": "name: Node.js CI/CD\non:\n  branch: [main]\nsteps:\n  - checkout\n  - setup-node: '14'\n  - run: npm install\n  - run: npm test\n  - if: branch == 'main'\n    run: npm run deploy",
        "C": "name: Node.js CI/CD\nevents:\n  push:\n    branches: [main]\nactions:\n  - checkout@v2\n  - setup-node@v2: '14'\n  - command: npm ci\n  - command: npm test\n  - condition: branch === 'main'\n    command: npm run deploy",
        "D": "name: Node.js CI/CD\ntrigger:\n  - main\njobs:\n  test:\n    node: '14'\n    commands:\n      - npm ci\n      - npm test\n  deploy:\n    only: main\n    commands:\n      - npm run deploy"
      },
      "correct_answer": "A"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates Just-In-Time (JIT) compilation behavior in Node.js?",
      "options": {
        "A": "Fast function: ~1ms, Slow function: ~600ms",
        "B": "Fast function: ~1ms, Slow function: ~1ms (after optimization)",
        "C": "Fast function: ~10ms, Slow function: ~10ms",
        "D": "Error: Maximum call stack size exceeded"
      },
      "correct_answer": "A",
      "code_example": "function measure(fn, iterations = 1000000) {\n  const start = process.hrtime.bigint();\n  for (let i = 0; i < iterations; i++) {\n    fn(i);\n  }\n  const end = process.hrtime.bigint();\n  return Number(end - start) / 1000000; // Convert to ms\n}\n\n// Monomorphic function - easily optimized by V8\nfunction fastFunction(x) {\n  return x + 1;\n}\n\n// Polymorphic function - harder to optimize\nfunction slowFunction(x) {\n  if (x % 2 === 0) return x.toString();\n  return x + 1;\n}\n\nconst fastTime = measure(fastFunction);\nconst slowTime = measure(slowFunction);\n\nconsole.log(`Fast function: ~${Math.round(fastTime)}ms, Slow function: ~${Math.round(slowTime)}ms`);"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "When setting up log monitoring with Winston in a Node.js application, which code correctly configures Winston to log errors to a file and console with timestamps and log levels?",
      "options": {
        "A": "const winston = require('winston');\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.Console()\n  ]\n});",
        "B": "const winston = require('winston');\nconst logger = new winston.Logger({\n  level: 'info',\n  transports: [\n    new winston.FileTransport({ file: 'error.log', level: 'error' }),\n    new winston.ConsoleTransport()\n  ],\n  format: winston.formats.timestamp()\n});",
        "C": "const winston = require('winston');\nconst logger = winston.setup({\n  level: 'info',\n  format: winston.format.timestamp(),\n  outputs: [\n    { type: 'file', filename: 'error.log', level: 'error' },\n    { type: 'console' }\n  ]\n});",
        "D": "const winston = require('winston');\nconst logger = winston.configure({\n  level: 'info',\n  timestamp: true,\n  json: true,\n  transports: [\n    winston.transports.file({ name: 'error.log', level: 'error' }),\n    winston.transports.console()\n  ]\n});"
      },
      "correct_answer": "A"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates JWT refresh and access token implementation?",
      "options": {
        "A": "Access Token: [JWT string]\nRefresh Token: [JWT string]",
        "B": "Error: jwt.sign is not a function",
        "C": "New access token issued\nAccess Token: [JWT string]",
        "D": "Token refresh failed: Invalid refresh token"
      },
      "correct_answer": "C",
      "code_example": "const jwt = require('jsonwebtoken');\n\n// Secret keys\nconst accessTokenSecret = 'access-secret-key';\nconst refreshTokenSecret = 'refresh-secret-key';\n\n// Mock database of refresh tokens\nconst refreshTokens = ['valid-refresh-token-123'];\n\nfunction refreshAccessToken(refreshToken) {\n  if (!refreshTokens.includes(refreshToken)) {\n    console.log('Token refresh failed: Invalid refresh token');\n    return null;\n  }\n  \n  // Create a new access token\n  console.log('New access token issued');\n  const accessToken = jwt.sign({ username: 'user123' }, accessTokenSecret, { expiresIn: '15m' });\n  console.log(`Access Token: ${accessToken}`);\n  return accessToken;\n}\n\n// Simulate token refresh\nrefreshAccessToken('valid-refresh-token-123');"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "Which deployment platform configuration is correct for automatically scaling a Node.js application based on CPU usage?",
      "options": {
        "A": "Heroku: { \"formation\": { \"web\": { \"quantity\": 1, \"size\": \"standard-1x\", \"auto-scaling\": { \"min\": 1, \"max\": 5, \"cpu-percent\": 70 } } } }",
        "B": "DigitalOcean App Platform: { \"services\": [{ \"name\": \"web\", \"instance_count\": 1, \"instance_size_slug\": \"basic-xs\", \"autoscaling\": { \"min_instances\": 1, \"max_instances\": 5, \"cpu_threshold_pct\": 70 } }] }",
        "C": "Vercel: { \"functions\": { \"api/*.js\": { \"memory\": 1024, \"maxDuration\": 10, \"autoScale\": { \"minInstances\": 1, \"maxInstances\": 5, \"cpuThreshold\": 70 } } } }",
        "D": "AWS Elastic Beanstalk: { \"AWSConfigurationTemplateVersion\": \"1.1.0.0\", \"resources\": { \"AWSEBAutoScalingGroup\": { \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"Properties\": { \"MinSize\": 1, \"MaxSize\": 5 } }, \"AWSEBCloudwatchAlarmHigh\": { \"Properties\": { \"MetricName\": \"CPUUtilization\", \"Threshold\": 70 } } } }"
      },
      "correct_answer": "B"
    }
  ]
}
