{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let value = '5';\nlet result = +value + 10;\nconsole.log(typeof result);",
      "options": {
        "A": "'number'",
        "B": "'string'",
        "C": "'object'",
        "D": "'undefined'"
      },
      "correct_answer": "A"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which method is used to attach an event handler to an element?",
      "options": {
        "A": "element.attachEvent()",
        "B": "element.addEventListener()",
        "C": "element.addHandler()",
        "D": "element.eventListen()"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const person = { name: 'John', age: 30 };\nconst { name, job = 'Developer' } = person;\nconsole.log(job);",
      "options": {
        "A": "undefined",
        "B": "null",
        "C": "Developer",
        "D": "Error"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const arr = [1, 2, 3, 4, 5];\nconst [first, ...rest] = arr;\nconsole.log(rest);",
      "options": {
        "A": "[1]",
        "B": "[2, 3, 4, 5]",
        "C": "2",
        "D": "[1, 2, 3, 4, 5]"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let x = ['a', 'b'];\nlet y = x;\ny.push('c');\nconsole.log(x);",
      "options": {
        "A": "['a', 'b']",
        "B": "['a', 'b', 'c']",
        "C": "['c', 'a', 'b']",
        "D": "Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What is the correct way to create an empty object in JavaScript?",
      "options": {
        "A": "let obj = []",
        "B": "let obj = new Array()",
        "C": "let obj = {}",
        "D": "let obj = null"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "function sum() {\n  return Array.from(arguments).reduce((a, b) => a + b, 0);\n}\nconsole.log(sum(1, 2, 3));",
      "options": {
        "A": "Error",
        "B": "undefined",
        "C": "6",
        "D": "123"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "Which method selects the first element that matches a specified CSS selector?",
      "options": {
        "A": "document.getElement()",
        "B": "document.getElementById()",
        "C": "document.getElementsByClassName()",
        "D": "document.querySelector()"
      },
      "correct_answer": "D"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "Which Node.js module is used to work with the file system?",
      "options": {
        "A": "fs",
        "B": "http",
        "C": "path",
        "D": "file"
      },
      "correct_answer": "A"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const numbers = [10, 20, 30];\nnumbers[5] = 50;\nconsole.log(numbers.length);",
      "options": {
        "A": "3",
        "B": "4",
        "C": "5",
        "D": "6"
      },
      "correct_answer": "D"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log('5' == 5);",
      "options": {
        "A": "true",
        "B": "false",
        "C": "Error",
        "D": "undefined"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const numbers = [1, 4, 9, 16];\nconst result = numbers.map(Math.sqrt);\nconsole.log(result);",
      "options": {
        "A": "[1, 2, 3, 4]",
        "B": "[0, 2, 3, 4]",
        "C": "[1, 4, 9, 16]",
        "D": "Error"
      },
      "correct_answer": "A"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "(function() {\n  var x = 10;\n  console.log(x);\n})();",
      "options": {
        "A": "undefined",
        "B": "null",
        "C": "10",
        "D": "Error"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const user = { name: 'John', age: 30 };\nconst keys = Object.keys(user);\nconsole.log(keys);",
      "options": {
        "A": "['name', 'age']",
        "B": "['John', 30]",
        "C": "{name: 'John', age: 30}",
        "D": "Error"
      },
      "correct_answer": "A"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const greet = name => `Hello, ${name}!`;\nconsole.log(greet('World'));",
      "options": {
        "A": "Hello, World!",
        "B": "Hello, World",
        "C": "Hello World!",
        "D": "function"
      },
      "correct_answer": "A"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What is the result of the expression 2 ** 3?",
      "options": {
        "A": "6",
        "B": "5",
        "C": "8",
        "D": "9"
      },
      "correct_answer": "C"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function createCounter() {\n  let count = 0;\n  return function() {\n    return ++count;\n  };\n}\nconst counter = createCounter();\nconsole.log(counter());\nconsole.log(counter());",
      "options": {
        "A": "0, 1",
        "B": "1, 1",
        "C": "1, 2",
        "D": "undefined, undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "Which of the following is NOT a good practice for minimizing DOM reflows?",
      "options": {
        "A": "Batch DOM updates",
        "B": "Use document fragments",
        "C": "Update inline styles individually",
        "D": "Use CSS classes for style changes"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "Which of the following is NOT a part of a JWT token structure?",
      "options": {
        "A": "Header",
        "B": "Payload",
        "C": "Encryption",
        "D": "Signature"
      },
      "correct_answer": "C"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following Sequelize code?",
      "code_example": "// Assuming proper Sequelize setup\nconst user = await User.findOne({\n  where: { id: 1 },\n  attributes: ['name']\n});\nconsole.log(user);",
      "options": {
        "A": "The entire user object with all fields",
        "B": "Only the user's name as a string",
        "C": "A user object with only the name property",
        "D": "null"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = { name: 'John' };\nfunction greeting(message) {\n  console.log(`${message}, ${this.name}`);\n}\ngreeting.call(obj, 'Hello');",
      "options": {
        "A": "Hello, John",
        "B": "Hello, undefined",
        "C": "Error",
        "D": "Hello, [object Object]"
      },
      "correct_answer": "A"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "Which middleware is commonly used for input validation in Express.js applications?",
      "options": {
        "A": "body-parser",
        "B": "express-validator",
        "C": "express-sanitizer",
        "D": "express-check"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const user = {\n  name: 'John',\n  address: null\n};\nconsole.log(user.address?.street);",
      "options": {
        "A": "Error",
        "B": "null",
        "C": "undefined",
        "D": "false"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function greet(name = 'Guest', greeting = `Hello, ${name}!`) {\n  console.log(greeting);\n}\ngreet('John');",
      "options": {
        "A": "Hello, Guest!",
        "B": "Hello, John!",
        "C": "Hello, undefined!",
        "D": "Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const promise = new Promise((resolve, reject) => {\n  resolve('Success');\n  reject('Error');\n});\npromise.then(value => console.log(value));",
      "options": {
        "A": "Success",
        "B": "Error",
        "C": "Both Success and Error",
        "D": "undefined"
      },
      "correct_answer": "A"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "Which Node.js module is used for response compression in Express applications?",
      "options": {
        "A": "express-zip",
        "B": "compress",
        "C": "compression",
        "D": "express-compression"
      },
      "correct_answer": "C"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "Which code correctly demonstrates the use of Express Router for modular routes?",
      "code_example": "// Option A\nconst router = express.Router();\nrouter.get('/users', getUsers);\napp.use('/api', router);\n\n// Option B\nconst routes = express();\nroutes.get('/api/users', getUsers);\napp.connect(routes);\n\n// Option C\nconst router = new express.Route();\nrouter.create('/users', getUsers);\napp.use('/api', router);\n\n// Option D\nconst api = express.Routes();\napi.path('/users').method('GET', getUsers);\napp.register(api);",
      "options": {
        "A": "Option A",
        "B": "Option B",
        "C": "Option C",
        "D": "Option D"
      },
      "correct_answer": "A"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const id1 = Symbol('id');\nconst id2 = Symbol('id');\nconst obj = {};\nobj[id1] = 'value1';\nobj[id2] = 'value2';\nconsole.log(Object.keys(obj).length);",
      "options": {
        "A": "0",
        "B": "1",
        "C": "2",
        "D": "Error"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "Which HTTP method is idempotent but not safe according to HTTP specifications?",
      "options": {
        "A": "GET",
        "B": "POST",
        "C": "PUT",
        "D": "OPTIONS"
      },
      "correct_answer": "C"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following Express error handling code?",
      "code_example": "app.get('/user/:id', (req, res, next) => {\n  if (isNaN(req.params.id)) {\n    next(new Error('Invalid ID'));\n  } else {\n    res.send('Valid ID');\n  }\n});\n\napp.use((err, req, res, next) => {\n  res.status(400).send(err.message);\n});",
      "options": {
        "A": "Error is thrown and app crashes",
        "B": "'Invalid ID' with status 400",
        "C": "'Invalid ID' with status 500",
        "D": "No response is sent"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "Which HTTP status code indicates that the requested resource requires authentication?",
      "options": {
        "A": "400",
        "B": "401",
        "C": "403",
        "D": "404"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "let count = 0;\nconst interval = setInterval(() => {\n  count++;\n  console.log(count);\n  if (count === 3) {\n    clearInterval(interval);\n  }\n}, 100);\nconsole.log('Start');",
      "options": {
        "A": "Start, 1, 2, 3",
        "B": "1, 2, 3, Start",
        "C": "Start, 1, 2, 3, undefined",
        "D": "Start, 3"
      },
      "correct_answer": "A"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the primary reason for memory leaks related to closures in JavaScript?",
      "options": {
        "A": "Closures themselves inherently cause memory leaks",
        "B": "A closure keeps the entire variable scope in memory, not just the referenced variables",
        "C": "Circular references created by closures cannot be collected by garbage collection",
        "D": "When inner functions reference variables from outer functions, they prevent those variables from being garbage collected"
      },
      "correct_answer": "D",
      "code_example": "function createCounter() {\n  let count = 0;\n  let message = 'Counter initialized';\n  \n  return function() {\n    count++;\n    console.log(count);\n    // message is never used but remains in memory\n  };\n}\n\nconst counter = createCounter();\ncounter(); // 1\ncounter(); // 2"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "Which of the following correctly describes a use case for WeakMap that cannot be achieved with a regular Map?",
      "options": {
        "A": "Storing private data for objects without preventing garbage collection",
        "B": "Implementing a cache where entries are automatically removed when keys are no longer referenced",
        "C": "Creating a collection with better performance for frequent additions and deletions",
        "D": "Maintaining insertion order of elements for iteration"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates hidden class optimization in V8?",
      "options": {
        "A": "Optimization successful",
        "B": "Optimization failed",
        "C": "3 5",
        "D": "3 undefined"
      },
      "correct_answer": "C",
      "code_example": "// Creating objects with the same property order\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nconst p1 = new Point(1, 2);\nconst p2 = new Point(3, 5);\n\n// V8 can optimize access because they share the same hidden class\nconsole.log(p2.x, p2.y);"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which of the following best describes the Authorization Code with PKCE OAuth flow?",
      "options": {
        "A": "A flow designed for server-side applications that exchanges an authorization code for an access token without a client secret",
        "B": "A flow where the client directly receives the access token in the URL fragment after authentication",
        "C": "A flow that uses a code challenge and code verifier to protect against authorization code interception attacks",
        "D": "A simplified flow for mobile applications that bypasses the authorization server entirely"
      },
      "correct_answer": "C"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What happens when the following code executes?",
      "options": {
        "A": "It logs all lines from a large file without memory issues",
        "B": "It causes a memory overflow error for large files",
        "C": "It logs only the first chunk of data from the file",
        "D": "It produces a syntax error because the syntax is incorrect"
      },
      "correct_answer": "A",
      "code_example": "const fs = require('fs');\nconst readline = require('readline');\n\nconst readStream = fs.createReadStream('large-file.txt');\nconst rl = readline.createInterface({\n  input: readStream,\n  crlfDelay: Infinity\n});\n\nrl.on('line', (line) => {\n  console.log(`Line: ${line}`);\n});\n\nrl.on('close', () => {\n  console.log('File processing complete');\n});"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What is the key difference between how WeakSet and Set handle their elements?",
      "options": {
        "A": "WeakSet can only store objects, while Set can store any value type",
        "B": "WeakSet maintains weak references to its elements allowing them to be garbage collected if no other references exist",
        "C": "WeakSet is not iterable and doesn't have methods like forEach, keys, or values",
        "D": "All of the above"
      },
      "correct_answer": "D"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be the output of this code demonstrating memory allocation in JavaScript?",
      "options": {
        "A": "{ rss: ~30MB, heapTotal: ~4MB, heapUsed: ~2MB }",
        "B": "{ rss: ~4MB, heapTotal: ~4MB, heapUsed: ~2MB }",
        "C": "{ rss: ~8MB, heapTotal: ~8MB, heapUsed: ~4MB }",
        "D": "The memory usage keeps increasing indefinitely causing a crash"
      },
      "correct_answer": "A",
      "code_example": "const memoryBefore = process.memoryUsage();\n\n// Create a large array (about 1MB)\nconst arr = new Array(1e5).fill('X').map((_, i) => ({ id: i, data: 'Some data string' }));\n\n// Create and discard many small objects - these will get garbage collected\nfor (let i = 0; i < 1e5; i++) {\n  const obj = { temp: i };\n  // obj goes out of scope immediately\n}\n\nconst memoryAfter = process.memoryUsage();\nconsole.log({\n  rss: `~${Math.round(memoryAfter.rss / (1024 * 1024))}MB`,\n  heapTotal: `~${Math.round(memoryAfter.heapTotal / (1024 * 1024))}MB`,\n  heapUsed: `~${Math.round(memoryAfter.heapUsed / (1024 * 1024))}MB`\n});"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "Which of the following best describes the role of Just-In-Time (JIT) compilation in JavaScript engines?",
      "options": {
        "A": "It pre-compiles all JavaScript code to machine code before execution",
        "B": "It dynamically compiles frequently executed code paths to optimized machine code during runtime",
        "C": "It interprets JavaScript code directly without any compilation steps",
        "D": "It enforces strict type checking similar to TypeScript during runtime"
      },
      "correct_answer": "B"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will the following code using a Transform stream output?",
      "options": {
        "A": "['one', 'two', 'three']",
        "B": "['ONE', 'TWO', 'THREE']",
        "C": "ONE\\nTWO\\nTHREE",
        "D": "one\\ntwo\\nthree"
      },
      "correct_answer": "B",
      "code_example": "const { Transform } = require('stream');\n\nclass UppercaseTransform extends Transform {\n  constructor(options) {\n    super(options);\n  }\n  \n  _transform(chunk, encoding, callback) {\n    const upperChunk = chunk.toString().toUpperCase();\n    this.push(upperChunk);\n    callback();\n  }\n}\n\nconst upperCaseTransform = new UppercaseTransform();\nconst inputData = ['one', 'two', 'three'];\nconst outputData = [];\n\nupperCaseTransform.on('data', (chunk) => {\n  outputData.push(chunk.toString());\n});\n\nupperCaseTransform.on('end', () => {\n  console.log(outputData);\n});\n\ninputData.forEach(item => {\n  upperCaseTransform.write(item);\n});\n\nupperCaseTransform.end();"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What is the primary benefit of using Content Security Policy (CSP) headers with Helmet.js?",
      "options": {
        "A": "It improves application performance by caching security policies",
        "B": "It prevents unauthorized access to database resources",
        "C": "It mitigates Cross-Site Scripting (XSS) attacks by restricting which resources can be loaded",
        "D": "It provides authentication services similar to OAuth"
      },
      "correct_answer": "C"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of this code demonstrating memory management with event listeners?",
      "options": {
        "A": "Button clicked, Event listener removed",
        "B": "Button clicked, Button clicked, Button clicked (infinitely)",
        "C": "Button clicked",
        "D": "Nothing, as there is no memory leak to demonstrate"
      },
      "correct_answer": "C",
      "code_example": "function setupButton() {\n  const button = document.createElement('button');\n  button.textContent = 'Click me';\n  document.body.appendChild(button);\n  \n  function handleClick() {\n    console.log('Button clicked');\n    // Remove event listener to prevent memory leaks\n    button.removeEventListener('click', handleClick);\n    document.body.removeChild(button);\n  }\n  \n  button.addEventListener('click', handleClick);\n  \n  // Simulate a click\n  button.click();\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What is the key difference between GraphQL and REST when handling related data?",
      "options": {
        "A": "GraphQL requires more server processing power than REST",
        "B": "REST automatically includes related data in responses",
        "C": "GraphQL allows clients to specify exactly what data they need in a single request",
        "D": "REST has better built-in caching mechanisms than GraphQL"
      },
      "correct_answer": "C"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will the following code using rate limiting output when called in rapid succession 6 times?",
      "options": {
        "A": "It will process all 6 requests without any rate limiting",
        "B": "It will process the first 5 requests and reject the 6th with a 429 Too Many Requests error",
        "C": "It will reject all 6 requests with a 429 Too Many Requests error",
        "D": "It will queue the 6th request until the rate limit window resets"
      },
      "correct_answer": "B",
      "code_example": "const express = require('express');\nconst rateLimit = require('express-rate-limit');\n\nconst app = express();\n\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\n  legacyHeaders: false, // Disable the `X-RateLimit-*` headers\n  message: 'Too many requests, please try again after 15 minutes'\n});\n\n// Apply the rate limiting middleware to API calls only\napp.use('/api', apiLimiter);\n\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'Data retrieved successfully' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which of the following best describes Cross-Site Request Forgery (CSRF) attacks?",
      "options": {
        "A": "Attacks where malicious code is injected into a web page and executed in users' browsers",
        "B": "Attacks where an attacker intercepts and modifies data transmitted between a client and server",
        "C": "Attacks where legitimate users are tricked into submitting requests to a website where they're authenticated without their knowledge",
        "D": "Attacks where an attacker gains unauthorized access to a database by manipulating SQL queries"
      },
      "correct_answer": "C"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will the following code using WeakMap for memory-sensitive caching output?",
      "options": {
        "A": "Result cached, Result cached",
        "B": "Result cached, Result calculated",
        "C": "Result calculated, Result calculated",
        "D": "Result calculated, Result cached"
      },
      "correct_answer": "D",
      "code_example": "// Memory-sensitive caching using WeakMap\nconst cache = new WeakMap();\n\nfunction expensiveOperation(obj) {\n  if (cache.has(obj)) {\n    console.log('Result cached');\n    return cache.get(obj);\n  }\n  \n  console.log('Result calculated');\n  const result = obj.value * 2; // Simulate expensive computation\n  \n  // Store in cache\n  cache.set(obj, result);\n  \n  return result;\n}\n\nconst objKey = { value: 42 };\n\n// First call - should calculate\nexpensiveOperation(objKey);\n\n// Second call with same key - should use cache\nexpensiveOperation(objKey);"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What is the most effective way to manage container networking in a Node.js microservices architecture?",
      "options": {
        "A": "Use host networking mode for all containers to ensure maximum performance",
        "B": "Create a bridge network for containers to communicate while maintaining isolation",
        "C": "Use overlay networks for multi-host deployment environments with service discovery",
        "D": "Avoid networks completely and use only environment variables for service communication"
      },
      "correct_answer": "C"
    }
  ]
}
