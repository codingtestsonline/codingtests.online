{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let x = 5;\nx += 3;\nconsole.log(x);",
      "options": {
        "A": "5",
        "B": "8",
        "C": "15",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(parseInt('42px'));",
      "options": {
        "A": "42",
        "B": "NaN",
        "C": "'42px'",
        "D": "Error"
      },
      "correct_answer": "A"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What is the result of the following operation?",
      "code_example": "console.log(2 ** 3);",
      "options": {
        "A": "5",
        "B": "6",
        "C": "8",
        "D": "9"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "Which statement about require() vs import() is correct?",
      "options": {
        "A": "require() is part of ES6, while import() is part of CommonJS",
        "B": "require() is synchronous, while import() is asynchronous",
        "C": "require() can be called anywhere, while import() must be at the top of the file",
        "D": "require() automatically hoists modules, while import() does not"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log('5' === 5);",
      "options": {
        "A": "true",
        "B": "false",
        "C": "TypeError",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "How would you access the 'PORT' environment variable in a Node.js application?",
      "options": {
        "A": "process.PORT",
        "B": "env.PORT",
        "C": "process.env.PORT",
        "D": "PORT"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "function test() {\n  var a = 1;\n  let b = 2;\n  if (true) {\n    var a = 3;\n    let b = 4;\n  }\n  console.log(a, b);\n}\ntest();",
      "options": {
        "A": "1 2",
        "B": "3 2",
        "C": "3 4",
        "D": "1 4"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What is the correct way to add a click event listener to a button with id 'myButton'?",
      "options": {
        "A": "document.getElementById('myButton').addEventListener('click', function() {});",
        "B": "document.getElementById('myButton').click(function() {});",
        "C": "document.getElementById('myButton').on('click', function() {});",
        "D": "document.getElementById('myButton').eventListener('click', function() {});"
      },
      "correct_answer": "A"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const arr = [1, 2, 3];\nconst obj = { a: 1 };\nconsole.log(typeof arr, typeof obj);",
      "options": {
        "A": "array object",
        "B": "object object",
        "C": "array array",
        "D": "object array"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which is the correct way to export a function from a module in Node.js CommonJS?",
      "options": {
        "A": "export default function myFunction() {}",
        "B": "export function myFunction() {}",
        "C": "module.exports = function myFunction() {}",
        "D": "exports = function myFunction() {}"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "if (true) {\n  var x = 10;\n  let y = 20;\n  const z = 30;\n}\nconsole.log(x);\nconsole.log(typeof y);",
      "options": {
        "A": "10 undefined",
        "B": "10 ReferenceError",
        "C": "undefined undefined",
        "D": "ReferenceError"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "async function test() {\n  return 'hello';\n}\nconst result = test();\nconsole.log(result);",
      "options": {
        "A": "hello",
        "B": "Promise { 'hello' }",
        "C": "Promise { <pending> }",
        "D": "undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const arr = [1, 2, 3, 4, 5];\narr[10] = 10;\nconsole.log(arr.length);",
      "options": {
        "A": "5",
        "B": "6",
        "C": "10",
        "D": "11"
      },
      "correct_answer": "D"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let sum = 0;\nconst numbers = [1, 2, 3, 4];\nnumbers.forEach(num => {\n  if (num % 2 === 0) {\n    sum += num;\n  }\n});\nconsole.log(sum);",
      "options": {
        "A": "0",
        "B": "6",
        "C": "10",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "Which statement about let, const, and var is NOT correct?",
      "options": {
        "A": "let and const have block scope",
        "B": "var has function scope",
        "C": "const variables cannot be reassigned",
        "D": "let variables cannot be redeclared in the same scope"
      },
      "correct_answer": "C"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What is the minimum code required to create a basic HTTP server in Node.js that responds with 'Hello World'?",
      "options": {
        "A": "const server = require('server').createServer((req, res) => { res.end('Hello World'); }); server.listen(3000);",
        "B": "const http = require('http'); http.createServer((req, res) => { res.end('Hello World'); }).listen(3000);",
        "C": "const express = require('express'); express().get('/', (req, res) => { res.send('Hello World'); }).listen(3000);",
        "D": "const http = require('http'); const server = new http.Server(); server.on('request', (req, res) => { res.end('Hello World'); }); server.listen(3000);"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code demonstrating callback hell?",
      "code_example": "function getData(callback) {\n  setTimeout(() => {\n    callback(1);\n  }, 100);\n}\n\ngetData(function(x) {\n  console.log(x);\n  getData(function(y) {\n    console.log(x + y);\n    getData(function(z) {\n      console.log(x + y + z);\n    });\n  });\n});",
      "options": {
        "A": "1 2 3",
        "B": "1 2 6",
        "C": "1 3 6",
        "D": "3 6 9"
      },
      "correct_answer": "A"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "When implementing a caching strategy using Node-cache, which of the following is NOT a benefit?",
      "options": {
        "A": "Reduced database load",
        "B": "Faster response times",
        "C": "Automatic database synchronization",
        "D": "Memory-efficient storage of frequently accessed data"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What is the correct way to define modular routes using Express Router?",
      "code_example": "// users.js\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n  res.send('Users list');\n});\n\nmodule.exports = router;\n\n// app.js\nconst express = require('express');\nconst usersRouter = require('./users');\nconst app = express();\n\n// How should the router be used?",
      "options": {
        "A": "app.use(usersRouter);",
        "B": "app.use('/users', usersRouter);",
        "C": "app.router('/users', usersRouter);",
        "D": "app.get('/users', usersRouter);"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code using streams?",
      "code_example": "const { Readable } = require('stream');\n\nconst readableStream = new Readable({\n  read() {}\n});\n\nreadableStream.push('Hello');\nreadableStream.push(' World');\nreadableStream.push(null);\n\nlet data = '';\nreadableStream.on('data', (chunk) => {\n  data += chunk;\n});\n\nreadableStream.on('end', () => {\n  console.log(data);\n});",
      "options": {
        "A": "Hello",
        "B": "World",
        "C": "Hello World",
        "D": "HelloWorld"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the order of console.log outputs in the following code?",
      "code_example": "console.log('Start');\n\nsetTimeout(() => {\n  console.log('Timeout');\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log('Promise');\n});\n\nconsole.log('End');",
      "options": {
        "A": "Start, End, Timeout, Promise",
        "B": "Start, End, Promise, Timeout",
        "C": "Start, Promise, End, Timeout",
        "D": "Start, Timeout, Promise, End"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "In the context of the JavaScript Event Loop, which of the following is NOT a microtask?",
      "options": {
        "A": "Promise callbacks",
        "B": "process.nextTick callbacks",
        "C": "setTimeout callbacks",
        "D": "queueMicrotask callbacks"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "When using multer for file uploads in Express, what does the following code do?",
      "code_example": "const multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/profile', upload.single('avatar'), (req, res) => {\n  console.log(req.file);\n  res.send('Uploaded');\n});",
      "options": {
        "A": "Accepts multiple file uploads with field name 'avatar'",
        "B": "Accepts a single file upload with field name 'avatar'",
        "C": "Accepts any file upload and names it 'avatar'",
        "D": "Renames all uploaded files to 'avatar'"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code using default parameters?",
      "code_example": "function multiply(a, b = 1) {\n  return a * b;\n}\n\nconsole.log(multiply(5));\nconsole.log(multiply(5, undefined));\nconsole.log(multiply(5, null));\nconsole.log(multiply(5, 2));",
      "options": {
        "A": "5 5 0 10",
        "B": "5 5 5 10",
        "C": "5 1 0 10",
        "D": "NaN NaN 0 10"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code demonstrating function composition?",
      "code_example": "const add5 = x => x + 5;\nconst multiply2 = x => x * 2;\nconst subtract3 = x => x - 3;\n\nconst compose = (...fns) => x => fns.reduceRight((acc, fn) => fn(acc), x);\nconst pipeline = compose(subtract3, multiply2, add5);\n\nconsole.log(pipeline(10));",
      "options": {
        "A": "17",
        "B": "27",
        "C": "30",
        "D": "22"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "Which of the following is a pure function?",
      "code_example": "// A\nfunction addToArray(arr, item) {\n  arr.push(item);\n  return arr;\n}\n\n// B\nfunction addToArray(arr, item) {\n  return [...arr, item];\n}\n\n// C\nlet counter = 0;\nfunction increment() {\n  counter++;\n  return counter;\n}\n\n// D\nfunction multiply(a, b) {\n  return a * b * Math.random();\n}",
      "options": {
        "A": "A",
        "B": "B",
        "C": "C",
        "D": "D"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code implementing debounce?",
      "code_example": "function debounce(func, wait) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n\nlet counter = 0;\nconst debouncedIncrement = debounce(() => {\n  counter++;\n  console.log(counter);\n}, 100);\n\ndebouncedIncrement();\ndebouncedIncrement();\ndebouncedIncrement();\n\n// After 200ms\n// What would be logged?",
      "options": {
        "A": "0",
        "B": "1",
        "C": "3",
        "D": "Nothing would be logged"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "Which of the following is NOT a common cause of memory leaks in Node.js applications?",
      "options": {
        "A": "Unmanaged event listeners",
        "B": "Closures holding references to large objects",
        "C": "Using async/await",
        "D": "Circular references in objects"
      },
      "correct_answer": "C"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What is the correct way to implement error handling middleware in Express?",
      "code_example": "const express = require('express');\nconst app = express();\n\napp.get('/data', (req, res) => {\n  throw new Error('Something went wrong');\n});\n\n// Which middleware correctly catches the above error?",
      "options": {
        "A": "app.use(function(err, req, res, next) { res.status(500).send(err.message); });",
        "B": "app.use(function(req, res, err, next) { res.status(500).send(err.message); });",
        "C": "app.use('/data', function(err, req, res, next) { res.status(500).send(err.message); });",
        "D": "app.catch(function(err, req, res, next) { res.status(500).send(err.message); });"
      },
      "correct_answer": "A"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code demonstrating prototype chain?",
      "code_example": "function Vehicle() {\n  this.wheels = 4;\n}\n\nVehicle.prototype.start = function() {\n  return 'Vehicle started';\n};\n\nfunction Car() {}\nCar.prototype = Object.create(Vehicle.prototype);\nCar.prototype.constructor = Car;\n\nconst myCar = new Car();\nconsole.log(myCar.wheels, myCar.start());",
      "options": {
        "A": "4 'Vehicle started'",
        "B": "undefined 'Vehicle started'",
        "C": "4 undefined",
        "D": "undefined undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "Which of the following is NOT a recommended way to prevent NoSQL injection in MongoDB?",
      "options": {
        "A": "Using schema validation with Mongoose",
        "B": "Sanitizing user input with sanitize-html",
        "C": "Using parameterized queries",
        "D": "Storing user input as JSON strings"
      },
      "correct_answer": "D"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code using Sequelize?",
      "code_example": "const { Sequelize, DataTypes } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory:');\n\nconst User = sequelize.define('User', {\n  username: DataTypes.STRING,\n  birthday: DataTypes.DATE\n});\n\n(async () => {\n  await sequelize.sync({ force: true });\n  const jane = await User.create({\n    username: 'janedoe',\n    birthday: new Date(1980, 6, 20)\n  });\n  \n  console.log(jane instanceof User);\n  console.log(jane.username);\n})();",
      "options": {
        "A": "false undefined",
        "B": "true 'janedoe'",
        "C": "true undefined",
        "D": "false 'janedoe'"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "code_example": "const map = new Map([[1, 'one'], [2, 'two']]);\nconst weakMap = new WeakMap();\n\nweakMap.set({key: 1}, 'value');\n\nconsole.log(map.size, Object.keys(weakMap).length);",
      "options": {
        "A": "2, 1",
        "B": "2, 0",
        "C": "0, 0",
        "D": "undefined, undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "Which statement about WeakMap and WeakSet compared to Map and Set is incorrect?",
      "options": {
        "A": "WeakMap and WeakSet allow their keys to be garbage collected if there are no other references to them",
        "B": "WeakMap and WeakSet are iterable collections with methods like forEach and size property",
        "C": "WeakMap only accepts objects as keys while Map accepts primitive values as well",
        "D": "WeakSet can only contain object references, not primitive values"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code related to unhandled promise rejections?",
      "code_example": "process.on('unhandledRejection', (reason, promise) => {\n  console.log('Caught rejection:', reason);\n});\n\nconst promise1 = Promise.reject('First rejection');\n\nconst promise2 = new Promise((resolve, reject) => {\n  reject('Second rejection');\n});\n\npromise2.catch(err => {\n  console.log('Handled in catch:', err);\n});\n\nconsole.log('Main code executed');",
      "options": {
        "A": "Main code executed\\nCaught rejection: First rejection",
        "B": "Main code executed\\nHandled in catch: Second rejection\\nCaught rejection: First rejection",
        "C": "Main code executed\\nCaught rejection: First rejection\\nHandled in catch: Second rejection",
        "D": "Caught rejection: First rejection\\nHandled in catch: Second rejection\\nMain code executed"
      },
      "correct_answer": "A"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following EventEmitter code?",
      "code_example": "const EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\n\nmyEmitter.once('event', () => {\n  console.log('once listener called');\n});\n\nmyEmitter.on('event', () => {\n  console.log('on listener called');\n});\n\nconsole.log(myEmitter.listenerCount('event'));\nmyEmitter.emit('event');\nconsole.log(myEmitter.listenerCount('event'));\nmyEmitter.emit('event');",
      "options": {
        "A": "1\\nonce listener called\\non listener called\\n1\\non listener called",
        "B": "2\\non listener called\\nonce listener called\\n1\\non listener called",
        "C": "2\\nonce listener called\\non listener called\\n1\\non listener called",
        "D": "2\\non listener called\\nonce listener called\\n0"
      },
      "correct_answer": "C"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "Which of the following is NOT a valid approach to prevent memory leaks when working with event listeners in Node.js?",
      "options": {
        "A": "Set a maximum number of listeners using emitter.setMaxListeners(n)",
        "B": "Remove all listeners for an event using emitter.removeAllListeners([event])",
        "C": "Use once() instead of on() for one-time events",
        "D": "Store listener functions in WeakMap to allow automatic garbage collection"
      },
      "correct_answer": "D"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates memory usage with closures?",
      "code_example": "function createLargeArray() {\n  return new Array(1000000).fill('x');\n}\n\nfunction potentialLeak() {\n  const largeArray = createLargeArray();\n  \n  return function() {\n    // Accessing only the length, not the array itself\n    console.log('Array length was:', largeArray.length);\n  };\n}\n\nconst getLength = potentialLeak();\n\n// Will the array be garbage collected?\nconsole.log('Is largeArray still in memory? ' + (getLength.toString().includes('largeArray') ? 'Yes' : 'No'));",
      "options": {
        "A": "Is largeArray still in memory? No",
        "B": "Is largeArray still in memory? Yes",
        "C": "ReferenceError: largeArray is not defined",
        "D": "TypeError: Cannot read property 'toString' of undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "When implementing a Dockerfile for a Node.js application, which of the following approaches is NOT recommended for security and performance?",
      "options": {
        "A": "Using multi-stage builds to reduce final image size",
        "B": "Running the application as a non-root user",
        "C": "Setting NODE_ENV=production to optimize performance",
        "D": "Using the 'latest' tag for the Node.js base image"
      },
      "correct_answer": "D"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What is the output of the following code using streams to process data?",
      "code_example": "const { Readable, Transform, Writable } = require('stream');\n\n// Create a source stream with numbers 1-3\nconst source = Readable.from([1, 2, 3]);\n\n// Transform stream to double the values\nconst doubler = new Transform({\n  objectMode: true,\n  transform(chunk, encoding, callback) {\n    callback(null, chunk * 2);\n  }\n});\n\n// Writable stream to collect results\nlet result = [];\nconst collector = new Writable({\n  objectMode: true,\n  write(chunk, encoding, callback) {\n    result.push(chunk);\n    callback();\n  }\n});\n\n// Pipeline the streams\nsource.pipe(doubler).pipe(collector);\n\n// When finished, log the result\ncollector.on('finish', () => {\n  console.log(result.toString());\n});",
      "options": {
        "A": "[2,4,6]",
        "B": "2,4,6",
        "C": "246",
        "D": "123"
      },
      "correct_answer": "B"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "Which of these statements about securing JWT secrets in a Node.js application is FALSE?",
      "options": {
        "A": "JWT secrets should be stored in environment variables rather than in code",
        "B": "Using asymmetric key pairs (private/public) is more secure than symmetric secrets for signing JWTs",
        "C": "Rotating JWT secrets regularly is a security best practice",
        "D": "Storing JWT secrets in a .env file committed to version control is secure as long as the repository is private"
      },
      "correct_answer": "D"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be logged after executing the following code that demonstrates load balancing with PM2?",
      "code_example": "// index.js\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n  \n  // Fork workers equal to CPU count\n  for (let i = 0; i < numCPUs; i++) {\n    const worker = cluster.fork();\n    \n    // Listen for messages from worker\n    worker.on('message', message => {\n      if (message.cmd && message.cmd === 'NOTIFYMASTER') {\n        console.log(`Worker ${message.pid} notified master`);\n      }\n    });\n  }\n  \n  console.log(`Forked ${numCPUs} workers`);\n} else {\n  // Workers share the TCP connection\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end(`Worker ${process.pid} handled request\\n`);\n    \n    // Notify master about handling the request\n    process.send({ cmd: 'NOTIFYMASTER', pid: process.pid });\n  }).listen(8000);\n  \n  console.log(`Worker ${process.pid} started`);\n}\n\n// We're specifically tracking what happens after starting (not receiving requests)\n// What's the correct startup output sequence if we have 2 CPUs?",
      "options": {
        "A": "Master [pid] is running\\nForked 2 workers\\nWorker [pid1] started\\nWorker [pid2] started",
        "B": "Master [pid] is running\\nWorker [pid1] started\\nWorker [pid2] started\\nForked 2 workers",
        "C": "Master [pid] is running\\nForked 2 workers\\nWorker [pid1] notified master\\nWorker [pid2] notified master",
        "D": "Worker [pid1] started\\nWorker [pid2] started\\nMaster [pid] is running\\nForked 2 workers"
      },
      "correct_answer": "A"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "Which configuration in a Kubernetes pod manifest is NOT valid for running a Node.js application?",
      "options": {
        "A": "resources.limits.memory: \"512Mi\"",
        "B": "resources.requests.cpu: \"250m\"",
        "C": "env.NODE_ENV: production",
        "D": "livenessProbe.httpGet.path: \"/health\""
      },
      "correct_answer": "C"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What's the output of the following winston logger configuration?",
      "code_example": "const winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\n// Add console transport only in development\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\nprocess.env.NODE_ENV = 'development';\n\nlogger.error('This is an error message');\nlogger.warn('This is a warning message');\nlogger.info('This is an info message');\nlogger.debug('This is a debug message');\n\n// What will be logged to the console?",
      "options": {
        "A": "All messages: error, warning, info, and debug",
        "B": "Error, warning, and info messages only",
        "C": "Error message only",
        "D": "No console output, only file logging"
      },
      "correct_answer": "B"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which of the following is NOT a valid use case for WeakMap in memory-sensitive JavaScript applications?",
      "options": {
        "A": "Storing private data for objects without causing memory leaks",
        "B": "Implementing caches that release memory when objects are no longer referenced elsewhere",
        "C": "Associating metadata with DOM nodes without preventing garbage collection",
        "D": "Creating a collection of unique primitive values that can be garbage collected"
      },
      "correct_answer": "D"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What is the output of this code demonstrating CSRF protection?",
      "code_example": "const express = require('express');\nconst csrf = require('csurf');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\n\n// Setup middleware\napp.use(cookieParser());\napp.use(express.urlencoded({ extended: false }));\n\n// Setup CSRF protection\nconst csrfProtection = csrf({ cookie: true });\n\n// Routes\napp.get('/form', csrfProtection, (req, res) => {\n  console.log('CSRF Token Generated:', req.csrfToken());\n  res.send(`\n    <form action=\"/process\" method=\"POST\">\n      <input type=\"hidden\" name=\"_csrf\" value=\"${req.csrfToken()}\">\n      <button type=\"submit\">Submit</button>\n    </form>\n  `);\n});\n\napp.post('/process', csrfProtection, (req, res) => {\n  res.send('CSRF validation passed');\n});\n\napp.use((err, req, res, next) => {\n  if (err.code === 'EBADCSRFTOKEN') {\n    console.log(err.code);\n    return res.status(403).send('Invalid CSRF token');\n  }\n  next(err);\n});\n\n// If a malicious site submits a form to /process without a CSRF token, what happens?",
      "options": {
        "A": "The request is processed normally",
        "B": "The server crashes with CSRF validation error",
        "C": "A 403 response with \"Invalid CSRF token\" message is returned",
        "D": "The token is automatically regenerated and the request proceeds"
      },
      "correct_answer": "C"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "Which of the following statements about the differences between WebSockets, REST, and GraphQL is FALSE?",
      "options": {
        "A": "WebSockets maintain a persistent connection while REST creates a new connection for each request",
        "B": "GraphQL allows clients to request exactly the data they need in a single request",
        "C": "REST endpoints typically return fixed data structures while GraphQL returns only requested fields",
        "D": "WebSockets are generally more efficient than GraphQL for querying hierarchical data"
      },
      "correct_answer": "D"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code using the Helmet.js security middleware?",
      "code_example": "const express = require('express');\nconst helmet = require('helmet');\n\nconst app = express();\n\n// Apply helmet with custom CSP directive\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\", 'example.com'],\n      upgradeInsecureRequests: null\n    }\n  }\n}));\n\napp.get('/', (req, res) => {\n  res.send('Secured!');\n});\n\n// When the app receives a request, which header will NOT be included in the response?",
      "options": {
        "A": "Content-Security-Policy",
        "B": "X-Content-Type-Options",
        "C": "Content-Security-Policy-Report-Only",
        "D": "X-XSS-Protection"
      },
      "correct_answer": "C"
    }
  ]
}
