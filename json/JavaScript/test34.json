{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "topic": "Implicit type conversion (== vs ===)",
      "question": "What will be the output of the following code?",
      "code_example": "console.log('5' == 5);",
      "options": {
        "A": "false",
        "B": "true",
        "C": "TypeError",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "topic": "How Node.js differs from browser JavaScript",
      "question": "Which of the following is NOT available in Node.js but is available in browser JavaScript?",
      "options": {
        "A": "require()",
        "B": "setTimeout()",
        "C": "document.getElementById()",
        "D": "console.log()"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "topic": "Function hoisting",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(typeof sayHello);\nfunction sayHello() {\n  console.log('Hello!');\n}",
      "options": {
        "A": "undefined",
        "B": "null",
        "C": "function",
        "D": "ReferenceError: sayHello is not defined"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "topic": "Event listeners",
      "question": "Which of the following is the correct way to add a click event listener to a button element with the ID 'myButton'?",
      "options": {
        "A": "document.getElementById('myButton').addEventListener('click', function() {});",
        "B": "document.getElementById('myButton').onClick = function() {};",
        "C": "document.getElementById('myButton').clickEvent(function() {});",
        "D": "document.getElementById('myButton').listen('click', function() {});"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "topic": "What is Node.js?",
      "question": "Which of the following best describes Node.js?",
      "options": {
        "A": "A programming language for building web applications",
        "B": "A JavaScript framework for creating user interfaces",
        "C": "A JavaScript runtime environment that executes JavaScript code outside a web browser",
        "D": "A database management system for JavaScript applications"
      },
      "correct_answer": "C"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "topic": "Reference types",
      "question": "What will be the output of the following code?",
      "code_example": "const obj1 = { value: 10 };\nconst obj2 = obj1;\nobj2.value = 20;\nconsole.log(obj1.value);",
      "options": {
        "A": "10",
        "B": "20",
        "C": "undefined",
        "D": "NaN"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "topic": "Promises",
      "question": "What will be the output of the following code?",
      "code_example": "Promise.resolve('Success!')\n  .then(data => {\n    throw new Error('Error!');\n    return data;\n  })\n  .then(data => console.log('Then:', data))\n  .catch(error => console.log('Catch:', error.message))\n  .finally(() => console.log('Finally!'));",
      "options": {
        "A": "Then: Success! Finally!",
        "B": "Catch: Error! Finally!",
        "C": "Then: Success! Catch: Error! Finally!",
        "D": "Finally!"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "topic": "Template literals",
      "question": "What will be the output of the following code?",
      "code_example": "const name = 'John';\nconst age = 30;\nconsole.log(`${name} is ${age + 5} years old.`);",
      "options": {
        "A": "${name} is ${age + 5} years old.",
        "B": "John is 30 + 5 years old.",
        "C": "John is 35 years old.",
        "D": "name is age + 5 years old."
      },
      "correct_answer": "C"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "topic": "Assignment operators",
      "question": "What will be the output of the following code?",
      "code_example": "let x = 5;\nx **= 2;\nconsole.log(x);",
      "options": {
        "A": "7",
        "B": "10",
        "C": "25",
        "D": "Error: Invalid operator"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "topic": "Object methods",
      "question": "What will be the output of the following code?",
      "code_example": "const person = {\n  name: 'Alice',\n  age: 28,\n  job: 'Developer'\n};\nconsole.log(Object.keys(person));",
      "options": {
        "A": "{ name: 'Alice', age: 28, job: 'Developer' }",
        "B": "['Alice', 28, 'Developer']",
        "C": "['name', 'age', 'job']",
        "D": "['name: Alice', 'age: 28', 'job: Developer']"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "topic": "Object destructuring",
      "question": "What will be the output of the following code?",
      "code_example": "const { a = 10, b = 5 } = { a: 3 };\nconsole.log(a, b);",
      "options": {
        "A": "10 5",
        "B": "3 5",
        "C": "3 undefined",
        "D": "10 undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "topic": "File system (fs module)",
      "question": "Which Node.js module is used for file system operations?",
      "options": {
        "A": "filesystem",
        "B": "fs",
        "C": "file",
        "D": "path"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "topic": "Loops",
      "question": "What will be the output of the following code?",
      "code_example": "let result = '';\nconst arr = [1, 2, 3];\narr.forEach(item => {\n  result += item;\n});\nconsole.log(result);",
      "options": {
        "A": "123",
        "B": "6",
        "C": "[1,2,3]",
        "D": "1,2,3"
      },
      "correct_answer": "A"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "topic": "Prevent default behavior",
      "question": "What is the purpose of the event.preventDefault() method in JavaScript?",
      "options": {
        "A": "To stop the propagation of events to parent elements",
        "B": "To prevent the default action associated with an event from occurring",
        "C": "To remove all event listeners from an element",
        "D": "To reset form elements to their default values"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "topic": "Changing content",
      "question": "What is the difference between innerHTML and textContent when changing element content?",
      "options": {
        "A": "innerHTML allows changing styles, while textContent doesn't",
        "B": "innerHTML parses content as HTML, while textContent treats it as plain text",
        "C": "innerHTML is faster than textContent for all operations",
        "D": "There is no difference; they are aliases for the same functionality"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "topic": "Callbacks",
      "question": "What will be the output of the following code?",
      "code_example": "function processData(data, callback) {\n  data.processed = true;\n  callback(data);\n}\n\nconst myData = { value: 42 };\nprocessData(myData, function(result) {\n  console.log(result);\n});",
      "options": {
        "A": "42",
        "B": "{ value: 42 }",
        "C": "{ processed: true }",
        "D": "{ value: 42, processed: true }"
      },
      "correct_answer": "D"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "topic": "CRUD operations",
      "question": "Which MongoDB/Mongoose method would you use to update multiple documents that match a specific criteria?",
      "options": {
        "A": "updateOne()",
        "B": "updateById()",
        "C": "updateMany()",
        "D": "modifyAll()"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "topic": "Nullish coalescing",
      "question": "What will be the output of the following code?",
      "code_example": "const value1 = 0;\nconst value2 = null;\nconst value3 = '';\nconst value4 = 'default';\n\nconsole.log(value1 ?? value4);\nconsole.log(value2 ?? value4);\nconsole.log(value3 ?? value4);",
      "options": {
        "A": "default default default",
        "B": "0 default default",
        "C": "0 default ''",
        "D": "default null ''"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "topic": "Helmet.js for HTTP security",
      "question": "What is the primary purpose of Helmet.js in an Express.js application?",
      "options": {
        "A": "To provide authentication middleware",
        "B": "To compress HTTP responses",
        "C": "To set various HTTP headers for security",
        "D": "To encrypt sensitive data in transit"
      },
      "correct_answer": "C"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "topic": "Handling form data",
      "question": "Which middleware is used in Express.js to parse URL-encoded form data with the extended option set to false?",
      "code_example": "app.use(___);",
      "options": {
        "A": "express.json()",
        "B": "express.urlencoded({ extended: false })",
        "C": "express.form({ extended: false })",
        "D": "bodyParser.urlencoded({ extended: false })"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "topic": "JavaScript inheritance vs classical OOP",
      "question": "What is the key difference between JavaScript's prototypal inheritance and classical inheritance?",
      "options": {
        "A": "JavaScript uses classes while classical OOP uses prototypes",
        "B": "In JavaScript, objects inherit directly from other objects, not from classes",
        "C": "JavaScript doesn't support inheritance",
        "D": "Classical OOP allows multiple inheritance while JavaScript doesn't"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "topic": "File system operations",
      "question": "What will be the output of the following Node.js code assuming 'example.txt' contains the text 'Hello, World!'?",
      "code_example": "const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log('Async:', data);\n});\n\nconst syncData = fs.readFileSync('example.txt', 'utf8');\nconsole.log('Sync:', syncData);",
      "options": {
        "A": "Async: Hello, World! Sync: Hello, World!",
        "B": "Sync: Hello, World! Async: Hello, World!",
        "C": "Sync: [Buffer data] Async: Hello, World!",
        "D": "Both will output at the same time"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "topic": "API versioning",
      "question": "What is the most common approach to implement API versioning in an Express.js application?",
      "options": {
        "A": "Using different port numbers for each version",
        "B": "Including the version in the URL path (e.g., /api/v1/users)",
        "C": "Using query parameters (e.g., /api/users?version=1)",
        "D": "Implementing versioning through database schemas only"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "topic": "Rate limiting",
      "question": "Which configuration option is NOT typically used when implementing rate limiting with express-rate-limit?",
      "code_example": "const rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100,\n  message: 'Too many requests from this IP, please try again later'\n  // What else could be added here?\n});",
      "options": {
        "A": "standardHeaders: true",
        "B": "legacyHeaders: false",
        "C": "skipFailedRequests: true",
        "D": "throttleLevel: 'medium'"
      },
      "correct_answer": "D"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "topic": "Explicit binding",
      "question": "What will be the output of the following code?",
      "code_example": "const person = {\n  name: 'Alice',\n  greet: function() {\n    return `Hello, my name is ${this.name}`;\n  }\n};\n\nconst greetFunction = person.greet;\nconst boundGreet = greetFunction.bind({ name: 'Bob' });\nconsole.log(boundGreet());",
      "options": {
        "A": "Hello, my name is Alice",
        "B": "Hello, my name is Bob",
        "C": "Hello, my name is undefined",
        "D": "TypeError: Cannot read property 'name' of undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "topic": "Spread/rest operators",
      "question": "What will be the output of the following code?",
      "code_example": "function sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\n\nconst numbers = [1, 2, 3];\nconsole.log(sum(...numbers, 4, 5));",
      "options": {
        "A": "6",
        "B": "15",
        "C": "[1, 2, 3, 4, 5]",
        "D": "Error: Spread operator cannot be used with function calls"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "topic": "Lexical this in arrow functions",
      "question": "What will be the output of the following code?",
      "code_example": "const counter = {\n  count: 0,\n  increment: function() {\n    setTimeout(() => {\n      this.count++;\n      console.log(this.count);\n    }, 0);\n  }\n};\n\ncounter.increment();",
      "options": {
        "A": "0",
        "B": "1",
        "C": "undefined",
        "D": "NaN"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "topic": "Error handling middleware",
      "question": "In Express.js, what is the correct signature for an error handling middleware function?",
      "options": {
        "A": "(req, res, next)",
        "B": "(err)",
        "C": "(err, req, res, next)",
        "D": "(err, req, res)"
      },
      "correct_answer": "C"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "topic": "Function composition",
      "question": "What will be the output of the following code?",
      "code_example": "const add = x => x + 10;\nconst multiply = x => x * 2;\n\nconst compose = (f, g) => x => f(g(x));\nconst addThenMultiply = compose(multiply, add);\n\nconsole.log(addThenMultiply(5));",
      "options": {
        "A": "20",
        "B": "30",
        "C": "40",
        "D": "25"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "topic": "Destructuring (nested objects & arrays)",
      "question": "What will be the output of the following code?",
      "code_example": "const person = {\n  name: 'Alice',\n  age: 30,\n  address: {\n    city: 'New York',\n    country: 'USA'\n  },\n  hobbies: ['reading', 'gaming']\n};\n\nconst { name, address: { city }, hobbies: [firstHobby] } = person;\nconsole.log(`${name} lives in ${city} and enjoys ${firstHobby}.`);",
      "options": {
        "A": "Alice lives in New York and enjoys reading.",
        "B": "Alice lives in undefined and enjoys undefined.",
        "C": "Alice lives in [object Object] and enjoys reading,gaming.",
        "D": "TypeError: Cannot destructure property"
      },
      "correct_answer": "A"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "topic": "Streams and Buffers",
      "question": "What is the primary advantage of using streams in Node.js over loading an entire file into memory?",
      "options": {
        "A": "Streams are always faster regardless of file size",
        "B": "Streams help process data piece by piece, reducing memory usage for large files",
        "C": "Streams automatically compress data during processing",
        "D": "Streams allow simultaneous reading and writing to different files"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "topic": "Optional chaining",
      "question": "What will be the output of the following code?",
      "code_example": "const user = {\n  profile: {\n    address: null\n  }\n};\n\nconsole.log(user.profile.address?.street);\nconsole.log(user.settings?.theme);",
      "options": {
        "A": "undefined undefined",
        "B": "null undefined",
        "C": "TypeError undefined",
        "D": "null null"
      },
      "correct_answer": "A"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses WeakMap?",
      "options": {
        "A": "{ name: 'John' }",
        "B": "undefined",
        "C": "Error: Cannot convert undefined or null to object",
        "D": "null"
      },
      "correct_answer": "B",
      "code_example": "let user = { name: 'John' };\nconst userMap = new WeakMap();\nuserMap.set(user, 'secret data');\n\nuser = null;\n\n// Wait for garbage collection (simulated)\nsetTimeout(() => {\n  console.log(userMap.get(user));\n}, 0);"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "Which of the following correctly describes the main difference between WebSockets, REST, and GraphQL?",
      "options": {
        "A": "REST is bidirectional, while WebSockets and GraphQL are unidirectional",
        "B": "WebSockets provide a persistent connection for bidirectional communication, REST follows a request-response model, and GraphQL allows clients to request exactly what they need",
        "C": "GraphQL can only be used with MongoDB, while REST and WebSockets work with any database",
        "D": "REST and GraphQL both use WebSockets under the hood for communication"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates a stream pipeline?",
      "options": {
        "A": "hello world",
        "B": "HELLO WORLD",
        "C": "hello",
        "D": "Error: Stream is not readable"
      },
      "correct_answer": "B",
      "code_example": "const { Transform, pipeline } = require('stream');\nconst { Readable } = require('stream');\n\nconst readableStream = Readable.from(['hello world']);\nconst upperCaseStream = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, chunk.toString().toUpperCase());\n  }\n});\n\npipeline(\n  readableStream,\n  upperCaseStream,\n  process.stdout,\n  (err) => {\n    if (err) {\n      console.error('Pipeline failed', err);\n    } else {\n      console.log();\n    }\n  }\n);"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which of the following statements about Kubernetes pods is correct?",
      "options": {
        "A": "A pod can contain only one container",
        "B": "Pods are designed to be immutable - you should rebuild and redeploy them rather than updating them directly",
        "C": "Pods can share volumes but not network space",
        "D": "Pods automatically restart themselves when they crash without the need for a controller"
      },
      "correct_answer": "B"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses socket.io?",
      "options": {
        "A": "'New connection' followed by 'Client message: Hello server'",
        "B": "'New connection' followed by 'Error: No client connected'",
        "C": "'Server listening on port 3000'",
        "D": "'New connection' followed by 'Message received'"
      },
      "correct_answer": "C",
      "code_example": "const http = require('http');\nconst { Server } = require('socket.io');\n\nconst server = http.createServer();\nconst io = new Server(server);\n\nio.on('connection', (socket) => {\n  console.log('New connection');\n  \n  socket.on('message', (data) => {\n    console.log(`Client message: ${data}`);\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "Which of the following best describes the purpose of Helmet.js in a Node.js application?",
      "options": {
        "A": "It's a templating engine like EJS or Handlebars",
        "B": "It provides authentication middleware for Express applications",
        "C": "It helps secure Express apps by setting various HTTP headers",
        "D": "It's a testing framework specifically designed for Express routes"
      },
      "correct_answer": "C"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses cluster module?",
      "options": {
        "A": "Four 'Worker started' messages, assuming a quad-core CPU",
        "B": "One 'Master process is running' message, followed by one 'Worker started' message",
        "C": "Error: cluster.fork() is not a function",
        "D": "One 'Master process is running' message, no worker messages"
      },
      "correct_answer": "B",
      "code_example": "const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isPrimary) {\n  console.log('Master process is running');\n  \n  // Fork only one worker, not using numCPUs\n  cluster.fork();\n  \n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`Worker ${worker.process.pid} died`);\n  });\n} else {\n  console.log('Worker started');\n  \n  // Workers can share any TCP connection\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('Hello World');\n  }).listen(8000);\n}"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What is the key difference between Map and WeakMap in JavaScript?",
      "options": {
        "A": "WeakMap allows any type of key, while Map only allows object keys",
        "B": "WeakMap keys are weakly referenced, allowing garbage collection when no other references to the key exist",
        "C": "Map can store more key-value pairs than WeakMap",
        "D": "WeakMap provides methods for iteration while Map does not"
      },
      "correct_answer": "B"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates a possible XSS vulnerability?",
      "options": {
        "A": "The text 'Hello <script>alert(\"XSS\")</script>' rendered as plain text",
        "B": "An alert dialog with the message 'XSS'",
        "C": "The text 'Hello' with no script executed",
        "D": "Error: Unsafe script blocked"
      },
      "correct_answer": "B",
      "code_example": "// Assuming this runs in a browser environment\nfunction renderUserInput(input) {\n  const container = document.createElement('div');\n  container.innerHTML = `Hello ${input}`;\n  document.body.appendChild(container);\n}\n\n// User input from an untrusted source\nconst userInput = '<script>alert(\"XSS\")</script>';\nrenderUserInput(userInput);"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following configurations in a docker-compose.yml file correctly sets up a volume for persistent data storage?",
      "options": {
        "A": "volumes: ['./app:/app', 'data:/var/lib/mysql']",
        "B": "persistent: ['data:/var/lib/mysql']",
        "C": "storage: {source: './data', target: '/var/lib/mysql'}",
        "D": "mounts: {type: volume, source: data, target: /var/lib/mysql}"
      },
      "correct_answer": "A"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses PM2 programmatically?",
      "options": {
        "A": "Error: Cannot find module 'pm2'",
        "B": "4 processes started",
        "C": "null { success: true }",
        "D": "A detailed JSON object with information about the started processes"
      },
      "correct_answer": "C",
      "code_example": "const pm2 = require('pm2');\n\npm2.connect((err) => {\n  if (err) {\n    console.error(err);\n    process.exit(2);\n  }\n  \n  pm2.start({\n    script: 'app.js',\n    name: 'api',\n    exec_mode: 'cluster',\n    instances: 4\n  }, (err, apps) => {\n    pm2.disconnect();\n    if (err) {\n      console.error(err);\n      process.exit(2);\n    }\n    \n    console.log(err, { success: true });\n  });\n});"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "Which HTTP header does NOT help in preventing Cross-Site Scripting (XSS) attacks?",
      "options": {
        "A": "Content-Security-Policy",
        "B": "X-XSS-Protection",
        "C": "Strict-Transport-Security",
        "D": "X-Content-Type-Options"
      },
      "correct_answer": "C"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates a CORS configuration?",
      "options": {
        "A": "Access-Control-Allow-Origin: *",
        "B": "Error: CORS header 'Access-Control-Allow-Origin' missing",
        "C": "Request allowed from example.com only",
        "D": "Server listening on port 3000"
      },
      "correct_answer": "D",
      "code_example": "const express = require('express');\nconst cors = require('cors');\nconst app = express();\n\n// Configure CORS\nconst corsOptions = {\n  origin: 'https://example.com',\n  methods: ['GET', 'POST'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true,\n  maxAge: 86400 // 24 hours\n};\n\n// Apply CORS middleware with specific options\napp.use(cors(corsOptions));\n\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'This response has CORS headers' });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which of the following describes a correct implementation of CSRF protection in a Node.js application?",
      "options": {
        "A": "Using the npm 'hash' package to create a hash of the user's IP address",
        "B": "Generating and validating a unique token for each form submission or API request",
        "C": "Implementing only GET requests for sensitive operations to prevent CSRF",
        "D": "Using HTTPS instead of HTTP for all communications"
      },
      "correct_answer": "B"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates the difference between Set and WeakSet?",
      "options": {
        "A": "2 followed by 1",
        "B": "2 followed by 0",
        "C": "2 followed by Error: myWeakSet.size is not a function",
        "D": "2 followed by undefined"
      },
      "correct_answer": "D",
      "code_example": "let obj1 = { name: 'Object 1' };\nlet obj2 = { name: 'Object 2' };\n\n// Regular Set\nconst mySet = new Set();\nmySet.add(obj1);\nmySet.add(obj2);\n\n// WeakSet\nconst myWeakSet = new WeakSet();\nmyWeakSet.add(obj1);\nmyWeakSet.add(obj2);\n\nconsole.log(mySet.size);\n\n// Simulate garbage collection by removing strong reference\nobj1 = null;\nobj2 = null;\n\n// WeakSet doesn't have a size property\nconsole.log(myWeakSet.size);"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "Which metrics collection approach is MOST appropriate when using Prometheus with Node.js applications?",
      "options": {
        "A": "Configure Prometheus to directly read the application's log files",
        "B": "Expose a /metrics endpoint in your application that Prometheus can scrape",
        "C": "Use the Prometheus SDK to send metrics directly to the Prometheus server via push",
        "D": "Implement a separate agent that reads metrics from the Node.js process memory"
      },
      "correct_answer": "B"
    }
  ]
}
