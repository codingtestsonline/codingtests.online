{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(typeof undefined);",
      "options": {
        "A": "\"null\"",
        "B": "\"undefined\"",
        "C": "\"object\"",
        "D": "\"function\""
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "How would you select an element with the ID 'app' using JavaScript?",
      "options": {
        "A": "document.findElement('#app');",
        "B": "document.querySelector('#app');",
        "C": "document.getElement('#app');",
        "D": "document.getElementsByClass('app');"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let a = 5;\na += 3;\nconsole.log(a);",
      "options": {
        "A": "5",
        "B": "3",
        "C": "8",
        "D": "53"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(5 == '5');",
      "options": {
        "A": "true",
        "B": "false",
        "C": "undefined",
        "D": "TypeError"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const arr = [1, 2, 3, 4, 5];\narr.push(6);\nconsole.log(arr.length);",
      "options": {
        "A": "5",
        "B": "6",
        "C": "7",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What is the key difference between require() and import() in Node.js?",
      "options": {
        "A": "require() is synchronous, while import() is asynchronous",
        "B": "require() is for Node.js only, import() doesn't work in Node.js",
        "C": "import() is older and being deprecated, while require() is newer",
        "D": "There is no difference, they can be used interchangeably"
      },
      "correct_answer": "A"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(5 & 3);",
      "options": {
        "A": "8",
        "B": "2",
        "C": "1",
        "D": "15"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(5 > 3 ? 'yes' : 'no');",
      "options": {
        "A": "true",
        "B": "false",
        "C": "yes",
        "D": "no"
      },
      "correct_answer": "C"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "How would you change the text content of an element with ID 'message'?",
      "options": {
        "A": "document.getElementById('message').innerHTML = 'Hello';",
        "B": "document.getElementById('message').value = 'Hello';",
        "C": "document.getElementById('message').innerText = 'Hello';",
        "D": "All of the above would work depending on the element type"
      },
      "correct_answer": "D"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = { name: 'John' };\nconst arr = [1, 2, 3];\nconsole.log(typeof obj, typeof arr);",
      "options": {
        "A": "\"object\" \"array\"",
        "B": "\"object\" \"object\"",
        "C": "\"object\" \"reference\"",
        "D": "\"reference\" \"reference\""
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What is the most basic way to create an HTTP server in Node.js?",
      "code_example": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(3000, '127.0.0.1', () => {\n  console.log('Server running at http://127.0.0.1:3000/');\n});",
      "options": {
        "A": "Using the http.createServer() method from http module",
        "B": "Using the express() method from Express.js",
        "C": "Using the server.create() method from server module",
        "D": "Using the createHttpServer() method from http module"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let value;\nswitch(2) {\n  case 1:\n    value = 'one';\n    break;\n  case 2: \n    value = 'two';\n    break;\n  default:\n    value = 'other';\n}\nconsole.log(value);",
      "options": {
        "A": "one",
        "B": "two",
        "C": "other",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "How would you read an environment variable named 'PORT' in Node.js?",
      "code_example": "const port = process.env.PORT || 3000;",
      "options": {
        "A": "process.environment.PORT",
        "B": "env.PORT",
        "C": "process.env.PORT",
        "D": "environment.PORT"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(2 ** 3);",
      "options": {
        "A": "6",
        "B": "5",
        "C": "8",
        "D": "23"
      },
      "correct_answer": "C"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "Which of the following is a key difference between Node.js and browser JavaScript?",
      "options": {
        "A": "Node.js can't handle asynchronous operations, but browsers can",
        "B": "Node.js has direct access to the file system, but browsers have limited access",
        "C": "Node.js doesn't support ES6 features, but browsers do",
        "D": "Node.js doesn't have event loops, but browsers do"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const value = 0;\nif (value) {\n  console.log('truthy');\n} else {\n  console.log('falsy');\n}",
      "options": {
        "A": "truthy",
        "B": "falsy",
        "C": "0",
        "D": "No output"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function sayHello() {\n  console.log(this.name);\n}\n\nconst person = {\n  name: 'John'\n};\n\nsayHello.call(person);",
      "options": {
        "A": "undefined",
        "B": "John",
        "C": "Error: this.name is not defined",
        "D": "null"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function counter() {\n  let count = 0;\n  return function() {\n    return ++count;\n  };\n}\n\nconst increment = counter();\nconsole.log(increment());\nconsole.log(increment());",
      "options": {
        "A": "0, 0",
        "B": "1, 1",
        "C": "1, 2",
        "D": "undefined, undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const user = {\n  name: 'John',\n  greet: () => {\n    console.log(`Hello, ${this.name}`);\n  }\n};\n\nuser.greet();",
      "options": {
        "A": "Hello, John",
        "B": "Hello, undefined",
        "C": "Hello, null",
        "D": "TypeError"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What is the correct way to implement error handling middleware in Express.js?",
      "code_example": "app.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});",
      "options": {
        "A": "The middleware should take 3 parameters: (req, res, next)",
        "B": "The middleware should take 4 parameters: (err, req, res, next)",
        "C": "The middleware should take 2 parameters: (req, res)",
        "D": "The middleware should take 5 parameters: (err, req, res, next, app)"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const id1 = Symbol('id');\nconst id2 = Symbol('id');\n\nconsole.log(id1 === id2);",
      "options": {
        "A": "true",
        "B": "false",
        "C": "Error",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What is the correct way to implement a REST API endpoint for creating a new user in Express?",
      "code_example": "app.post('/users', (req, res) => {\n  const { username, email } = req.body;\n  // Create user logic\n  res.status(201).json({ id: 1, username, email });\n});",
      "options": {
        "A": "Use app.create instead of app.post",
        "B": "Use res.send instead of res.json",
        "C": "Return status code 200 instead of 201",
        "D": "The implementation is correct"
      },
      "correct_answer": "D"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function getInfo() {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve('Info'), 100);\n  });\n}\n\nasync function fetchInfo() {\n  try {\n    const info = await getInfo();\n    console.log(info);\n  } catch (error) {\n    console.log('Error');\n  }\n}\n\nfetchInfo();",
      "options": {
        "A": "Promise",
        "B": "Info",
        "C": "Error",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "How would you enable CORS for all routes in an Express application?",
      "code_example": "const express = require('express');\nconst cors = require('cors');\nconst app = express();\n\napp.use(cors());\n// Routes...",
      "options": {
        "A": "app.enableCors();",
        "B": "app.use(cors());",
        "C": "app.all('*', cors());",
        "D": "app.set('cors', true);"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = { first: 'John' };\nconst person = Object.create(obj);\nperson.last = 'Doe';\n\nconsole.log(person.first, person.last);",
      "options": {
        "A": "undefined undefined",
        "B": "undefined Doe",
        "C": "John undefined",
        "D": "John Doe"
      },
      "correct_answer": "D"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function Person(name) {\n  this.name = name;\n}\n\nconst person1 = new Person('John');\nconst person2 = Person('Jane');\n\nconsole.log(person1?.name, global.name);",
      "options": {
        "A": "John undefined",
        "B": "John Jane",
        "C": "undefined Jane",
        "D": "undefined undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What is the correct way to implement lazy loading of images in a web application?",
      "options": {
        "A": "Set the 'lazyload' attribute on all img tags",
        "B": "Use the 'loading=\"lazy\"' attribute on img elements",
        "C": "Load all images at once to improve performance",
        "D": "Use JavaScript to detect when the user has scrolled to the bottom of the page"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const items = [1, 2, 3, 4, 5];\nlet sum = 0;\n\n// Instead of using a loop to sum values\nsum = items.reduce((total, current) => total + current, 0);\n\nconsole.log(sum);",
      "options": {
        "A": "10",
        "B": "15",
        "C": "Error",
        "D": "NaN"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "let count = 0;\nconst interval = setInterval(() => {\n  console.log(count);\n  count++;\n  if (count > 2) {\n    clearInterval(interval);\n  }\n}, 100);",
      "options": {
        "A": "0 1 2",
        "B": "0 1 2 3",
        "C": "1 2 3",
        "D": "No output, the interval is cleared immediately"
      },
      "correct_answer": "A"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "How would you properly implement JWT authentication in an Express API?",
      "options": {
        "A": "Store the JWT in localStorage and send it with every request in the Authorization header",
        "B": "Store the JWT in an HTTP-only cookie and validate it on the server",
        "C": "Store the JWT as plaintext in the database and compare it on each request",
        "D": "Both A and B are correct approaches, depending on the security requirements"
      },
      "correct_answer": "D"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const data = {\n  user: {\n    profile: null\n  }\n};\n\nconst name = data.user?.profile?.name;\nconsole.log(name);",
      "options": {
        "A": "null",
        "B": "undefined",
        "C": "Error: Cannot read property 'name' of null",
        "D": "TypeError"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What technique can be used to avoid 'callback hell' in asynchronous JavaScript code?",
      "code_example": "// Instead of:\ngetUser(userId, function(user) {\n  getProjects(user.id, function(projects) {\n    getTasks(projects[0].id, function(tasks) {\n      // More nested callbacks...\n    });\n  });\n});\n\n// Better approach:\nasync function getUserData(userId) {\n  const user = await getUser(userId);\n  const projects = await getProjects(user.id);\n  const tasks = await getTasks(projects[0].id);\n  return { user, projects, tasks };\n}",
      "options": {
        "A": "Use more global variables",
        "B": "Use synchronous functions instead",
        "C": "Use Promises and async/await",
        "D": "Use more nested functions"
      },
      "correct_answer": "C"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which statement about JavaScript memory allocation is correct?",
      "options": {
        "A": "JavaScript automatically allocates memory when primitive values are declared, but requires manual allocation for objects",
        "B": "JavaScript uses reference counting as its primary garbage collection mechanism",
        "C": "The JavaScript engine allocates memory when values are created and frees it when they are no longer needed using garbage collection",
        "D": "Memory for variables in JavaScript is allocated at compile time based on their data type declaration"
      },
      "correct_answer": "C"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following Node.js crypto module code that performs symmetric encryption and decryption?",
      "options": {
        "A": "Error: Invalid IV length",
        "B": "Error: Unsupported state or unable to authenticate data",
        "C": "sensitiveData",
        "D": "A different string each time the code runs"
      },
      "correct_answer": "C",
      "code_example": "const crypto = require('crypto');\n\n// Encryption function\nfunction encrypt(text, secretKey) {\n  // Generate a fixed initialization vector for this example\n  const iv = Buffer.from('1234567890123456');\n  \n  // Create cipher with key and iv\n  const cipher = crypto.createCipheriv(\n    'aes-256-cbc',\n    crypto.scryptSync(secretKey, 'salt', 32),\n    iv\n  );\n  \n  // Encrypt the data\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  \n  return { iv: iv.toString('hex'), encryptedData: encrypted };\n}\n\n// Decryption function\nfunction decrypt(encrypted, secretKey) {\n  const iv = Buffer.from(encrypted.iv, 'hex');\n  \n  // Create decipher with key and iv\n  const decipher = crypto.createDecipheriv(\n    'aes-256-cbc',\n    crypto.scryptSync(secretKey, 'salt', 32),\n    iv\n  );\n  \n  // Decrypt the data\n  let decrypted = decipher.update(encrypted.encryptedData, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  return decrypted;\n}\n\n// Usage\nconst secretKey = 'mySecretPassword';\nconst dataToEncrypt = 'sensitiveData';\n\n// Encrypt the data\nconst encryptedResult = encrypt(dataToEncrypt, secretKey);\n\n// Decrypt the data\nconst decryptedText = decrypt(encryptedResult, secretKey);\n\n// Show the result\nconsole.log(decryptedText);"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Which of the following best describes how V8's hidden classes and inline caching optimize JavaScript performance?",
      "options": {
        "A": "Hidden classes are created at runtime to represent the structure of objects, and inline caching optimizes property access patterns",
        "B": "Hidden classes are predefined in the V8 engine, while inline caching temporarily stores object references",
        "C": "Hidden classes extend JavaScript's prototype system, and inline caching prevents garbage collection of objects",
        "D": "Hidden classes encrypt sensitive object properties, and inline caching reduces network requests for remote JavaScript files"
      },
      "correct_answer": "A"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "In the context of V8's hidden classes, what will be the output of the following code?",
      "options": {
        "A": "Point1 and Point2 share the same hidden class",
        "B": "Point1 and Point2 have different hidden classes due to property order",
        "C": "TypeError: Cannot access hidden classes directly",
        "D": "Point1 and Point2 are the same object"
      },
      "correct_answer": "B",
      "code_example": "function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nfunction createPoint1() {\n  let obj = {};\n  obj.x = 1;\n  obj.y = 2;\n  return obj;\n}\n\nfunction createPoint2() {\n  let obj = {};\n  obj.y = 2;\n  obj.x = 1;\n  return obj;\n}\n\nconst Point1 = createPoint1();\nconst Point2 = createPoint2();\n\nconsole.log(Point1.x === Point2.x && Point1.y === Point2.y ? \n  'Point1 and Point2 share the same hidden class' : \n  'Point1 and Point2 have different hidden classes due to property order');"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "Which OAuth 2.0 flow is most appropriate for a public single-page application (SPA) that needs to authenticate with a third-party API?",
      "options": {
        "A": "Authorization Code Flow",
        "B": "Authorization Code Flow with PKCE",
        "C": "Client Credentials Flow",
        "D": "Resource Owner Password Flow"
      },
      "correct_answer": "B"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the result of the following Winston logger configuration?",
      "options": {
        "A": "Logs will be saved to error.log and combined.log with appropriate levels",
        "B": "An error will occur due to invalid transport format",
        "C": "Only error logs will be saved because the format is incorrectly specified",
        "D": "The timestamp will be formatted as ISO string in all logs"
      },
      "correct_answer": "A",
      "code_example": "const winston = require('winston');\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\nlogger.error('This is an error message');\nlogger.info('This is an info message');"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which of the following Kubernetes YAML snippets correctly defines a pod with a Node.js application container and a volume mount?",
      "options": {
        "A": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: nodejs-app\nspec:\n  containers:\n  - name: nodejs\n    image: node:14\n    ports:\n    - containerPort: 3000\n    volumeMounts:\n    - name: config-volume\n      mountPath: /app/config\n  volumes:\n  - name: config-volume\n    configMap:\n      name: app-config",
        "B": "apiVersion: v1\nkind: Deployment\nmetadata:\n  name: nodejs-app\nspec:\n  containers:\n  - name: nodejs\n    image: node:14\n    volumeMounts:\n    - mountPath: /app/config\n      name: config-volume",
        "C": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: nodejs-app\nspec:\n  - containers:\n    - name: nodejs\n      image: node:14\n      ports:\n      - containerPort: 3000\n    volumes:\n    - name: config-volume\n      configMap: app-config",
        "D": "apiVersion: apps/v1\nkind: Pod\nmetadata:\n  name: nodejs-app\nspec:\n  container:\n    name: nodejs\n    image: node:14\n    volumeMount:\n      mountPath: /app/config"
      },
      "correct_answer": "A"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following Transform stream code?",
      "options": {
        "A": "HELLO\nWORLD",
        "B": "hello\nworld",
        "C": "Error: Invalid chunk format",
        "D": "HELLO WORLD"
      },
      "correct_answer": "A",
      "code_example": "const { Transform } = require('stream');\nconst { Readable } = require('stream');\n\nconst upperCaseTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, chunk.toString().toUpperCase());\n  }\n});\n\nconst readable = Readable.from(['hello\\n', 'world']);\nreadable.pipe(upperCaseTransform).pipe(process.stdout);"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "Which of the following Dockerfile snippets is the most efficient for a Node.js application, considering layer caching and image size?",
      "options": {
        "A": "FROM node:14\nWORKDIR /app\nCOPY . .\nRUN npm install\nEXPOSE 3000\nCMD [\"npm\", \"start\"]",
        "B": "FROM node:14-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nEXPOSE 3000\nCMD [\"node\", \"app.js\"]",
        "C": "FROM node:14\nWORKDIR /app\nRUN npm install express\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]",
        "D": "FROM ubuntu:20.04\nRUN apt-get update && apt-get install -y nodejs npm\nWORKDIR /app\nCOPY . .\nRUN npm install\nEXPOSE 3000\nCMD [\"npm\", \"start\"]"
      },
      "correct_answer": "B"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of this Node.js parallel processing code?",
      "options": {
        "A": "5\n4\n3\n2\n1",
        "B": "Task 1 completed\nTask 2 completed\nTask 3 completed\nTask 4 completed\nTask 5 completed\nAll tasks completed",
        "C": "All tasks completed after 1000ms",
        "D": "Error: Cannot use Promise.all with setTimeout"
      },
      "correct_answer": "B",
      "code_example": "function executeTask(id, delay) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      console.log(`Task ${id} completed`);\n      resolve();\n    }, delay);\n  });\n}\n\nasync function runParallel() {\n  const tasks = [\n    executeTask(1, 1000),\n    executeTask(2, 800),\n    executeTask(3, 600),\n    executeTask(4, 400),\n    executeTask(5, 200)\n  ];\n  \n  await Promise.all(tasks);\n  console.log('All tasks completed');\n}\n\nrunParallel();"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "Which of the following best describes how to properly protect against Cross-Site Request Forgery (CSRF) attacks in a Node.js Express application?",
      "options": {
        "A": "Use the helmet middleware to set secure headers",
        "B": "Generate a CSRF token for each session, include it in forms, and validate it on form submission",
        "C": "Implement rate limiting on all POST endpoints",
        "D": "Store all sensitive data in HttpOnly cookies"
      },
      "correct_answer": "B"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be the output of the following Winston logging code?",
      "options": {
        "A": "It will log 'Database connected' to the console with the current timestamp",
        "B": "It will log 'Database connected' to the console and to the file 'app.log'",
        "C": "It will throw an error because the custom format is improperly defined",
        "D": "It will only log to the console if the level is 'info' or higher"
      },
      "correct_answer": "B",
      "code_example": "const winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.printf(info => {\n      return `${info.timestamp} ${info.level}: ${info.message}`;\n    })\n  ),\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n\nlogger.info('Database connected');"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which Nginx configuration block correctly sets up a reverse proxy for a Node.js application running on port 3000 with proper headers and WebSocket support?",
      "options": {
        "A": "server {\n  listen 80;\n  server_name example.com;\n  \n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_set_header Host $host;\n  }\n}",
        "B": "server {\n  listen 80;\n  server_name example.com;\n  \n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n}",
        "C": "http {\n  upstream nodejs {\n    server 127.0.0.1:3000;\n  }\n  \n  server_name example.com;\n  proxy_pass nodejs;\n}",
        "D": "server {\n  listen 80;\n  location / {\n    node_server 127.0.0.1:3000;\n    proxy_websocket on;\n  }\n}"
      },
      "correct_answer": "B"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating WeakMap usage for memory-sensitive caching?",
      "options": {
        "A": "Cache hit: Data for key1\nundefined",
        "B": "Cache hit: Data for key1\nCache hit: Data for key2",
        "C": "Cache hit: Data for key1\nCache miss for key2",
        "D": "Error: Invalid WeakMap key"
      },
      "correct_answer": "A",
      "code_example": "// Implement a memory-sensitive cache with WeakMap\nconst cache = new WeakMap();\n\nfunction fetchData(key, identifier) {\n  if (cache.has(key)) {\n    console.log(`Cache hit: Data for ${identifier}`);\n    return cache.get(key);\n  }\n  \n  // Simulating data fetch\n  const data = `Data for ${identifier}`;\n  cache.set(key, data);\n  return data;\n}\n\n// Create objects as keys\nlet key1 = { id: 1 };\nlet key2 = { id: 2 };\n\n// Cache some data\nfetchData(key1, 'key1');\nfetchData(key2, 'key2');\n\n// Access cached data\nfetchData(key1, 'key1');\n\n// Simulate garbage collection by removing reference\nkey2 = null;\n\n// Force garbage collection would happen here in a real scenario\n\n// Try to access the second item (would be garbage collected in reality)\n// but we can't force GC in this example\nconst someObject = { id: 2 };\nconsole.log(cache.get(someObject));"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "Which of the following is NOT an effective method to prevent Cross-Site Scripting (XSS) attacks in a Node.js application?",
      "options": {
        "A": "Using the helmet middleware to set Content-Security-Policy headers",
        "B": "Implementing proper input validation and sanitization",
        "C": "Setting cookies with the HttpOnly flag",
        "D": "Storing JWT tokens in localStorage instead of cookies"
      },
      "correct_answer": "D"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating a potential memory leak?",
      "options": {
        "A": "Memory leak: The array keeps growing indefinitely",
        "B": "No memory leak: The array size is limited to 100 elements",
        "C": "No memory leak: The event listener is properly removed",
        "D": "Memory leak: Event listeners are not being properly garbage collected"
      },
      "correct_answer": "D",
      "code_example": "class EventEmitter {\n  constructor() {\n    this.listeners = {};\n  }\n  \n  on(event, callback) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(callback);\n  }\n  \n  emit(event, data) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(callback => callback(data));\n    }\n  }\n}\n\nfunction createObserver() {\n  const data = new Array(10000).fill('potentially large data');\n  \n  return function observer(event) {\n    console.log(`Processing event with ${data.length} items`);\n  };\n}\n\nconst emitter = new EventEmitter();\n\nfunction setupListeners() {\n  for (let i = 0; i < 10; i++) {\n    const observer = createObserver();\n    emitter.on('data', observer);\n  }\n}\n\n// Call setup multiple times, creating new observers each time\nsetupListeners();\nsetupListeners();\n\n// We never remove the observers, even though they're no longer accessible\n// This creates a closure that keeps the large data arrays in memory\n\nconsole.log('Memory leak: Event listeners are not being properly garbage collected');"
    }
  ]
}
