{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What is the main difference between Node.js and browser JavaScript regarding the global object?",
      "options": {
        "A": "Node.js uses 'window' while browsers use 'global'",
        "B": "Node.js uses 'global' while browsers use 'window'",
        "C": "Both use 'document' but with different properties",
        "D": "There is no difference in global objects"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const greeting = name => `Hello, ${name}!`;\nconsole.log(greeting('World'));",
      "options": {
        "A": "Hello, World",
        "B": "Hello, World!",
        "C": "function",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "Which statement correctly describes Node.js?",
      "options": {
        "A": "A JavaScript framework for building user interfaces",
        "B": "A browser-based JavaScript runtime",
        "C": "A JavaScript runtime built on Chrome's V8 JavaScript engine",
        "D": "A programming language that compiles to JavaScript"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "async function getData() {\n  return 'Data';\n}\n\nconst result = getData();\nconsole.log(result);",
      "options": {
        "A": "Data",
        "B": "undefined",
        "C": "Promise { 'Data' }",
        "D": "Function"
      },
      "correct_answer": "C"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const multiply = function(x) {\n  return function(y) {\n    return x * y;\n  };\n};\n\nconst double = multiply(2);\nconsole.log(double(5));",
      "options": {
        "A": "5",
        "B": "2",
        "C": "7",
        "D": "10"
      },
      "correct_answer": "D"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "for (let i = 0; i < 5; i++) {\n  if (i === 2) {\n    continue;\n  }\n  console.log(i);\n}",
      "options": {
        "A": "0 1 2 3 4",
        "B": "0 1 3 4",
        "C": "0 1",
        "D": "0 1 2"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "(function() {\n  const message = 'IIFE Example';\n  console.log(message);\n})();",
      "options": {
        "A": "undefined",
        "B": "IIFE Example",
        "C": "function",
        "D": "Error: message is not defined"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const person1 = {};\nperson1.name = 'Alice';\n\nconst person2 = new Object();\nperson2.name = 'Bob';\n\nconsole.log(person1.name + ' and ' + person2.name);",
      "options": {
        "A": "undefined and undefined",
        "B": "Alice and Bob",
        "C": "[object Object] and [object Object]",
        "D": "Alice and undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "In Node.js, which statement correctly exports a function for use in another module?",
      "code_example": "// file: calculator.js\nfunction add(a, b) {\n  return a + b;\n}\n\n// Choose the correct export statement:",
      "options": {
        "A": "export default add;",
        "B": "export { add };",
        "C": "module.exports = add;",
        "D": "exports = { add };"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What is the correct way to add a click event listener to a button element with id 'myButton'?",
      "options": {
        "A": "document.getElementById('myButton').addEventListener('click', function() {});",
        "B": "document.getElementById('myButton').onClick = function() {};",
        "C": "document.getElementById('myButton').clickEvent(function() {});",
        "D": "document.findElement('myButton').on('click', function() {});"
      },
      "correct_answer": "A"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nconsole.log(typeof server);",
      "options": {
        "A": "string",
        "B": "function",
        "C": "object",
        "D": "undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "var x = 1;\nlet y = 2;\nconst z = 3;\n\n{\n  var x = 4;\n  let y = 5;\n  const z = 6;\n}\n\nconsole.log(x, y, z);",
      "options": {
        "A": "1 2 3",
        "B": "4 2 3",
        "C": "4 5 6",
        "D": "1 5 6"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const parent = document.createElement('div');\nconst child = document.createElement('button');\nparent.appendChild(child);\n\nparent.addEventListener('click', () => console.log('parent'));\nchild.addEventListener('click', () => console.log('child'));\n\n// When the button is clicked, what will be logged to console in order?",
      "options": {
        "A": "parent",
        "B": "child",
        "C": "child then parent",
        "D": "parent then child"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "In Node.js, which method is used to read the contents of a file synchronously?",
      "options": {
        "A": "fs.readFile()",
        "B": "fs.readFileSync()",
        "C": "fs.read()",
        "D": "fs.fileRead()"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const age = 17;\nconst message = age >= 18 ? 'Adult' : 'Minor';\nconsole.log(message);",
      "options": {
        "A": "Adult",
        "B": "Minor",
        "C": "undefined",
        "D": "true"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const name = 'Alice';\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting);",
      "options": {
        "A": "Hello, name!",
        "B": "Hello, Alice!",
        "C": "Hello, ${name}!",
        "D": "Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const { Readable } = require('stream');\nconst readable = new Readable({\n  read() {}\n});\n\nreadable.push('Hello, ');\nreadable.push('Streams!');\nreadable.push(null);\n\nreadable.on('data', chunk => {\n  console.log(chunk.toString());\n});\n\n// What will be logged to the console?",
      "options": {
        "A": "Hello, Streams!",
        "B": "Hello, then Streams! (on separate lines)",
        "C": "Buffer data",
        "D": "Nothing, as the stream needs to be piped"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "In Express.js, what is the correct order for a middleware to execute next() in relation to sending a response?",
      "code_example": "app.use((req, res, next) => {\n  // Middleware logic\n  if (authorized) {\n    next();\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n});",
      "options": {
        "A": "Call next() after sending the response",
        "B": "Call next() before sending the response",
        "C": "Call either next() OR send a response, never both",
        "D": "Always call both next() and send a response"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const EventEmitter = require('events');\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\n  console.log('Event fired!');\n});\n\nconsole.log('Before emission');\nmyEmitter.emit('event');\nconsole.log('After emission');",
      "options": {
        "A": "Before emission\nEvent fired!\nAfter emission",
        "B": "Event fired!\nBefore emission\nAfter emission",
        "C": "Before emission\nAfter emission\nEvent fired!",
        "D": "Before emission\nAfter emission"
      },
      "correct_answer": "A"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "console.log('Start');\n\nsetTimeout(() => {\n  console.log('Timeout');\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log('Promise');\n});\n\nconsole.log('End');",
      "options": {
        "A": "Start\nTimeout\nPromise\nEnd",
        "B": "Start\nEnd\nTimeout\nPromise",
        "C": "Start\nEnd\nPromise\nTimeout",
        "D": "Start\nPromise\nEnd\nTimeout"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "Which approach would help reduce redundant database queries in a Node.js application?",
      "options": {
        "A": "Running all queries in parallel using Promise.all()",
        "B": "Implementing a caching mechanism for frequently accessed data",
        "C": "Using synchronous database operations",
        "D": "Increasing the database connection pool size"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What is morgan in the context of Express.js applications?",
      "options": {
        "A": "A template engine",
        "B": "An authentication middleware",
        "C": "A session management library",
        "D": "A HTTP request logger middleware"
      },
      "correct_answer": "D"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function createMultiplier(factor) {\n  return function(number) {\n    return number * factor;\n  };\n}\n\nconst double = createMultiplier(2);\nconst triple = createMultiplier(3);\n\nconsole.log(double(5) + triple(10));",
      "options": {
        "A": "10",
        "B": "15",
        "C": "40",
        "D": "50"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function outer() {\n  let count = 0;\n  \n  function inner() {\n    count++;\n    console.log(count);\n  }\n  \n  return inner;\n}\n\nconst counter1 = outer();\nconst counter2 = outer();\n\ncounter1();\ncounter1();\ncounter2();",
      "options": {
        "A": "1 2 3",
        "B": "1 2 1",
        "C": "1 1 1",
        "D": "1 1 undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "Which is the correct implementation of rate limiting middleware in Express.js?",
      "options": {
        "A": "app.use(express.rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }))",
        "B": "app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }))",
        "C": "app.rateLimit({ windowMs: 15 * 60 * 1000, max: 100 })",
        "D": "express.rateLimit(app, { windowMs: 15 * 60 * 1000, max: 100 })"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following recursive function?",
      "code_example": "function countDown(n) {\n  if (n === 0) {\n    return 'Done!';\n  }\n  console.log(n);\n  return countDown(n - 1);\n}\n\nconsole.log(countDown(3));",
      "options": {
        "A": "3 2 1 Done!",
        "B": "Done!",
        "C": "3 2 1",
        "D": "3 2 1 0"
      },
      "correct_answer": "A"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "async function fetchData() {\n  try {\n    throw new Error('API error');\n    return 'Data';\n  } catch (error) {\n    return 'Error caught';\n  } finally {\n    console.log('Finally block');\n  }\n}\n\nfetchData().then(result => console.log(result));",
      "options": {
        "A": "Data\nFinally block",
        "B": "Error caught\nFinally block",
        "C": "Finally block\nError caught",
        "D": "Finally block\nData"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "When using Sequelize with Node.js, which of the following correctly creates a new record?",
      "code_example": "// Assuming we have a User model",
      "options": {
        "A": "User.create({ name: 'Alice', email: 'alice@example.com' })",
        "B": "User.save({ name: 'Alice', email: 'alice@example.com' })",
        "C": "User.insert({ name: 'Alice', email: 'alice@example.com' })",
        "D": "new User({ name: 'Alice', email: 'alice@example.com' }).save()"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const parent = { name: 'Parent' };\nconst child = Object.create(parent);\nchild.age = 25;\n\nconsole.log(child.name);\nconsole.log(child.hasOwnProperty('name'));\nconsole.log(child.hasOwnProperty('age'));",
      "options": {
        "A": "Parent\ntrue\ntrue",
        "B": "Parent\nfalse\ntrue",
        "C": "undefined\nfalse\ntrue",
        "D": "Parent\ntrue\nfalse"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "Which approach is a correct implementation of lazy loading for images in a web page?",
      "options": {
        "A": "<img src=\"image.jpg\" async>",
        "B": "<img defer src=\"image.jpg\">",
        "C": "<img src=\"image.jpg\" lazy>",
        "D": "<img data-src=\"image.jpg\" loading=\"lazy\">"
      },
      "correct_answer": "D"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function greet(greeting) {\n  return greeting + ' ' + this.name;\n}\n\nconst person = { name: 'Alice' };\n\nconsole.log(greet.call(person, 'Hello'));\nconsole.log(greet.apply(person, ['Hi']));\nconst boundGreet = greet.bind(person);\nconsole.log(boundGreet('Hey'));",
      "options": {
        "A": "Hello Alice\nHi Alice\nHey Alice",
        "B": "Hello undefined\nHi undefined\nHey Alice",
        "C": "Hello Alice\nHi Alice\nHey undefined",
        "D": "undefined\nundefined\nHey Alice"
      },
      "correct_answer": "A"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function job() {\n  return new Promise(resolve => setTimeout(() => resolve('result'), 2000));\n}\n\nasync function test() {\n  const result = await job();\n  console.log(result);\n  return 'complete';\n}\n\nconsole.log(test());",
      "options": {
        "A": "result\ncomplete",
        "B": "Promise { <pending> }\n(after 2 seconds) result",
        "C": "complete\nresult",
        "D": "Promise { <pending> }"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the primary reason for using the 'bcrypt' library instead of a simple hash function like SHA-256 for password storage?",
      "options": {
        "A": "bcrypt is faster and more efficient for large-scale applications",
        "B": "bcrypt includes a random salt and is deliberately slow to prevent brute force attacks",
        "C": "bcrypt produces shorter hash values, saving database space",
        "D": "bcrypt is the only encryption method that works with Node.js"
      },
      "correct_answer": "B",
      "code_example": "const bcrypt = require('bcrypt');\nconst saltRounds = 10;\n\nasync function hashPassword(plainPassword) {\n  try {\n    const hash = await bcrypt.hash(plainPassword, saltRounds);\n    return hash;\n  } catch (error) {\n    console.error('Error hashing password:', error);\n    throw error;\n  }\n}"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "When using PM2 for load balancing in Node.js, what does the following configuration do?",
      "options": {
        "A": "Starts 4 instances of app.js on a single CPU core",
        "B": "Starts the maximum number of instances based on available cores",
        "C": "Starts 4 instances of app.js across all available CPU cores",
        "D": "Starts a single instance that can handle 4 concurrent requests"
      },
      "correct_answer": "C",
      "code_example": "module.exports = {\n  apps: [{\n    name: 'my-api',\n    script: 'app.js',\n    instances: 4,\n    exec_mode: 'cluster',\n    watch: false,\n    max_memory_restart: '500M'\n  }]\n}"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Which statement is true about how JavaScript allocates memory?",
      "options": {
        "A": "JavaScript uses manual memory management, requiring developers to allocate and free memory explicitly",
        "B": "JavaScript uses reference counting as its primary garbage collection mechanism",
        "C": "JavaScript uses a mark-and-sweep algorithm to identify and collect unreachable objects",
        "D": "JavaScript allocates a fixed amount of memory at application startup that cannot be exceeded"
      },
      "correct_answer": "C"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following Node.js stream transformation code?",
      "options": {
        "A": "1,4,9,16,25",
        "B": "1-4-9-16-25",
        "C": "[1,4,9,16,25]",
        "D": "1\\n4\\n9\\n16\\n25"
      },
      "correct_answer": "D",
      "code_example": "const { Transform } = require('stream');\nconst { Readable } = require('stream');\n\nconst numbers = [1, 2, 3, 4, 5];\n\nconst readableStream = Readable.from(numbers);\n\nconst squareTransform = new Transform({\n  objectMode: true,\n  transform(chunk, encoding, callback) {\n    const squared = chunk * chunk;\n    callback(null, squared.toString() + '\\n');\n  }\n});\n\nreadableStream.pipe(squareTransform).pipe(process.stdout);"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "In the context of V8's hidden classes and inline caching, which code pattern will perform better?",
      "options": {
        "A": "Option A will perform better because it allows V8 to optimize object property access",
        "B": "Option B will perform better because dynamic property addition is faster",
        "C": "Both options will perform the same",
        "D": "Performance depends on the browser, not the code pattern"
      },
      "correct_answer": "A",
      "code_example": "// Option A\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nconst points = [];\nfor (let i = 0; i < 1000; i++) {\n  points.push(new Point(i, i * 2));\n}\n\n// Option B\nfunction createPoints() {\n  const points = [];\n  for (let i = 0; i < 1000; i++) {\n    const point = {};\n    point.x = i;\n    point.y = i * 2;\n    points.push(point);\n  }\n  return points;\n}"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What is the main purpose of Just-In-Time (JIT) Compilation in JavaScript engines like V8?",
      "options": {
        "A": "To translate JavaScript code directly into machine code before execution begins",
        "B": "To identify and optimize frequently executed code paths during runtime",
        "C": "To reduce memory usage by compressing the JavaScript source code",
        "D": "To ensure JavaScript code runs identically across all browsers"
      },
      "correct_answer": "B"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which of the following correctly describes a CSRF attack and its prevention?",
      "options": {
        "A": "An attack where malicious scripts are injected into trusted websites; prevented by input sanitization",
        "B": "An attack where attackers trick users into executing malicious code; prevented by Content Security Policy",
        "C": "An attack where unauthorized commands are transmitted from a user the website trusts; prevented by CSRF tokens",
        "D": "An attack where sensitive data is intercepted during transmission; prevented by HTTPS"
      },
      "correct_answer": "C",
      "code_example": "// Express.js CSRF Protection Setup\nconst express = require('express');\nconst csrf = require('csurf');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\n\n// Setup required middleware\napp.use(cookieParser());\napp.use(express.urlencoded({ extended: true }));\n\n// Setup CSRF protection\nconst csrfProtection = csrf({ cookie: true });\n\n// Apply to routes that need protection\napp.get('/form', csrfProtection, (req, res) => {\n  // Pass the token to the view\n  res.render('form', { csrfToken: req.csrfToken() });\n});\n\napp.post('/submit', csrfProtection, (req, res) => {\n  // Protected route - CSRF token is automatically validated\n  res.send('Form submitted successfully!');\n});\n\n// In the form.ejs template:\n// <input type=\"hidden\" name=\"_csrf\" value=\"<%= csrfToken %>\">"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "When reading a large file with Node.js streams, what will be the output of this code?",
      "options": {
        "A": "The entire file content as a single string",
        "B": "An error because the file size exceeds the buffer limit",
        "C": "The total number of bytes in the file",
        "D": "The number of chunks processed and total bytes read"
      },
      "correct_answer": "D",
      "code_example": "const fs = require('fs');\n\nlet chunkCount = 0;\nlet totalBytes = 0;\n\nconst readStream = fs.createReadStream('large-file.txt', {\n  highWaterMark: 64 * 1024 // 64KB chunks\n});\n\nreadStream.on('data', (chunk) => {\n  chunkCount++;\n  totalBytes += chunk.length;\n});\n\nreadStream.on('end', () => {\n  console.log(`Processed ${chunkCount} chunks totaling ${totalBytes} bytes`);\n});\n\nreadStream.on('error', (err) => {\n  console.error('Error reading file:', err);\n});"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What is the purpose of the following docker-compose.yml configuration?",
      "options": {
        "A": "Deploy a Node.js application with MongoDB, exposing only the app to the public internet",
        "B": "Create a development environment with hot-reloading for a Node.js application",
        "C": "Set up a production-ready Node.js cluster with load balancing",
        "D": "Configure a CI/CD pipeline for automated testing and deployment"
      },
      "correct_answer": "A",
      "code_example": "version: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - MONGO_URI=mongodb://db:27017/myapp\n    depends_on:\n      - db\n    restart: always\n  \n  db:\n    image: mongo:4.4\n    volumes:\n      - mongo-data:/data/db\n    expose:\n      - \"27017\"\n    restart: always\n\nvolumes:\n  mongo-data:"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What is the correct sequence of steps in the OAuth 2.0 Authorization Code flow?",
      "options": {
        "A": "Client requests user authorization → User authenticates → Authorization server issues token → Client accesses resources",
        "B": "Client requests user authorization → User authenticates → Authorization server issues code → Client exchanges code for token → Client accesses resources",
        "C": "User authenticates → Client receives token directly → Client accesses resources",
        "D": "Client requests token with client credentials → Authorization server issues token → Client accesses resources"
      },
      "correct_answer": "B",
      "code_example": "// Step 1: Redirect user to authorization endpoint\napp.get('/auth', (req, res) => {\n  const authUrl = new URL('https://oauth-provider.com/authorize');\n  authUrl.searchParams.append('client_id', 'YOUR_CLIENT_ID');\n  authUrl.searchParams.append('redirect_uri', 'https://your-app.com/callback');\n  authUrl.searchParams.append('response_type', 'code');\n  authUrl.searchParams.append('scope', 'read write');\n  authUrl.searchParams.append('state', crypto.randomBytes(16).toString('hex'));\n  \n  res.redirect(authUrl.toString());\n});\n\n// Step 2: Handle the callback with authorization code\napp.get('/callback', async (req, res) => {\n  const { code, state } = req.query;\n  \n  // Step 3: Exchange code for token\n  try {\n    const tokenResponse = await fetch('https://oauth-provider.com/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: new URLSearchParams({\n        grant_type: 'authorization_code',\n        code,\n        redirect_uri: 'https://your-app.com/callback',\n        client_id: 'YOUR_CLIENT_ID',\n        client_secret: 'YOUR_CLIENT_SECRET'\n      })\n    });\n    \n    const tokens = await tokenResponse.json();\n    \n    // Step 4: Use the access token to access protected resources\n    // Store tokens.access_token for future API requests\n    \n    res.redirect('/dashboard');\n  } catch (error) {\n    res.status(500).send('Authentication failed');\n  }\n});"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "Which approach is the most secure way to store JWT secrets in a Node.js application?",
      "options": {
        "A": "Hardcoded in the application code for easy access",
        "B": "Stored in the package.json file under a 'config' section",
        "C": "Stored in environment variables or a secure vault service",
        "D": "Saved in a local text file with restricted permissions"
      },
      "correct_answer": "C",
      "code_example": "// Insecure approach (Option A)\nconst jwtSecret = 'my-super-secret-key-1234';\n\n// Better approach (Option C)\nconst jwtSecret = process.env.JWT_SECRET;\nif (!jwtSecret) {\n  console.error('JWT_SECRET environment variable is not set!');\n  process.exit(1);\n}\n\n// Usage with jsonwebtoken library\nconst jwt = require('jsonwebtoken');\n\nfunction generateToken(userId) {\n  return jwt.sign({ sub: userId }, jwtSecret, { \n    expiresIn: '1h',\n    algorithm: 'HS256'\n  });\n}\n\nfunction verifyToken(token) {\n  try {\n    return jwt.verify(token, jwtSecret);\n  } catch (error) {\n    console.error('Token verification failed:', error.message);\n    return null;\n  }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What is the output of the following clustering code when executed?",
      "options": {
        "A": "Master has started on PID xxxx followed by 4 Worker started messages",
        "B": "Primary has started on PID xxxx followed by multiple Worker started messages based on CPU cores",
        "C": "Error: cluster.fork is not a function",
        "D": "The code will run but no output will be produced"
      },
      "correct_answer": "B",
      "code_example": "const cluster = require('cluster');\nconst os = require('os');\nconst numCPUs = os.cpus().length;\n\nif (cluster.isPrimary) {\n  console.log(`Primary has started on PID ${process.pid}`);\n  \n  // Fork workers based on CPU count\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n  \n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`Worker ${worker.process.pid} died`);\n    // Replace the dead worker\n    cluster.fork();\n  });\n} else {\n  // Workers can share any TCP connection\n  console.log(`Worker started on PID ${process.pid}`);\n  \n  // Your server code here\n  // e.g., require('./server');\n}"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which of the following best describes the purpose of Helm in Kubernetes deployments?",
      "options": {
        "A": "A tool for creating Docker images optimized for Kubernetes",
        "B": "A package manager for Kubernetes that helps define, install, and upgrade applications",
        "C": "A monitoring solution specifically designed for Node.js applications in Kubernetes",
        "D": "A CI/CD pipeline tool that integrates with GitHub Actions"
      },
      "correct_answer": "B"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What is the output of this Node.js parallel processing code using worker threads?",
      "options": {
        "A": "All tasks processed sequentially with total time approximately 4000ms",
        "B": "Error: The Worker constructor is not defined",
        "C": "Tasks processed in parallel with total time approximately 1000ms",
        "D": "Tasks attempted in parallel but blocked by the event loop, taking approximately 4000ms"
      },
      "correct_answer": "C",
      "code_example": "const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');\n\nif (isMainThread) {\n  const start = Date.now();\n  const tasks = [500, 1000, 700, 300]; // Times in ms for tasks\n  let completed = 0;\n  \n  // Process each task in a separate worker thread\n  tasks.forEach((taskTime, index) => {\n    const worker = new Worker(__filename, {\n      workerData: { taskTime, taskId: index + 1 }\n    });\n    \n    worker.on('message', (result) => {\n      console.log(`Task ${result.taskId} completed in ${result.processingTime}ms`);\n      completed++;\n      \n      if (completed === tasks.length) {\n        console.log(`All tasks completed! Total time: ${Date.now() - start}ms`);\n      }\n    });\n    \n    worker.on('error', (err) => {\n      console.error(`Worker error: ${err}`);\n    });\n  });\n} else {\n  // This code runs in worker threads\n  const { taskTime, taskId } = workerData;\n  \n  // Simulate CPU-intensive work\n  const start = Date.now();\n  const fibonacci = (n) => n <= 1 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n  \n  setTimeout(() => {\n    fibonacci(30); // Some CPU work\n    parentPort.postMessage({\n      taskId,\n      processingTime: Date.now() - start\n    });\n  }, taskTime);\n}"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What is the most secure method for encrypting sensitive data in a Node.js application?",
      "options": {
        "A": "Using Base64 encoding to obscure the data",
        "B": "Using a custom encryption algorithm developed in-house",
        "C": "Using Node.js crypto module with AES-256-GCM and properly managed keys",
        "D": "Using the 'encrypt' npm package with default settings"
      },
      "correct_answer": "C",
      "code_example": "const crypto = require('crypto');\n\n// Encryption function\nfunction encryptData(text, secretKey) {\n  // Generate a random initialization vector\n  const iv = crypto.randomBytes(16);\n  \n  // Create cipher using AES-256-GCM\n  const cipher = crypto.createCipheriv(\n    'aes-256-gcm', \n    crypto.scryptSync(secretKey, 'salt', 32), // Derive key from password\n    iv\n  );\n  \n  // Encrypt the data\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  \n  // Get the authentication tag\n  const authTag = cipher.getAuthTag().toString('hex');\n  \n  // Return IV, encrypted data, and auth tag\n  return {\n    iv: iv.toString('hex'),\n    encryptedData: encrypted,\n    authTag\n  };\n}\n\n// Decryption function\nfunction decryptData(encrypted, secretKey) {\n  const iv = Buffer.from(encrypted.iv, 'hex');\n  const authTag = Buffer.from(encrypted.authTag, 'hex');\n  \n  // Create decipher\n  const decipher = crypto.createDecipheriv(\n    'aes-256-gcm',\n    crypto.scryptSync(secretKey, 'salt', 32),\n    iv\n  );\n  \n  // Set auth tag for verification\n  decipher.setAuthTag(authTag);\n  \n  // Decrypt the data\n  let decrypted = decipher.update(encrypted.encryptedData, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  \n  return decrypted;\n}"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "When deploying a Node.js application, which platform would be most suitable for a small startup that needs auto-scaling, regional deployment, and serverless functions?",
      "options": {
        "A": "Heroku, because it offers the lowest cost for small applications",
        "B": "DigitalOcean, because it provides the most control over server configuration",
        "C": "Vercel, because it offers seamless deployment, serverless functions, and global CDN",
        "D": "AWS Elastic Beanstalk, because it has the most extensive documentation"
      },
      "correct_answer": "C"
    }
  ]
}
