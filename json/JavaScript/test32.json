{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1,2,3,4,5",
        "B": "5,4,3,2,1",
        "C": "[1,2,3,4,5]",
        "D": "[5,4,3,2,1]"
      },
      "correct_answer": "D",
      "code_example": "const arr = [1, 2, 3, 4, 5];\nconst reversed = arr.slice().reverse();\nconsole.log(reversed);"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which of the following correctly declares an array with three elements?",
      "options": {
        "A": "const arr = new Array(3);",
        "B": "const arr = [1, 2, 3];",
        "C": "const arr = Array.of(3);",
        "D": "const arr = Array(1, 2, 3);"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "10",
        "B": "5",
        "C": "undefined",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "function multiply(a, b = 2) {\n  return a * b;\n}\nconsole.log(multiply(5));"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What is the result of the following arithmetic operation?",
      "options": {
        "A": "5",
        "B": "1",
        "C": "2",
        "D": "0"
      },
      "correct_answer": "C",
      "code_example": "const result = 11 % 3;\nconsole.log(result);"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following bitwise operation?",
      "options": {
        "A": "3",
        "B": "14",
        "C": "15",
        "D": "12"
      },
      "correct_answer": "C",
      "code_example": "const result = 11 | 5;\nconsole.log(result);"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following template literal?",
      "options": {
        "A": "My name is Alice and I am 25 years old.",
        "B": "My name is ${name} and I am ${age} years old.",
        "C": "My name is Alice and I am ${age} years old.",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "const name = 'Alice';\nconst age = 25;\nconsole.log(`My name is ${name} and I am ${age} years old.`);"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "['a', 'b', 'c']",
        "B": "['name', 'age', 'city']",
        "C": "{name: 'Alice', age: 25, city: 'New York'}",
        "D": "3"
      },
      "correct_answer": "B",
      "code_example": "const person = {\n  name: 'Alice',\n  age: 25,\n  city: 'New York'\n};\nconsole.log(Object.keys(person));"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the result of the following code?",
      "options": {
        "A": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
        "B": "1, 2, 3, 4, 6, 7, 8, 9, 10",
        "C": "5",
        "D": "1, 2, 3, 4, 5"
      },
      "correct_answer": "B",
      "code_example": "for (let i = 1; i <= 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  console.log(i);\n}"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What is the primary purpose of a callback function in JavaScript?",
      "options": {
        "A": "To prevent code execution",
        "B": "To execute code asynchronously",
        "C": "To pass a function as an argument to another function",
        "D": "To create global variables"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "In a package.json file, which section defines the commands that can be run with 'npm run'?",
      "options": {
        "A": "commands",
        "B": "scripts",
        "C": "run",
        "D": "tasks"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{name: 'Alice', greet: function}",
        "B": "{name: 'Alice'}",
        "C": "function",
        "D": "Hello, Alice!"
      },
      "correct_answer": "D",
      "code_example": "const person = {\n  name: 'Alice',\n  greet: function() {\n    return `Hello, ${this.name}!`;\n  }\n};\nconsole.log(person.greet());"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What is the difference between function declarations and function expressions?",
      "options": {
        "A": "Function declarations are not hoisted, while function expressions are hoisted",
        "B": "Function declarations can be anonymous, while function expressions cannot",
        "C": "Function declarations are hoisted, while function expressions are not hoisted",
        "D": "There is no difference"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What is Node.js?",
      "options": {
        "A": "A frontend JavaScript framework",
        "B": "A JavaScript runtime environment that executes JavaScript code outside a web browser",
        "C": "A database management system",
        "D": "A CSS preprocessor"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "How does Node.js differ from browser JavaScript?",
      "options": {
        "A": "Node.js cannot use ES6 features",
        "B": "Node.js doesn't have a DOM or window object, but has access to the file system",
        "C": "Node.js can only run synchronous code",
        "D": "Node.js doesn't support JavaScript modules"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[2, 4, 6, 8, 10]",
        "B": "[1, 2, 3, 4, 5]",
        "C": "[1, 4, 9, 16, 25]",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled);"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1, 2, 3",
        "B": "{ '0': 1, '1': 2, '2': 3 }",
        "C": "[1, 2, 3]",
        "D": "3"
      },
      "correct_answer": "D",
      "code_example": "function sum() {\n  let total = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\nconsole.log(sum(1, 2));"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "Which statement best describes JavaScript's memory management?",
      "options": {
        "A": "JavaScript requires manual memory allocation and deallocation",
        "B": "JavaScript has automatic garbage collection that frees memory when objects are no longer referenced",
        "C": "JavaScript doesn't have memory management",
        "D": "JavaScript uses reference counting as its only garbage collection technique"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What is the primary purpose of debouncing a function?",
      "options": {
        "A": "To prevent a function from being called until after a certain amount of time has passed since its last invocation",
        "B": "To ensure a function is called exactly once",
        "C": "To limit a function to be called at most once per specified time period",
        "D": "To make a function execute faster"
      },
      "correct_answer": "A"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "In an Express.js application, what does the following code do?",
      "options": {
        "A": "Sets the content type to 'text/json'",
        "B": "Parses the request body as JSON",
        "C": "Sends a JSON response to the client",
        "D": "Creates a new JSON object"
      },
      "correct_answer": "C",
      "code_example": "app.get('/api/users', (req, res) => {\n  res.json({ users: ['Alice', 'Bob', 'Charlie'] });\n});"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the value of userId in the following Express.js route?",
      "options": {
        "A": "undefined",
        "B": "'123'",
        "C": "123",
        "D": "'/users/123'"
      },
      "correct_answer": "B",
      "code_example": "app.get('/users/:userId', (req, res) => {\n  const userId = req.params.userId;\n  // Assuming the URL is '/users/123'\n});"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What is the output of the following async/await code with error handling?",
      "options": {
        "A": "Error: Failed to fetch data",
        "B": "Data: {}",
        "C": "Error caught: Failed to fetch data",
        "D": "UnhandledPromiseRejectionWarning"
      },
      "correct_answer": "C",
      "code_example": "async function fetchData() {\n  try {\n    throw new Error('Failed to fetch data');\n  } catch (error) {\n    console.log('Error caught:', error.message);\n  }\n}\nfetchData();"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{ name: 'Global' }",
        "B": "{ name: 'Object' }",
        "C": "{ name: 'Alice' }",
        "D": "TypeError"
      },
      "correct_answer": "C",
      "code_example": "const person = {\n  name: 'Alice',\n  getName: function() {\n    return this;\n  }\n};\n\nconst getTheName = person.getName;\nconsole.log(getTheName.call(person));"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "In Express.js with multer, what does the following code do?",
      "options": {
        "A": "Uploads multiple files to a database",
        "B": "Parses multipart/form-data and handles file uploads",
        "C": "Creates a new file in the uploads directory",
        "D": "Validates file types before uploading"
      },
      "correct_answer": "B",
      "code_example": "const upload = multer({ dest: 'uploads/' });\napp.post('/profile', upload.single('avatar'), (req, res) => {\n  // Handle uploaded file\n});"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Window",
        "B": "{ name: 'Alice' }",
        "C": "undefined",
        "D": "Global object"
      },
      "correct_answer": "B",
      "code_example": "const person = {\n  name: 'Alice',\n  greet: () => {\n    return this;\n  },\n  sayHello: function() {\n    return this;\n  }\n};\nconsole.log(person.sayHello());"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code using optional chaining?",
      "options": {
        "A": "TypeError: Cannot read property 'address' of undefined",
        "B": "undefined",
        "C": "'New York'",
        "D": "null"
      },
      "correct_answer": "B",
      "code_example": "const user = {\n  name: 'Alice',\n  // No address property\n};\nconsole.log(user?.address?.city);"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What is implicit binding in JavaScript?",
      "options": {
        "A": "When 'this' is determined by how a function is called",
        "B": "When 'this' is explicitly set using call(), apply(), or bind()",
        "C": "When 'this' refers to the global object",
        "D": "When arrow functions capture 'this' from their surrounding scope"
      },
      "correct_answer": "A"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What is the purpose of the cors middleware in Express.js?",
      "options": {
        "A": "To enable database connections",
        "B": "To enable Cross-Origin Resource Sharing by adding appropriate headers",
        "C": "To compress HTTP responses",
        "D": "To validate incoming request data"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What makes JavaScript functions 'first-class'?",
      "options": {
        "A": "They are only available in modern browsers",
        "B": "They can be passed as arguments, returned from other functions, and assigned to variables",
        "C": "They can only be defined using the function keyword",
        "D": "They can access variables from their parent scope"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What is the purpose of the 'next' parameter in Express.js middleware?",
      "options": {
        "A": "To skip to the next middleware in the chain",
        "B": "To end the request-response cycle",
        "C": "To redirect to the next route",
        "D": "To return a response to the client"
      },
      "correct_answer": "A",
      "code_example": "app.use((req, res, next) => {\n  console.log('Time:', Date.now());\n  next();\n});"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What is the benefit of using streams to serve files in Node.js?",
      "options": {
        "A": "Files are served synchronously",
        "B": "Memory usage is reduced as the file is processed in chunks",
        "C": "All file operations are cached automatically",
        "D": "File transfers are always faster than other methods"
      },
      "correct_answer": "B",
      "code_example": "const fs = require('fs');\napp.get('/download', (req, res) => {\n  const fileStream = fs.createReadStream('large-file.pdf');\n  fileStream.pipe(res);\n});"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "TypeError",
        "D": "undefined"
      },
      "correct_answer": "A",
      "code_example": "const parent = { property: 'value' };\nconst child = Object.create(parent);\nconsole.log('property' in child);"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What is the difference between a Buffer and a Stream in Node.js?",
      "options": {
        "A": "Buffers are used for reading files, while Streams are used for writing files",
        "B": "Buffers store data in memory, while Streams process data in chunks",
        "C": "Buffers are asynchronous, while Streams are synchronous",
        "D": "Buffers are deprecated in modern Node.js"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the primary purpose of using streams when reading large files in Node.js?",
      "options": {
        "A": "To ensure files are read synchronously",
        "B": "To reduce memory consumption by processing data in chunks",
        "C": "To automatically encrypt file contents during transfer",
        "D": "To compress data before storing it in memory"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code using transform streams?",
      "options": {
        "A": "HELLO WORLD",
        "B": "hello world",
        "C": "Hello World",
        "D": "TypeError: stream.Transform is not a constructor"
      },
      "correct_answer": "A",
      "code_example": "const { Transform } = require('stream');\nconst upperCaseTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, chunk.toString().toUpperCase());\n  }\n});\n\nconst inputString = 'hello world';\nconst inputBuffer = Buffer.from(inputString);\n\nupperCaseTransform.write(inputBuffer);\nupperCaseTransform.on('data', data => {\n  console.log(data.toString());\n});"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Which of the following is NOT a recommended practice for securing JWT secrets in a Node.js application?",
      "options": {
        "A": "Using environment variables to store the secret",
        "B": "Rotating secrets periodically",
        "C": "Hardcoding the secret in the application code for quick access",
        "D": "Using a secure vault service like AWS Secrets Manager"
      },
      "correct_answer": "C"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following code related to custom event listeners?",
      "options": {
        "A": "Max listeners exceeded warning",
        "B": "Event 'data' triggered",
        "C": "Event 'data' triggered\nEvent 'data' triggered",
        "D": "TypeError: emitter.setMaxListeners is not a function"
      },
      "correct_answer": "C",
      "code_example": "const EventEmitter = require('events');\n\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(2);\n\nemitter.on('data', () => console.log(\"Event 'data' triggered\"));\nemitter.on('data', () => console.log(\"Event 'data' triggered\"));\n\nemitter.emit('data');"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "In the context of refresh tokens and access tokens, which statement is correct?",
      "options": {
        "A": "Access tokens should have longer expiration times than refresh tokens",
        "B": "Refresh tokens are used to authenticate each API request",
        "C": "Access tokens are typically stored in HTTP-only cookies for security",
        "D": "Refresh tokens are used to obtain new access tokens without re-authentication"
      },
      "correct_answer": "D"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating V8 engine optimizations?",
      "options": {
        "A": "10000",
        "B": "10001",
        "C": "TypeError: calculateSum is not a function",
        "D": "5000"
      },
      "correct_answer": "A",
      "code_example": "function calculateSum(n) {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n// Optimize the function by calling it multiple times with the same argument type\nfor (let i = 0; i < 100; i++) {\n  calculateSum(100);\n}\n\n// Now call with the intended argument\nconsole.log(calculateSum(10000));"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which of the following headers is specifically designed to prevent clickjacking attacks?",
      "options": {
        "A": "Content-Security-Policy",
        "B": "X-Frame-Options",
        "C": "X-Content-Type-Options",
        "D": "Referrer-Policy"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following clustering code in Node.js?",
      "options": {
        "A": "Worker 1 started\nWorker 2 started\nWorker 3 started\nWorker 4 started",
        "B": "Master process is running",
        "C": "Master process is running\nWorker 1 started",
        "D": "Error: cluster.fork() can only be called from the master process"
      },
      "correct_answer": "B",
      "code_example": "const cluster = require('cluster');\nconst os = require('os');\n\nif (cluster.isMaster) {\n  console.log('Master process is running');\n  // Comment out the actual forking for this example\n  // const numCPUs = os.cpus().length;\n  // for (let i = 0; i < numCPUs; i++) {\n  //   cluster.fork();\n  // }\n} else {\n  console.log(`Worker ${process.pid} started`);\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "When implementing rate limiting in an Express.js application, which configuration option for express-rate-limit defines the time window in milliseconds?",
      "options": {
        "A": "max",
        "B": "windowMs",
        "C": "timeLimit",
        "D": "duration"
      },
      "correct_answer": "B"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates hidden classes and inline caching in V8?",
      "options": {
        "A": "1000000",
        "B": "1000002",
        "C": "TypeError: unexpected property structure",
        "D": "0"
      },
      "correct_answer": "A",
      "code_example": "// Create objects with the same property structure to optimize hidden classes\nfunction createPoint(x, y) {\n  // Always initialize properties in the same order\n  return { x, y };\n}\n\nlet sum = 0;\n\n// Create 1 million objects with the same hidden class\nfor (let i = 0; i < 1000000; i++) {\n  const point = createPoint(i, i);\n  sum += point.x;\n}\n\nconsole.log(sum);"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "Which of the following is NOT a valid method for encrypting sensitive data in a Node.js application?",
      "options": {
        "A": "Using the crypto module with the AES-256-GCM algorithm",
        "B": "Using the built-in btoa() function for Base64 encoding as encryption",
        "C": "Using a third-party library like bcrypt for password hashing",
        "D": "Using the crypto module with RSA for asymmetric encryption"
      },
      "correct_answer": "B"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "When working with Cross-Site Scripting (XSS) vulnerabilities, which of the following is NOT a proper defense mechanism?",
      "options": {
        "A": "Implementing Content Security Policy (CSP)",
        "B": "Using HTML encoding for user-generated content",
        "C": "Validating input on the client-side only",
        "D": "Setting the HttpOnly flag on cookies"
      },
      "correct_answer": "C"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses streams to process a large file?",
      "options": {
        "A": "All file data converted to uppercase",
        "B": "Memory overflow error",
        "C": "4",
        "D": "Nothing (silent failure)"
      },
      "correct_answer": "C",
      "code_example": "const fs = require('fs');\nconst { Transform } = require('stream');\n\n// Create a transform stream that counts chunks\nconst countChunks = new Transform({\n  transform(chunk, encoding, callback) {\n    this.count = (this.count || 0) + 1;\n    // Pass the chunk through unchanged\n    callback(null, chunk);\n  },\n  flush(callback) {\n    // Output the final count when the stream ends\n    callback(null, Buffer.from(String(this.count || 0)));\n  }\n});\n\n// Simulate a readable stream with 4 chunks for testing\nconst mockReadable = fs.createReadStream(__filename);\n\n// Process the file\nmockReadable\n  .pipe(countChunks)\n  .on('data', data => {\n    console.log(data.toString());\n  });"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which of the following deployment platforms does NOT support automatic SSL certificate provisioning?",
      "options": {
        "A": "Vercel",
        "B": "Heroku",
        "C": "DigitalOcean App Platform",
        "D": "A basic DigitalOcean Droplet without additional configuration"
      },
      "correct_answer": "D"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements parallel processing in Node.js?",
      "options": {
        "A": "Results from process 1, 2, 3, and 4 in sequence",
        "B": "Results from processes in random order",
        "C": "Error: worker.postMessage is not a function",
        "D": "[1, 4, 9, 16]"
      },
      "correct_answer": "D",
      "code_example": "const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');\n\nif (isMainThread) {\n  // This code runs in the main thread\n  const numbers = [1, 2, 3, 4];\n  const results = [];\n  \n  // For this example, we'll simulate the worker thread response\n  for (const num of numbers) {\n    // Square the number (simulating worker result)\n    results.push(num * num);\n  }\n  \n  console.log(results);\n} else {\n  // This code would run in worker threads\n  // For demonstration, this part isn't actually executed\n  const result = workerData * workerData;\n  parentPort.postMessage(result);\n}"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "In the context of CI/CD pipelines for a Node.js application, which of the following statements is NOT correct?",
      "options": {
        "A": "Jenkins can be configured to run automated tests for each pull request",
        "B": "GitHub Actions can be used to automatically deploy code to production",
        "C": "CI/CD pipelines eliminate the need for code reviews by team members",
        "D": "GitLab CI can run linting tasks and check for code quality issues"
      },
      "correct_answer": "C"
    }
  ]
}
