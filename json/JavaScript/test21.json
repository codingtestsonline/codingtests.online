{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What is Node.js?",
      "options": {
        "A": "A JavaScript framework for building mobile applications",
        "B": "A runtime environment that allows JavaScript to be run outside the browser",
        "C": "A database management system optimized for JavaScript objects",
        "D": "A JavaScript library for manipulating HTML documents"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1, 2, 4, 5",
        "B": "1, 3, 4, 5",
        "C": "1, 4, 5",
        "D": "1, 2, 3, 4, 5"
      },
      "correct_answer": "C",
      "code_example": "for (let i = 1; i <= 5; i++) {\n  if (i === 2 || i === 3) {\n    continue;\n  }\n  console.log(i);\n}"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "Which of the following is NOT a primitive type in JavaScript?",
      "options": {
        "A": "symbol",
        "B": "object",
        "C": "bigint",
        "D": "null"
      },
      "correct_answer": "B"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What is the primary purpose of package.json in a Node.js project?",
      "options": {
        "A": "To store JavaScript code snippets for reuse",
        "B": "To manage the database schema for the application",
        "C": "To manage project dependencies and metadata",
        "D": "To configure how the browser renders the application"
      },
      "correct_answer": "C"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "16",
        "B": "8",
        "C": "4",
        "D": "2"
      },
      "correct_answer": "A",
      "code_example": "console.log(2 ** 4);"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[1, 2, 3, 4, 5, 6]",
        "B": "[4, 5, 6, 1, 2, 3]",
        "C": "[1, 2, 3, [4, 5, 6]]",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined);"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[\"banana\", \"orange\", \"apple\"]",
        "B": "[\"apple\", \"banana\", \"orange\"]",
        "C": "[\"orange\", \"banana\", \"apple\"]",
        "D": "\"apple,banana,orange\""
      },
      "correct_answer": "B",
      "code_example": "const fruits = [\"apple\", \"banana\", \"orange\"];\nfruits.sort();\nconsole.log(fruits);"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Hello, Guest!",
        "B": "Hello, !",
        "C": "Hello, undefined!",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "function greet(name = \"Guest\") {\n  return `Hello, ${name}!`;\n}\nconsole.log(greet());"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1, 2, 3",
        "B": "0, 1, 2",
        "C": "apple, banana, orange",
        "D": "0: apple, 1: banana, 2: orange"
      },
      "correct_answer": "D",
      "code_example": "const fruits = [\"apple\", \"banana\", \"orange\"];\nfruits.forEach((item, index) => {\n  console.log(`${index}: ${item}`);\n});"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which is the correct way to export a function in a Node.js module?",
      "options": {
        "A": "export default function myFunction() {}",
        "B": "module.exports = function myFunction() {}",
        "C": "exports.default = function myFunction() {}",
        "D": "node.export = function myFunction() {}"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What is the difference between function declarations and function expressions?",
      "options": {
        "A": "Function declarations are not hoisted, but function expressions are",
        "B": "Function declarations can be called before they're defined, but function expressions cannot",
        "C": "Function declarations can only be used as methods, but function expressions can be standalone",
        "D": "There is no difference; the terms are interchangeable"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1",
        "B": "3",
        "C": "2",
        "D": "0"
      },
      "correct_answer": "A",
      "code_example": "console.log(5 & 3);"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "\"adult\"",
        "B": "\"minor\"",
        "C": "undefined",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "const age = 25;\nconst status = age >= 18 ? \"adult\" : \"minor\";\nconsole.log(status);"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{ name: 'John', age: 30 }",
        "B": "{ name: 'John', age: 30, greet: [Function] }",
        "C": "John is 30 years old",
        "D": "Error"
      },
      "correct_answer": "C",
      "code_example": "const person = {\n  name: 'John',\n  age: 30,\n  greet() {\n    return `${this.name} is ${this.age} years old`;\n  }\n};\nconsole.log(person.greet());"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "John, 30",
        "B": "{name: 'John'}, {age: 30}",
        "C": "John, undefined",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "const person = { name: 'John', age: 30 };\nconst { name, age } = person;\nconsole.log(name, age);"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "hello",
        "D": "undefined"
      },
      "correct_answer": "C",
      "code_example": "const value = '' || 'hello' || 'world';\nconsole.log(value);"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "Which of the following is NOT a common method of implementing authentication in a Node.js application?",
      "options": {
        "A": "JSON Web Tokens (JWT)",
        "B": "OAuth 2.0",
        "C": "SQL Triggers",
        "D": "Session-based authentication"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What is the primary purpose of using the 'morgan' middleware in an Express.js application?",
      "options": {
        "A": "To compress HTTP responses",
        "B": "To log HTTP requests",
        "C": "To parse request bodies",
        "D": "To handle file uploads"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "Which of the following is NOT a valid Sequelize method for querying data?",
      "options": {
        "A": "Model.findOne()",
        "B": "Model.findById()",
        "C": "Model.findByPk()",
        "D": "Model.findAll()"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What is the purpose of the express-validator middleware?",
      "options": {
        "A": "To validate JWT tokens",
        "B": "To validate database schemas",
        "C": "To validate user input from requests",
        "D": "To validate SSL certificates"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "10, 10, 10",
        "B": "10, 20, 30",
        "C": "undefined, undefined, undefined",
        "D": "10, 11, 12"
      },
      "correct_answer": "A",
      "code_example": "function createCounter() {\n  let count = 10;\n  return function() {\n    return count;\n  };\n}\n\nconst counter1 = createCounter();\nconst counter2 = createCounter();\nconsole.log(counter1());\ncount = 20;\nconsole.log(counter1());\ncount = 30;\nconsole.log(counter1());"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What is the primary purpose of the 'multer' middleware in an Express.js application?",
      "options": {
        "A": "To handle form submissions",
        "B": "To handle file uploads",
        "C": "To validate request parameters",
        "D": "To compress response data"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "Which of the following techniques helps prevent SQL injection in a Node.js application?",
      "options": {
        "A": "Using parameterized queries with prepared statements",
        "B": "Implementing JWT authentication",
        "C": "Setting HTTP security headers",
        "D": "Using HTTPS instead of HTTP"
      },
      "correct_answer": "A"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Hello World",
        "B": "Function",
        "C": "undefined",
        "D": "Error"
      },
      "correct_answer": "B",
      "code_example": "function greet(name) {\n  return `Hello ${name}`;\n}\n\nconst sayHello = greet;\nconsole.log(typeof sayHello);"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What is the main purpose of Helmet.js in an Express.js application?",
      "options": {
        "A": "To protect against brute force attacks",
        "B": "To protect against SQL injection",
        "C": "To set various HTTP headers for security",
        "D": "To encrypt sensitive data in transit"
      },
      "correct_answer": "C"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What is the primary purpose of implementing rate limiting in a web API?",
      "options": {
        "A": "To reduce bandwidth consumption",
        "B": "To prevent abuse and DoS attacks",
        "C": "To improve database performance",
        "D": "To encrypt sensitive data"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1, 4, 3, 2",
        "B": "1, 2, 3, 4",
        "C": "1, 3, 4, 2",
        "D": "1, 3, 2, 4"
      },
      "correct_answer": "C",
      "code_example": "console.log(1);\nsetTimeout(() => console.log(2), 0);\nPromise.resolve().then(() => console.log(3));\nconsole.log(4);"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What is a pure function in JavaScript?",
      "options": {
        "A": "A function that only uses arrow syntax",
        "B": "A function that doesn't modify variables outside its scope and always returns the same output for the same input",
        "C": "A function that only uses primitive data types",
        "D": "A function that doesn't depend on any external libraries"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "Which of the following is a best practice for API versioning in a RESTful API?",
      "options": {
        "A": "Including the version in the URL path (e.g., /api/v1/resources)",
        "B": "Using different domain names for each version",
        "C": "Encoding the version in the response body",
        "D": "Using different HTTP methods for each version"
      },
      "correct_answer": "A"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{ name: 'Jane', age: 25 }",
        "B": "{ name: 'Jane', age: 25, _id: '123' }",
        "C": "Error: document not found",
        "D": "null"
      },
      "correct_answer": "A",
      "code_example": "// Assuming a MongoDB-like API\nconst updateResult = {\n  matchedCount: 1,\n  modifiedCount: 1,\n  upsertedCount: 0,\n  upsertedId: null,\n  acknowledged: true,\n  result: { n: 1, nModified: 1, ok: 1 }\n};\n\nconst updatedDoc = { name: 'Jane', age: 25 };\n\nfunction updateOneAndReturnDoc(id, data) {\n  // Simulating updateOne() which only returns the update result, not the document\n  return updatedDoc;\n}\n\nconsole.log(updateOneAndReturnDoc('123', { age: 25 }));"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "\"user,admin\"",
        "D": "Error"
      },
      "correct_answer": "B",
      "code_example": "const userRole = Symbol('role');\nconst adminRole = Symbol('role');\n\nconst user = {\n  [userRole]: 'user'\n};\n\nconst admin = {\n  [adminRole]: 'admin'\n};\n\nconsole.log(user[userRole] === admin[adminRole]);"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "['Success 1', 'Success 2', 'Success 3']",
        "B": "['Success 1', 'Error: Failed 2', 'Success 3']",
        "C": "Error: Failed 2",
        "D": "Error: Something went wrong"
      },
      "correct_answer": "C",
      "code_example": "const promise1 = Promise.resolve('Success 1');\nconst promise2 = Promise.reject(new Error('Failed 2'));\nconst promise3 = Promise.resolve('Success 3');\n\nPromise.all([promise1, promise2, promise3])\n  .then(results => console.log(results))\n  .catch(error => console.log(error.message));"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which statement about Cross-Site Request Forgery (CSRF) protection in Express.js applications is correct?",
      "options": {
        "A": "CSRF tokens should be stored in localStorage for better performance",
        "B": "CSRF protection is only necessary for GET requests, not POST requests",
        "C": "The 'csurf' middleware generates unique tokens that must be included in form submissions",
        "D": "CSRF attacks can be completely prevented by using HTTPS"
      },
      "correct_answer": "C"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses bcrypt for password hashing?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "Error: Invalid salt version",
        "D": "Error: bcrypt.compare is not a function"
      },
      "correct_answer": "B",
      "code_example": "const bcrypt = require('bcrypt');\n\nasync function checkPassword() {\n  const password = 'secret123';\n  const hash = await bcrypt.hash(password, 10);\n  \n  // Someone trying to login with wrong password\n  const loginAttempt = 'Secret123';\n  \n  const result = await bcrypt.compare(loginAttempt, hash);\n  console.log(result);\n}\n\ncheckPassword();"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses worker threads?",
      "options": {
        "A": "Main thread: 1, 2, 3, 4, 5",
        "B": "Worker: Received 42",
        "C": "Main thread: 1, 2, 3, 4, 5 followed by Worker: Received 42",
        "D": "Error: postMessage is not a function"
      },
      "correct_answer": "B",
      "code_example": "const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');\n\nif (isMainThread) {\n  const worker = new Worker(__filename, { workerData: 42 });\n  \n  worker.on('message', (msg) => {\n    console.log(`Worker: ${msg}`);\n  });\n  \n  for (let i = 1; i <= 5; i++) {\n    setTimeout(() => {\n      console.log(`Main thread: ${i}`);\n    }, 100);\n  }\n} else {\n  parentPort.postMessage(`Received ${workerData}`);\n}"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be printed to the console when this Node.js stream code is executed?",
      "options": {
        "A": "Chunk received: hello world",
        "B": "Chunk received: hello, Chunk received: world",
        "C": "Buffer data received",
        "D": "Error: setEncoding is not a function"
      },
      "correct_answer": "A",
      "code_example": "const { Readable } = require('stream');\n\nconst myStream = new Readable({\n  read() {}\n});\n\nmyStream.push('hello world');\nmyStream.push(null); // End the stream\n\nmyStream.setEncoding('utf8');\nmyStream.on('data', (chunk) => {\n  console.log(`Chunk received: ${chunk}`);\n});"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What is the purpose of the following code using process.on('unhandledRejection')?",
      "options": {
        "A": "It prevents all promise rejections from occurring",
        "B": "It automatically retries failed promises",
        "C": "It logs unhandled promise rejections that would otherwise crash the application",
        "D": "It converts unhandled promise rejections into resolved promises"
      },
      "correct_answer": "C",
      "code_example": "process.on('unhandledRejection', (reason, promise) => {\n  console.log('Unhandled Rejection at:', promise);\n  console.log('Reason:', reason);\n  // Not calling process.exit() here\n});\n\nfunction someAsyncFunction() {\n  return new Promise((resolve, reject) => {\n    reject(new Error('Something went wrong'));\n  });\n}\n\n// Notice we're not catching the rejection\nsomeAsyncFunction();"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "In the context of OAuth 2.0, which flow is most appropriate for a single-page JavaScript application running in a browser that needs to access a protected API?",
      "options": {
        "A": "Authorization Code flow with PKCE",
        "B": "Client Credentials flow",
        "C": "Resource Owner Password Credentials flow",
        "D": "Implicit flow"
      },
      "correct_answer": "A"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "When working with Helm for Kubernetes deployments, what is the correct way to override a specific value in a chart during installation?",
      "options": {
        "A": "helm install --value key=newValue mychart",
        "B": "helm install --set key=newValue mychart",
        "C": "helm install --override key=newValue mychart",
        "D": "helm install --config key=newValue mychart"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of this Node.js code that simulates managing Kubernetes pods through the Kubernetes API?",
      "options": {
        "A": "Pod created: my-app",
        "B": "Waiting for pod to be ready... Pod ready: my-app (Status: Running)",
        "C": "Error: Invalid pod specification",
        "D": "Pod created: my-app, followed by Pod deleted: my-app"
      },
      "correct_answer": "B",
      "code_example": "// Simplified simulation of Kubernetes API client\nclass KubernetesClient {\n  constructor() {\n    this.pods = new Map();\n  }\n  \n  createPod(name, spec) {\n    this.pods.set(name, { spec, status: 'Pending' });\n    return Promise.resolve({ name });\n  }\n  \n  getPodStatus(name) {\n    return Promise.resolve({ \n      name, \n      status: this.pods.get(name).status \n    });\n  }\n  \n  // Simulate pod becoming ready after a delay\n  _simulatePodReady(name) {\n    setTimeout(() => {\n      const pod = this.pods.get(name);\n      if (pod) pod.status = 'Running';\n    }, 100);\n  }\n}\n\nasync function deployPod() {\n  const k8s = new KubernetesClient();\n  \n  const podSpec = {\n    containers: [{ image: 'nginx:latest' }]\n  };\n  \n  const { name } = await k8s.createPod('my-app', podSpec);\n  console.log(`Pod created: ${name}`);\n  \n  k8s._simulatePodReady(name);\n  \n  console.log('Waiting for pod to be ready...');\n  setTimeout(async () => {\n    const status = await k8s.getPodStatus(name);\n    console.log(`Pod ready: ${status.name} (Status: ${status.status})`);\n  }, 200);\n}\n\ndeployPod();"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What is the primary security advantage of using refresh tokens alongside short-lived access tokens in a JWT-based authentication system?",
      "options": {
        "A": "Refresh tokens can be validated without a database lookup",
        "B": "Even if an access token is stolen, it will expire quickly, limiting the attack window",
        "C": "Refresh tokens make client-side storage more efficient",
        "D": "Refresh tokens can be used across multiple applications with a single sign-on"
      },
      "correct_answer": "B"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements rate limiting in Express.js?",
      "options": {
        "A": "Rate limit exceeded",
        "B": "Request 1 processed, Request 2 processed, Request 3 processed",
        "C": "Request 1 processed, Request 2 processed, then 'Rate limit exceeded'",
        "D": "Error: rateLimit is not a function"
      },
      "correct_answer": "C",
      "code_example": "const express = require('express');\nconst rateLimit = require('express-rate-limit');\n\nconst app = express();\n\n// Simplified version for testing\nfunction mockRateLimit(options) {\n  let requestCount = 0;\n  return (req, res, next) => {\n    requestCount++;\n    if (requestCount > options.max) {\n      return res.status(429).send('Rate limit exceeded');\n    }\n    next();\n  };\n}\n\nconst limiter = mockRateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 2, // limit each IP to 2 requests per windowMs\n});\n\napp.use(limiter);\n\napp.get('/', (req, res) => {\n  res.send('Request processed');\n});\n\n// Simulate three requests\nconst mockReq = {};\nconst mockRes1 = {\n  status: function(code) { \n    return this; \n  },\n  send: function(message) { \n    console.log('Request 1 processed'); \n  }\n};\nconst mockRes2 = {\n  status: function(code) { \n    return this; \n  },\n  send: function(message) { \n    console.log('Request 2 processed'); \n  }\n};\nconst mockRes3 = {\n  status: function(code) { \n    return this; \n  },\n  send: function(message) { \n    console.log(message); \n  }\n};\n\nconst mockNext = () => {};\n\n// Process requests\nconst handler = app._router.stack.find(layer => layer.name === 'mockRateLimit').handle;\nhandler(mockReq, mockRes1, mockNext);\nhandler(mockReq, mockRes2, mockNext);\nhandler(mockReq, mockRes3, mockNext);"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "When using Prometheus with Node.js applications, which of the following metrics types would be most appropriate for measuring the duration of HTTP requests?",
      "options": {
        "A": "Counter",
        "B": "Gauge",
        "C": "Histogram",
        "D": "Summary"
      },
      "correct_answer": "C"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be logged to the console when this winston logger code is executed?",
      "options": {
        "A": "info: User logged in",
        "B": "User logged in",
        "C": "info: User logged in {\"userId\":123}",
        "D": "Error: Invalid winston transport configuration"
      },
      "correct_answer": "C",
      "code_example": "const winston = require('winston');\n\n// Mock winston for testing\nconst mockWinston = {\n  format: {\n    combine: (...args) => args,\n    timestamp: () => 'timestamp',\n    json: () => 'json',\n    printf: (template) => 'printf'\n  },\n  transports: {\n    Console: function() {}\n  },\n  createLogger: function(config) {\n    return {\n      info: function(message, meta) {\n        console.log(`info: ${message} ${JSON.stringify(meta)}`);\n      },\n      error: function(message, meta) {\n        console.log(`error: ${message} ${JSON.stringify(meta)}`);\n      }\n    };\n  }\n};\n\n// Create a logger with winston's API\nconst logger = mockWinston.createLogger({\n  level: 'info',\n  format: mockWinston.format.combine(\n    mockWinston.format.timestamp(),\n    mockWinston.format.json()\n  ),\n  transports: [\n    new mockWinston.transports.Console()\n  ]\n});\n\n// Log a message with metadata\nlogger.info('User logged in', { userId: 123 });"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which of the following docker-compose.yml configurations will correctly set up a Node.js application with MongoDB, ensuring the application starts only after MongoDB is ready?",
      "options": {
        "A": "version: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - MONGO_URL=mongodb://mongo:27017/myapp\n    networks:\n      - app-network\n  mongo:\n    image: mongo:latest\n    ports:\n      - \"27017:27017\"\n    networks:\n      - app-network\nnetworks:\n  app-network:",
        "B": "version: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - MONGO_URL=mongodb://mongo:27017/myapp\n    networks:\n      - app-network\n    depends_on:\n      - mongo\n  mongo:\n    image: mongo:latest\n    ports:\n      - \"27017:27017\"\n    networks:\n      - app-network\nnetworks:\n  app-network:",
        "C": "version: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - MONGO_URL=mongodb://mongo:27017/myapp\n    networks:\n      - app-network\n    depends_on:\n      mongo:\n        condition: service_healthy\n  mongo:\n    image: mongo:latest\n    ports:\n      - \"27017:27017\"\n    networks:\n      - app-network\n    healthcheck:\n      test: [\"CMD\", \"mongo\", \"--eval\", \"db.adminCommand('ping')\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nnetworks:\n  app-network:",
        "D": "version: '3'\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    environment:\n      - MONGO_URL=mongodb://mongo:27017/myapp\n    networks:\n      - app-network\n    wait_for:\n      - mongo:27017\n  mongo:\n    image: mongo:latest\n    ports:\n      - \"27017:27017\"\n    networks:\n      - app-network\nnetworks:\n  app-network:"
      },
      "correct_answer": "C"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which statement correctly describes a difference between WebSockets, REST, and GraphQL?",
      "options": {
        "A": "WebSockets maintain a persistent connection while REST and GraphQL are stateless request-response based",
        "B": "GraphQL requires WebSockets for real-time data, while REST cannot handle real-time updates",
        "C": "REST supports bidirectional communication similar to WebSockets, but GraphQL does not",
        "D": "WebSockets have higher security by default compared to REST and GraphQL"
      },
      "correct_answer": "A"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the memory usage pattern when this code is executed?",
      "options": {
        "A": "Memory usage will remain stable",
        "B": "Memory usage will gradually increase until the process crashes",
        "C": "Memory usage will increase initially and then decrease when garbage collection occurs",
        "D": "Memory usage will fluctuate randomly"
      },
      "correct_answer": "B",
      "code_example": "function createLeak() {\n  const leakyArray = [];\n  \n  function generateData() {\n    const data = new Array(1000000).fill('x');\n    leakyArray.push(data);\n    \n    console.log(`Current array length: ${leakyArray.length}`);\n    setTimeout(generateData, 100);\n  }\n  \n  generateData();\n}\n\ncreateLeak();"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What is the output of this code that demonstrates CORS vulnerability prevention?",
      "options": {
        "A": "CORS error: Origin not allowed",
        "B": "API response successful",
        "C": "Access-Control-Allow-Origin header missing",
        "D": "Error: CORS headers not properly configured"
      },
      "correct_answer": "A",
      "code_example": "// Simplified CORS middleware simulation\nfunction corsMiddleware(allowedOrigins) {\n  return function(req, res, next) {\n    const origin = req.headers.origin;\n    \n    if (allowedOrigins.includes(origin)) {\n      res.header('Access-Control-Allow-Origin', origin);\n      res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');\n      res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n      return next();\n    } else {\n      return res.status(403).json({ error: 'CORS error: Origin not allowed' });\n    }\n  };\n}\n\n// Mock Express app\nconst app = {\n  use: function(middleware) {\n    this.middleware = middleware;\n    return this;\n  },\n  get: function(path, handler) {\n    this.getHandler = handler;\n    return this;\n  }\n};\n\n// Setup the app with CORS protection\napp.use(corsMiddleware(['https://example.com']));\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'API response successful' });\n});\n\n// Simulate a request from an unauthorized origin\nconst mockReq = {\n  headers: {\n    origin: 'https://malicious-site.com'\n  }\n};\n\nconst mockRes = {\n  header: function() { return this; },\n  status: function() { return this; },\n  json: function(data) { console.log(data.error); }\n};\n\nconst mockNext = function() {\n  console.log('Middleware passed');\n};\n\n// Process the request through the CORS middleware\napp.middleware(mockReq, mockRes, mockNext);"
    }
  ]
}
