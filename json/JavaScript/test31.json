{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "5",
        "B": "undefined",
        "C": "ReferenceError",
        "D": "NaN"
      },
      "correct_answer": "C",
      "code_example": "console.log(x);\nlet x = 5;"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What does the following code output?",
      "options": {
        "A": "[1, 2, 3, 4, 5]",
        "B": "[5, 4, 3, 2, 1]",
        "C": "[1, 2, 3]",
        "D": "[3, 2, 1]"
      },
      "correct_answer": "A",
      "code_example": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined);"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What is the difference between '==' and '===' operators in JavaScript?",
      "options": {
        "A": "There is no difference, they are exactly the same",
        "B": "'==' compares values only, while '===' compares both values and types",
        "C": "'===' compares values only, while '==' compares both values and types",
        "D": "'==' is used for assignment, while '===' is used for comparison"
      },
      "correct_answer": "B"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "undefined",
        "B": "function",
        "C": "Hello World!",
        "D": "TypeError"
      },
      "correct_answer": "B",
      "code_example": "const greet = () => {\n  console.log('Hello World!');\n};\nconsole.log(typeof greet);"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be logged to the console?",
      "options": {
        "A": "1, 2, 3",
        "B": "1, undefined, undefined",
        "C": "1, 2, undefined",
        "D": "undefined, undefined, undefined"
      },
      "correct_answer": "A",
      "code_example": "function logNumbers(a, b = 2, c = 3) {\n  console.log(a, b, c);\n}\nlogNumbers(1);"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What is the primary difference between Node.js and browser JavaScript?",
      "options": {
        "A": "Node.js doesn't support JavaScript objects",
        "B": "Node.js uses a different syntax than browser JavaScript",
        "C": "Node.js provides a runtime environment for executing JavaScript outside the browser",
        "D": "Node.js only works with TypeScript, not JavaScript"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "12, 12",
        "B": "12, 24",
        "C": "24, 12",
        "D": "24, 24"
      },
      "correct_answer": "B",
      "code_example": "let a = 12;\nlet b = a;\na = 24;\nconsole.log(a, b);"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will this code output?",
      "options": {
        "A": "1, 2, 3",
        "B": "3, 2, 1",
        "C": "Error: Break statement must be inside a loop",
        "D": "Nothing, it will run without output"
      },
      "correct_answer": "A",
      "code_example": "for (let i = 1; i <= 5; i++) {\n  console.log(i);\n  if (i === 3) {\n    break;\n  }\n}"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will the following code output?",
      "options": {
        "A": "1, 3, 5",
        "B": "1, 2, 3, 4, 5",
        "C": "2, 4",
        "D": "1, 2, 3, 4"
      },
      "correct_answer": "A",
      "code_example": "for (let i = 1; i <= 5; i++) {\n  if (i % 2 === 0) {\n    continue;\n  }\n  console.log(i);\n}"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be printed to the console?",
      "options": {
        "A": "10",
        "B": "undefined",
        "C": "ReferenceError",
        "D": "null"
      },
      "correct_answer": "C",
      "code_example": "function test() {\n  var x = 10;\n}\ntest();\nconsole.log(x);"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What is the purpose of the 'require()' function in Node.js?",
      "options": {
        "A": "To include external libraries or modules in your application",
        "B": "To create new JavaScript functions",
        "C": "To require users to input data",
        "D": "To require specific browser versions"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "10",
        "B": "100",
        "C": "undefined",
        "D": "TypeError"
      },
      "correct_answer": "A",
      "code_example": "const numbers = [10, 20, 30, 40, 50];\nconst foundNumber = numbers.find(num => num < 15);\nconsole.log(foundNumber);"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What is the primary purpose of Node.js?",
      "options": {
        "A": "To style web pages, similar to CSS",
        "B": "To create and manage databases directly",
        "C": "To run JavaScript on the server-side outside of a browser environment",
        "D": "To replace HTML for creating web page structures"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will the following code output?",
      "options": {
        "A": "\"Hello, World!\"",
        "B": "\"Hello World!\"",
        "C": "\"Hello, John!\"",
        "D": "\"Hello John!\""
      },
      "correct_answer": "C",
      "code_example": "const name = 'John';\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting);"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What does the following code return?",
      "options": {
        "A": "[2, 4, 6, 8, 10]",
        "B": "[1, 4, 9, 16, 25]",
        "C": "[1, 2, 3, 4, 5]",
        "D": "[undefined, undefined, undefined, undefined, undefined]"
      },
      "correct_answer": "A",
      "code_example": "const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled);"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "Which statement about callbacks in JavaScript is correct?",
      "options": {
        "A": "Callbacks can only be used with setTimeout()",
        "B": "Callbacks are functions passed as arguments to other functions to be executed later",
        "C": "Callbacks always cause memory leaks",
        "D": "Callbacks are a feature exclusive to ES6 and later"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{ value: 10 }",
        "B": "{ value: 20 }",
        "C": "TypeError",
        "D": "{ value: 10, value: 20 }"
      },
      "correct_answer": "B",
      "code_example": "const obj = {};\nconst sym1 = Symbol('value');\nconst sym2 = Symbol('value');\n\nobj[sym1] = 10;\nobj[sym2] = 20;\n\nconsole.log({ value: obj[sym2] });"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will this async/await code log to the console?",
      "options": {
        "A": "\"Success: Data loaded\" followed by \"Finally done\"",
        "B": "\"Error: Failed to load data\" followed by \"Finally done\"",
        "C": "\"Finally done\" followed by \"Success: Data loaded\"",
        "D": "\"Finally done\" followed by \"Error: Failed to load data\""
      },
      "correct_answer": "B",
      "code_example": "async function fetchData() {\n  try {\n    const response = await Promise.reject('Failed to load data');\n    console.log('Success: Data loaded');\n  } catch (error) {\n    console.log(`Error: ${error}`);\n  } finally {\n    console.log('Finally done');\n  }\n}\n\nfetchData();"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "Which of the following is NOT a way to prevent SQL injection in a Node.js application using MySQL?",
      "options": {
        "A": "Using prepared statements with parameterized queries",
        "B": "Escaping user inputs using the MySQL.escape() function",
        "C": "Using an ORM like Sequelize with proper parameter binding",
        "D": "Directly concatenating user input into SQL queries but validating input types"
      },
      "correct_answer": "D"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be logged to the console in the following code?",
      "options": {
        "A": "1, 4, 2, 3",
        "B": "1, 2, 3, 4",
        "C": "1, 2, 4, 3",
        "D": "1, 4, 3, 2"
      },
      "correct_answer": "C",
      "code_example": "console.log(1);\n\nsetTimeout(() => {\n  console.log(4);\n}, 0);\n\nPromise.resolve().then(() => {\n  console.log(2);\n}).then(() => {\n  console.log(3);\n});"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "Which of the following is the most efficient way to process large files in Node.js?",
      "options": {
        "A": "Using fs.readFile() to load the entire file into memory",
        "B": "Using fs.createReadStream() to process the file in chunks",
        "C": "Loading file contents directly into a database",
        "D": "Using synchronous fs.readFileSync() for better performance"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What does the following code create?",
      "options": {
        "A": "A minimal Express application with a single route",
        "B": "A Node.js HTTP server without Express",
        "C": "A WebSocket server",
        "D": "A static file server"
      },
      "correct_answer": "A",
      "code_example": "const express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "0, 1, 2",
        "B": "1, 2, 3",
        "C": "2, 3, 4",
        "D": "3, 4, 5"
      },
      "correct_answer": "A",
      "code_example": "function createCounter() {\n  let count = 0;\n  return () => {\n    const current = count;\n    count++;\n    return current;\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter());\nconsole.log(counter());\nconsole.log(counter());"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "Which of the following route parameter patterns would match the URL '/users/123/posts/456' in Express?",
      "options": {
        "A": "app.get('/users/:id/posts/:postId', ...)",
        "B": "app.get('/users/*/posts/*', ...)",
        "C": "app.get('/users/{id}/posts/{postId}', ...)",
        "D": "app.get('/users/\\d+/posts/\\d+', ...)"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What is the output of this code using Mongoose schema validation?",
      "options": {
        "A": "ValidationError: Path 'age' (10) is less than minimum allowed value (18)",
        "B": "Successful save, logs the user object",
        "C": "ReferenceError: Mongoose is not defined",
        "D": "ValidationError: Path 'email' is required"
      },
      "correct_answer": "A",
      "code_example": "const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  age: { type: Number, min: 18 }\n});\n\nconst User = mongoose.model('User', userSchema);\n\nconst user = new User({\n  name: 'John Doe',\n  email: 'john@example.com',\n  age: 10\n});\n\nuser.validate(err => {\n  if (err) console.log(err.message);\n  else console.log('Valid user');\n});"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be logged when this code executes?",
      "options": {
        "A": "\"Regular Function\"",
        "B": "\"Arrow Function\"",
        "C": "TypeError",
        "D": "undefined"
      },
      "correct_answer": "A",
      "code_example": "function Person(name) {\n  this.name = name;\n  this.greet = function() {\n    return `Hello, ${this.name}`;\n  };\n}\n\nfunction createPerson(Constructor) {\n  return new Constructor('John');\n}\n\nconst person = createPerson(Person);\nfunction check() {\n  if (person instanceof Person) {\n    console.log('Regular Function');\n  } else {\n    console.log('Arrow Function');\n  }\n}\n\ncheck();"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What is the most efficient way to find the average value of an array of numbers?",
      "options": {
        "A": "Using a for loop to sum values, then dividing by array length",
        "B": "Using Array.forEach() to sum values, then dividing by array length",
        "C": "Using Array.reduce() to sum values, then dividing by array length",
        "D": "Using a while loop to sum values, then dividing by array length"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will this code with input validation return for the input { username: 'john', password: 'pass' }?",
      "options": {
        "A": "{ errors: [] }",
        "B": "{ errors: ['Password must be at least 8 characters'] }",
        "C": "{ errors: ['Username must be an email address'] }",
        "D": "{ errors: ['Username must be an email address', 'Password must be at least 8 characters'] }"
      },
      "correct_answer": "D",
      "code_example": "const validateUser = (user) => {\n  const errors = [];\n  \n  if (!user.username.includes('@')) {\n    errors.push('Username must be an email address');\n  }\n  \n  if (user.password.length < 8) {\n    errors.push('Password must be at least 8 characters');\n  }\n  \n  return { errors };\n};\n\nconsole.log(validateUser({ username: 'john', password: 'pass' }));"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What is this code demonstrating about pure functions?",
      "options": {
        "A": "Pure functions always return a Boolean value",
        "B": "Pure functions must accept at least one parameter",
        "C": "Pure functions return the same output for the same input and don't have side effects",
        "D": "Pure functions can only perform arithmetic operations"
      },
      "correct_answer": "C",
      "code_example": "// Impure function example\nlet total = 0;\nfunction addToTotal(value) {\n  total += value;\n  return total;\n}\n\n// Pure function example\nfunction add(a, b) {\n  return a + b;\n}"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "Which of the following will NOT cause unnecessary DOM reflows?",
      "options": {
        "A": "Modifying multiple CSS properties individually",
        "B": "Reading offsetHeight and then immediately changing the height",
        "C": "Using requestAnimationFrame to batch DOM updates",
        "D": "Changing the className property multiple times in a loop"
      },
      "correct_answer": "C"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What is the time complexity of this function to find a duplicate in an array?",
      "options": {
        "A": "O(n)",
        "B": "O(n²)",
        "C": "O(log n)",
        "D": "O(n log n)"
      },
      "correct_answer": "A",
      "code_example": "function findDuplicate(array) {\n  const seen = new Set();\n  \n  for (const item of array) {\n    if (seen.has(item)) {\n      return item;\n    }\n    seen.add(item);\n  }\n  \n  return null;\n}"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of this code using setTimeout and setInterval?",
      "options": {
        "A": "\"Start\", \"Interval\" (repeated every second indefinitely)",
        "B": "\"Start\", \"Timeout\" after 2 seconds, then \"Interval\" every second",
        "C": "\"Start\", \"Interval\" every second for 5 iterations, then \"Timeout\"",
        "D": "\"Start\", \"Interval\" (every second), \"Timeout\" (after 2 seconds), then \"Interval\" continues"
      },
      "correct_answer": "D",
      "code_example": "console.log('Start');\n\nconst intervalId = setInterval(() => {\n  console.log('Interval');\n}, 1000);\n\nsetTimeout(() => {\n  console.log('Timeout');\n}, 2000);"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates the behavior of WeakMap for memory-sensitive caching?",
      "code_example": "let user = { name: 'John' };\nconst cache = new WeakMap();\n\ncache.set(user, { lastAccessed: Date.now() });\nconsole.log(cache.has(user));\n\nuser = null;\n// After garbage collection runs\nconsole.log(cache.has(user));",
      "options": {
        "A": "true, true",
        "B": "true, false",
        "C": "true, Error: Invalid key used in WeakMap",
        "D": "false, false"
      },
      "correct_answer": "C"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "When implementing a CI/CD pipeline for a Node.js application, which of the following is NOT a recommended practice?",
      "options": {
        "A": "Running security vulnerability scans as part of the pipeline",
        "B": "Storing sensitive credentials directly in the pipeline configuration files",
        "C": "Implementing automated testing as a required step before deployment",
        "D": "Using separate environments for development, staging, and production"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code related to custom event listeners?",
      "code_example": "const EventEmitter = require('events');\nconst myEmitter = new EventEmitter();\n\nmyEmitter.once('event', () => {\n  console.log('First listener');\n});\n\nmyEmitter.on('event', () => {\n  console.log('Second listener');\n});\n\nmyEmitter.emit('event');\nmyEmitter.emit('event');",
      "options": {
        "A": "First listener (only once)",
        "B": "Second listener (only once)",
        "C": "First listener, Second listener",
        "D": "First listener, Second listener, Second listener"
      },
      "correct_answer": "D"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which of the following statements about handling unhandled Promise rejections in Node.js is correct?",
      "options": {
        "A": "Unhandled Promise rejections will be silently ignored in all Node.js versions",
        "B": "process.on('unhandledRejection') is the only way to handle these errors",
        "C": "In recent Node.js versions, unhandled Promise rejections will terminate the Node.js process",
        "D": "Unhandled Promise rejections always trigger a memory leak in the application"
      },
      "correct_answer": "C"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates the behavior of WeakSet?",
      "code_example": "let obj1 = { name: 'object1' };\nlet obj2 = { name: 'object2' };\n\nconst weakSet = new WeakSet([obj1, obj2]);\n\nconsole.log(weakSet.has(obj1));\n\nobj1 = null;\n// After garbage collection runs\nconsole.log(weakSet.size);",
      "options": {
        "A": "true, 1",
        "B": "true, undefined",
        "C": "false, 1",
        "D": "true, 2"
      },
      "correct_answer": "B"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "When implementing WebSockets with socket.io, which of the following is NOT a feature that socket.io provides over raw WebSockets?",
      "options": {
        "A": "Automatic reconnection strategy",
        "B": "Fallback to HTTP long-polling when WebSockets aren't available",
        "C": "Room-based broadcasting",
        "D": "Guaranteed message delivery even when the client is offline"
      },
      "correct_answer": "D"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be logged when the following code that uses V8 engine optimizations is executed?",
      "code_example": "function add(x, y) {\n  return x + y;\n}\n\n// Warm up the function with integer arguments\nfor (let i = 0; i < 100000; i++) {\n  add(i, i + 1);\n}\n\n// Now call with different types\nconsole.log(add(1, 2));\nconsole.log(add('1', '2'));\nconsole.log(add(true, false));\nconsole.log(add({}, {}));",
      "options": {
        "A": "3, '12', 1, '[object Object][object Object]'",
        "B": "3, 3, 1, '[object Object][object Object]'",
        "C": "3, 3, 1, Error: Cannot convert object to primitive value",
        "D": "3, '12', 1, {}{}"
      },
      "correct_answer": "A"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "When using Helm for Node.js application deployments in Kubernetes, which of the following is NOT a benefit?",
      "options": {
        "A": "Ability to version control your deployment configurations",
        "B": "Managing complex application dependencies",
        "C": "Automatic horizontal scaling based on memory usage",
        "D": "Simplifying rollbacks to previous versions"
      },
      "correct_answer": "C"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates handling real-time data with streams?",
      "code_example": "const { Readable, Transform } = require('stream');\n\nconst readableStream = new Readable({\n  read() {}\n});\n\nconst transformStream = new Transform({\n  transform(chunk, encoding, callback) {\n    callback(null, chunk.toString().toUpperCase());\n  }\n});\n\nreadableStream.pipe(transformStream).on('data', (chunk) => {\n  console.log(chunk.toString());\n});\n\nreadableStream.push('hello');\nreadableStream.push(' world');\nreadableStream.push(null);",
      "options": {
        "A": "'hello', ' world'",
        "B": "'HELLO', ' WORLD'",
        "C": "'HELLO', 'WORLD'",
        "D": "'HELLO', ' WORLD', null"
      },
      "correct_answer": "B"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following headers is NOT typically set by Helmet.js to enhance security?",
      "options": {
        "A": "X-XSS-Protection",
        "B": "Content-Security-Policy",
        "C": "X-Frame-Options",
        "D": "Authentication-Method"
      },
      "correct_answer": "D"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What is the expected result of running the following Node.js code that uses worker threads?",
      "code_example": "const { Worker, isMainThread, parentPort } = require('worker_threads');\n\nif (isMainThread) {\n  const worker = new Worker(__filename);\n  worker.on('message', (msg) => {\n    console.log('Worker message:', msg);\n  });\n  worker.postMessage('start');\n} else {\n  parentPort.on('message', (msg) => {\n    const result = performHeavyCalculation();\n    parentPort.postMessage(result);\n  });\n}\n\nfunction performHeavyCalculation() {\n  let result = 0;\n  for (let i = 0; i < 1000000; i++) {\n    result += i;\n  }\n  return result;\n}",
      "options": {
        "A": "The calculation blocks the main thread causing the application to freeze temporarily",
        "B": "Worker message: start",
        "C": "Worker message: 499999500000",
        "D": "Error: Worker threads are not supported in this Node.js version"
      },
      "correct_answer": "C"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "When implementing refresh token and access token authentication, which of the following is the MOST secure approach?",
      "options": {
        "A": "Store both refresh and access tokens in localStorage for easy retrieval",
        "B": "Store access token in memory only and refresh token in an HttpOnly, secure cookie",
        "C": "Store both tokens in sessionStorage to ensure they're cleared when the browser closes",
        "D": "Store access token in a cookie and refresh token in localStorage"
      },
      "correct_answer": "B"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates hidden classes and inline caching in V8?",
      "code_example": "function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nconst points = [];\n\n// Create points with consistent property order\nfor (let i = 0; i < 5; i++) {\n  points.push(new Point(i, i * 2));\n}\n\n// Create one point with different property order\nconst oddPoint = new Point(0, 0);\noddPoint.y = 1; // Delete and reassign to break the hidden class\ndelete oddPoint.y;\noddPoint.y = 1;\n\nfunction sumPoints(points) {\n  let sum = 0;\n  for (let i = 0; i < points.length; i++) {\n    sum += points[i].x + points[i].y;\n  }\n  return sum;\n}\n\nconsole.log(sumPoints(points));\npoints.push(oddPoint);\nconsole.log(sumPoints(points));",
      "options": {
        "A": "25, 26",
        "B": "25, Error: Cannot read property 'y' of undefined",
        "C": "25, 25",
        "D": "15, 16"
      },
      "correct_answer": "A"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which of the following is NOT a valid approach to prevent Cross-Site Request Forgery (CSRF) attacks?",
      "options": {
        "A": "Implementing SameSite cookie attributes",
        "B": "Using anti-CSRF tokens in forms",
        "C": "Verifying the Origin and Referer headers",
        "D": "Relying solely on HTTPS encryption"
      },
      "correct_answer": "D"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What is the output of the following code that attempts to handle an unhandled Promise rejection?",
      "code_example": "process.on('unhandledRejection', (reason, promise) => {\n  console.log('Unhandled Rejection at:', promise);\n  console.log('Reason:', reason);\n});\n\nfunction fetchData() {\n  return new Promise((resolve, reject) => {\n    reject(new Error('Data fetch failed'));\n  });\n}\n\nasync function main() {\n  try {\n    const result = fetchData();\n    console.log(result);\n  } catch (error) {\n    console.log('Caught:', error.message);\n  }\n}\n\nmain();",
      "options": {
        "A": "Caught: Data fetch failed",
        "B": "Unhandled Rejection at: [Promise Object] Reason: Error: Data fetch failed",
        "C": "Promise { <rejected> Error: Data fetch failed }",
        "D": "No output as the error is properly handled"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "Which of the following is NOT a best practice when writing a Dockerfile for a Node.js application?",
      "code_example": "# Dockerfile example\nFROM node:14\n\nWORKDIR /app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nUSER root\n\nCMD [\"npm\", \"start\"]",
      "options": {
        "A": "Using a specific Node.js version instead of 'latest'",
        "B": "Running the application as root user",
        "C": "Copying package.json before other files to leverage Docker caching",
        "D": "Explicitly exposing the port the application will use"
      },
      "correct_answer": "B"
    }
  ]
}
