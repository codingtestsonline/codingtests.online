{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code using template literals?",
      "code_example": "const name = 'Sarah';\nconst age = 28;\nconsole.log(`${name} is ${age + 2} years old.`);",
      "options": {
        "A": "Sarah is 28 + 2 years old.",
        "B": "Sarah is 30 years old.",
        "C": "${name} is ${age + 2} years old.",
        "D": "name is age + 2 years old."
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What will the following code output when using break and continue statements?",
      "code_example": "for (let i = 0; i < 5; i++) {\n  if (i === 1) {\n    continue;\n  }\n  if (i === 3) {\n    break;\n  }\n  console.log(i);\n}",
      "options": {
        "A": "0, 1, 2",
        "B": "0, 2",
        "C": "0, 1, 2, 3, 4",
        "D": "0, 2, 4"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "Which method is used to attach an event handler to an element in JavaScript?",
      "options": {
        "A": "element.eventListener()",
        "B": "element.attachEvent()",
        "C": "element.addEventListener()",
        "D": "element.addEvent()"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What is the main difference between require() and import() in JavaScript?",
      "options": {
        "A": "require() is synchronous, while import() can be asynchronous",
        "B": "require() is used only in the browser, while import() is used in Node.js",
        "C": "require() supports circular dependencies, while import() doesn't",
        "D": "require() loads all exports, while import() only loads specific exports"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code demonstrating function scope?",
      "code_example": "let x = 10;\n\nfunction outer() {\n  let x = 20;\n  function inner() {\n    let x = 30;\n    console.log(x);\n  }\n  inner();\n}\n\nouter();",
      "options": {
        "A": "10",
        "B": "20",
        "C": "30",
        "D": "undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the result of the following comparison operations?",
      "code_example": "console.log('1' == 1);\nconsole.log('1' === 1);\nconsole.log('1' != 1);\nconsole.log('1' !== 1);",
      "options": {
        "A": "true, true, false, false",
        "B": "true, false, false, true",
        "C": "false, false, true, true",
        "D": "true, true, true, true"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code using logical operators?",
      "code_example": "console.log(true && false);\nconsole.log(true || false);\nconsole.log(!true);\nconsole.log(!!false);",
      "options": {
        "A": "true, true, false, false",
        "B": "false, true, false, false",
        "C": "false, false, true, true",
        "D": "true, false, true, false"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code demonstrating function hoisting?",
      "code_example": "console.log(add(5, 3));\n\nfunction add(a, b) {\n  return a + b;\n}\n\nconsole.log(subtract(10, 4));\n\nconst subtract = function(a, b) {\n  return a - b;\n};",
      "options": {
        "A": "8, 6",
        "B": "8, Error",
        "C": "Error, 6",
        "D": "Error, Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "Which method would you use to change the text content of an element, preserving its HTML structure?",
      "options": {
        "A": "element.innerHTML",
        "B": "element.innerText",
        "C": "element.textContent",
        "D": "element.value"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What is the purpose of event.preventDefault() in JavaScript?",
      "options": {
        "A": "To stop an event from propagating to parent elements",
        "B": "To prevent the browser from executing the default action of an event",
        "C": "To cancel all event listeners on an element",
        "D": "To prevent JavaScript errors in event handlers"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code using the spread operator?",
      "code_example": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined);",
      "options": {
        "A": "[1, 2, 3, 4, 5, 6]",
        "B": "[[1, 2, 3], [4, 5, 6]]",
        "C": "[arr1, arr2]",
        "D": "[...[1, 2, 3], ...[4, 5, 6]]"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "Which of the following is NOT a reference type in JavaScript?",
      "options": {
        "A": "Object",
        "B": "Function",
        "C": "Number",
        "D": "Array"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following arithmetic operations?",
      "code_example": "console.log(5 + 3 * 2);\nconsole.log(10 % 3);\nconsole.log(2 ** 3);",
      "options": {
        "A": "16, 1, 8",
        "B": "11, 1, 8",
        "C": "16, 1, 6",
        "D": "11, 1, 6"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "Which of the following best describes Node.js?",
      "options": {
        "A": "A JavaScript library for building user interfaces",
        "B": "A JavaScript runtime environment that executes code outside the browser",
        "C": "A tool for linting and formatting JavaScript code",
        "D": "A JavaScript framework for building mobile applications"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code using Object methods?",
      "code_example": "const person = { name: 'Alice', age: 30, job: 'developer' };\nconsole.log(Object.keys(person));\nconsole.log(Object.values(person));\nconsole.log(Object.entries(person)[1]);",
      "options": {
        "A": "['name', 'age', 'job'], ['Alice', 30, 'developer'], ['age', 30]",
        "B": "['name', 'age', 'job'], ['Alice', 30, 'developer'], ['name', 'Alice']",
        "C": "3, 3, ['name', 'Alice']",
        "D": "{name: 'name', age: 'age', job: 'job'}, {name: 'Alice', age: 30, job: 'developer'}, ['age', 30]"
      },
      "correct_answer": "A"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code using the ternary operator?",
      "code_example": "const age = 17;\nconst message = age >= 18 ? 'You can vote!' : 'Too young to vote.';\nconsole.log(message);",
      "options": {
        "A": "You can vote!",
        "B": "Too young to vote.",
        "C": "undefined",
        "D": "null"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code using explicit binding?",
      "code_example": "function greet() {\n  console.log(`Hello, ${this.name}!`);\n}\n\nconst person1 = { name: 'Alice' };\nconst person2 = { name: 'Bob' };\n\nconst greetAlice = greet.bind(person1);\ngreetAlice();\ngreet.call(person2);",
      "options": {
        "A": "Hello, Alice! Hello, Alice!",
        "B": "Hello, Bob! Hello, Bob!",
        "C": "Hello, Alice! Hello, Bob!",
        "D": "Hello, undefined! Hello, undefined!"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code using the spread and rest operators?",
      "code_example": "function sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\n\nconst nums = [1, 2, 3, 4];\nconsole.log(sum(...nums, 5));",
      "options": {
        "A": "10",
        "B": "15",
        "C": "[1, 2, 3, 4, 5]",
        "D": "Error"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code using Object.create()?",
      "code_example": "const person = {\n  introduce() {\n    return `My name is ${this.name}`;\n  }\n};\n\nconst alice = Object.create(person);\nalice.name = 'Alice';\n\nconsole.log(alice.introduce());\nconsole.log(alice.hasOwnProperty('introduce'));",
      "options": {
        "A": "My name is Alice, true",
        "B": "My name is Alice, false",
        "C": "My name is undefined, true",
        "D": "My name is undefined, false"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "Which statement correctly describes the difference between CommonJS and ES Modules?",
      "options": {
        "A": "CommonJS modules are asynchronous while ES Modules are synchronous",
        "B": "CommonJS uses require() and module.exports while ES Modules use import and export",
        "C": "CommonJS modules can only be used in Node.js while ES Modules can only be used in browsers",
        "D": "CommonJS modules support circular dependencies while ES Modules don't"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "Which of the following is the correct way to create a basic REST API endpoint with Express.js?",
      "code_example": "const express = require('express');\nconst app = express();\n\n// Complete the code for an endpoint that returns all users\napp.get('/api/users', (req, res) => {\n  const users = [{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }];\n  res.json(users);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));",
      "options": {
        "A": "The code is correct as is",
        "B": "json() should be replaced with send()",
        "C": "app.get should be replaced with app.request",
        "D": "res should be replaced with req in the response line"
      },
      "correct_answer": "A"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What is the purpose of the compression middleware in Express.js?",
      "options": {
        "A": "To compress user credentials before storing them",
        "B": "To compress JavaScript files for faster client-side execution",
        "C": "To compress HTTP responses to reduce bandwidth",
        "D": "To compress database queries for faster execution"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What is the primary purpose of the Morgan middleware in Express.js?",
      "options": {
        "A": "User authentication and authorization",
        "B": "HTTP request logging",
        "C": "HTTP response compression",
        "D": "Database connection management"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code demonstrating the Event Emitter pattern?",
      "code_example": "const EventEmitter = require('events');\nconst emitter = new EventEmitter();\n\nemitter.on('message', (data) => {\n  console.log('Handler 1:', data);\n});\n\nemitter.on('message', (data) => {\n  console.log('Handler 2:', data);\n});\n\nemitter.emit('message', 'Hello World');",
      "options": {
        "A": "Handler 1: Hello World",
        "B": "Handler 2: Hello World",
        "C": "Handler 1: Hello World\\nHandler 2: Hello World",
        "D": "No output"
      },
      "correct_answer": "C"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What is the primary purpose of Helmet.js in Node.js applications?",
      "options": {
        "A": "To provide built-in authentication mechanisms",
        "B": "To compress HTTP responses",
        "C": "To set various HTTP security headers",
        "D": "To validate user input against security threats"
      },
      "correct_answer": "C"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following function composition?",
      "code_example": "const double = x => x * 2;\nconst increment = x => x + 1;\n\nconst doubleThenIncrement = x => increment(double(x));\nconst incrementThenDouble = x => double(increment(x));\n\nconsole.log(doubleThenIncrement(5));\nconsole.log(incrementThenDouble(5));",
      "options": {
        "A": "11, 12",
        "B": "11, 11",
        "C": "12, 11",
        "D": "12, 12"
      },
      "correct_answer": "A"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What is the purpose of the next() function in Express middleware?",
      "code_example": "app.use((req, res, next) => {\n  console.log('Middleware executed');\n  next();\n});",
      "options": {
        "A": "To move to the next route in the application",
        "B": "To pass control to the next middleware function in the stack",
        "C": "To respond to the client's request and end the cycle",
        "D": "To restart the current middleware function"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code using destructuring?",
      "code_example": "const person = {\n  name: 'Alice',\n  age: 30,\n  address: {\n    city: 'New York',\n    country: 'USA'\n  },\n  hobbies: ['reading', 'coding']\n};\n\nconst { name, address: { city }, hobbies: [firstHobby] } = person;\nconsole.log(`${name} lives in ${city} and enjoys ${firstHobby}`);",
      "options": {
        "A": "Alice lives in New York and enjoys reading",
        "B": "Alice lives in New York and enjoys reading,coding",
        "C": "Alice lives in New York and enjoys undefined",
        "D": "Alice lives in undefined and enjoys reading"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "Which approach is most effective for reducing redundant database queries in a Node.js application?",
      "options": {
        "A": "Using synchronous database operations",
        "B": "Implementing a caching layer for frequently accessed data",
        "C": "Increasing the database connection pool size",
        "D": "Running all queries in parallel using Promise.all()"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "Which of the following is NOT a valid way to add validation to a MongoDB Schema using Mongoose?",
      "code_example": "const userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    minlength: 3,\n    maxlength: 20\n  },\n  email: {\n    type: String,\n    required: true,\n    match: /.+\\@.+\\..+/\n  },\n  age: {\n    type: Number,\n    min: 18,\n    validate: {\n      validator: Number.isInteger,\n      message: '{VALUE} is not an integer value'\n    }\n  }\n});",
      "options": {
        "A": "Using the required: true property",
        "B": "Using the match regex pattern for email",
        "C": "Using the validate custom validator for age",
        "D": "Using the maxlength without a corresponding minlength"
      },
      "correct_answer": "D"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code demonstrating closures?",
      "code_example": "function createCounter() {\n  let count = 0;\n  return {\n    increment: function() { count++; return count; },\n    decrement: function() { count--; return count; },\n    getCount: function() { return count; }\n  };\n}\n\nconst counter = createCounter();\ncounter.increment();\ncounter.increment();\ncounter.decrement();\nconsole.log(counter.getCount());",
      "options": {
        "A": "0",
        "B": "1",
        "C": "2",
        "D": "3"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code related to prototype chain?",
      "code_example": "function Vehicle(wheels) {\n  this.wheels = wheels;\n}\n\nVehicle.prototype.drive = function() {\n  return `Driving with ${this.wheels} wheels`;\n};\n\nfunction Car() {\n  Vehicle.call(this, 4);\n}\n\nCar.prototype = Object.create(Vehicle.prototype);\nCar.prototype.constructor = Car;\n\nconst myCar = new Car();\nconsole.log(myCar.drive());\nconsole.log(myCar instanceof Vehicle);",
      "options": {
        "A": "Driving with 4 wheels, false",
        "B": "Driving with 4 wheels, true",
        "C": "TypeError: myCar.drive is not a function, false",
        "D": "TypeError: myCar.drive is not a function, true"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the correct way to implement a WebSocket server that broadcasts messages to all connected clients using socket.io?",
      "options": {
        "A": "server.on('connection', socket => { socket.broadcast.emit('message', data); });",
        "B": "io.on('connection', socket => { io.sockets.emit('message', data); });",
        "C": "io.on('connection', socket => { socket.emit('message', data); });",
        "D": "io.sockets.on('connection', socket => { socket.broadcast('message', data); });"
      },
      "correct_answer": "B",
      "code_example": "const express = require('express');\nconst app = express();\nconst server = require('http').createServer(app);\nconst io = require('socket.io')(server);\n\n// When a client connects\nio.on('connection', socket => {\n  console.log('New client connected');\n  \n  // When this client sends a 'chat message'\n  socket.on('chat message', (data) => {\n    // Send to all connected clients including sender\n    io.sockets.emit('message', data);\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What is the purpose of the 'Referrer-Policy' HTTP header?",
      "options": {
        "A": "To prevent Cross-Site Request Forgery (CSRF) attacks",
        "B": "To specify which referrer information should be included when making requests",
        "C": "To enable Content Security Policy (CSP) for the website",
        "D": "To allow or deny loading resources in iframes"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code using Node.js crypto module?",
      "options": {
        "A": "A buffer containing the encrypted string",
        "B": "A string containing the encrypted text",
        "C": "A buffer containing the hashed string",
        "D": "A hexadecimal string containing the hash digest"
      },
      "correct_answer": "D",
      "code_example": "const crypto = require('crypto');\n\nfunction hashString(input) {\n  const hash = crypto.createHash('sha256');\n  hash.update(input);\n  return hash.digest('hex');\n}\n\nconsole.log(hashString('Hello World'));\n// Output: b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What is the output of the following code using custom event listeners?",
      "options": {
        "A": "'Button clicked!' followed by 'Default click handler'",
        "B": "'Default click handler' followed by 'Button clicked!'",
        "C": "Only 'Button clicked!'",
        "D": "Only 'Default click handler'"
      },
      "correct_answer": "A",
      "code_example": "class EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n\n  on(event, listener) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n  }\n\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(listener => listener(...args));\n    }\n  }\n}\n\nconst button = new EventEmitter();\n\nbutton.on('click', () => {\n  console.log('Button clicked!');\n});\n\nbutton.on('click', () => {\n  console.log('Default click handler');\n});\n\nbutton.emit('click');\n// Output:\n// Button clicked!\n// Default click handler"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "Which of the following correctly describes a key difference between WebSockets and REST?",
      "options": {
        "A": "WebSockets use HTTP while REST uses TCP",
        "B": "WebSockets maintain a persistent connection while REST is stateless",
        "C": "WebSockets are slower than REST for real-time applications",
        "D": "WebSockets require authentication while REST doesn't"
      },
      "correct_answer": "B"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code when run with Node.js streams?",
      "options": {
        "A": "'hello world' printed to the console",
        "B": "'HELLO WORLD' printed to the console",
        "C": "A TypeError indicating that transformStream is not a function",
        "D": "An error about missing a callback function"
      },
      "correct_answer": "B",
      "code_example": "const { Transform } = require('stream');\nconst { pipeline } = require('stream/promises');\nconst fs = require('fs');\n\nconst transformToUppercase = new Transform({\n  transform(chunk, encoding, callback) {\n    const upperCaseChunk = chunk.toString().toUpperCase();\n    callback(null, upperCaseChunk);\n  }\n});\n\n// Create a readable stream from a string\nconst createReadableStream = () => {\n  const readable = require('stream').Readable.from(['hello world']);\n  return readable;\n};\n\nasync function processStream() {\n  const readableStream = createReadableStream();\n  \n  readableStream.pipe(transformToUppercase).pipe(process.stdout);\n}\n\nprocessStream();\n// Output: HELLO WORLD"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What is the correct way to set up PM2 for load balancing a Node.js application?",
      "options": {
        "A": "pm2 start app.js --instances max",
        "B": "pm2 start app.js --instances 0",
        "C": "pm2 scale app.js max",
        "D": "pm2 cluster app.js"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code that reads a large file using streams?",
      "options": {
        "A": "The entire file content as a single string",
        "B": "An error due to exceeding memory limits",
        "C": "The number of chunks processed",
        "D": "The number of bytes processed"
      },
      "correct_answer": "D",
      "code_example": "const fs = require('fs');\n\nfunction processLargeFile(filePath) {\n  return new Promise((resolve, reject) => {\n    const readStream = fs.createReadStream(filePath, { highWaterMark: 64 * 1024 });\n    let bytesProcessed = 0;\n    \n    readStream.on('data', (chunk) => {\n      bytesProcessed += chunk.length;\n    });\n    \n    readStream.on('end', () => {\n      console.log(bytesProcessed);\n      resolve(bytesProcessed);\n    });\n    \n    readStream.on('error', (err) => {\n      reject(err);\n    });\n  });\n}\n\n// If the file contains 1024 bytes of data\nprocessLargeFile('sample.txt');\n// Output: 1024"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code using bcrypt for password hashing?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "A 60-character hash string",
        "D": "A Promise that resolves to true"
      },
      "correct_answer": "A",
      "code_example": "const bcrypt = require('bcrypt');\n\nasync function validatePassword() {\n  const password = 'user_password123';\n  const saltRounds = 10;\n  \n  // Hash the password\n  const hash = await bcrypt.hash(password, saltRounds);\n  \n  // Verify the password against the hash\n  const isMatch = await bcrypt.compare(password, hash);\n  \n  console.log(isMatch);\n  return isMatch;\n}\n\nvalidatePassword();\n// Output: true"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following is NOT a valid configuration for the X-Frame-Options header to prevent clickjacking attacks?",
      "options": {
        "A": "DENY",
        "B": "SAMEORIGIN",
        "C": "ALLOW-FROM https://example.com",
        "D": "RESTRICTED"
      },
      "correct_answer": "D"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code related to JavaScript memory allocation?",
      "options": {
        "A": "{\"rss\":\"about 30MB\",\"heapTotal\":\"about 5MB\",\"heapUsed\":\"about 3MB\",\"external\":\"about 1MB\"}",
        "B": "A memory address in hexadecimal",
        "C": "An object with properties: rss, heapTotal, heapUsed, external, and arrayBuffers",
        "D": "undefined"
      },
      "correct_answer": "C",
      "code_example": "function checkMemoryUsage() {\n  // Create a large array to allocate some memory\n  const arr = new Array(1000000).fill('x');\n  \n  // Get memory usage statistics\n  const memoryUsage = process.memoryUsage();\n  \n  console.log(memoryUsage);\n  return memoryUsage;\n}\n\ncheckMemoryUsage();\n// Output example: {\n//   rss: 30404608,\n//   heapTotal: 5816320,\n//   heapUsed: 3611520,\n//   external: 1122218,\n//   arrayBuffers: 9898\n// }"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What is the correct way to set up Nginx as a reverse proxy for a Node.js application?",
      "options": {
        "A": "location / { proxy_redirect nodejs:3000; }",
        "B": "location / { proxy_pass http://localhost:3000; }",
        "C": "server { forward http://127.0.0.1:3000; }",
        "D": "upstream { node app.js:3000; }"
      },
      "correct_answer": "B"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating V8's hidden classes and inline caching?",
      "options": {
        "A": "First: 100ms, Second: 50ms",
        "B": "First: 155ms, Second: 47ms",
        "C": "The second loop execution will be significantly faster than the first",
        "D": "Both loops will have approximately the same execution time"
      },
      "correct_answer": "C",
      "code_example": "function createObjects(n) {\n  const start = performance.now();\n  \n  // First run - Hidden class creation\n  let arr1 = [];\n  for (let i = 0; i < n; i++) {\n    arr1.push({\n      x: i,\n      y: i * 2\n    });\n  }\n  \n  const mid = performance.now();\n  \n  // Second run - Hidden class reuse\n  let arr2 = [];\n  for (let i = 0; i < n; i++) {\n    arr2.push({\n      x: i,\n      y: i * 2\n    });\n  }\n  \n  const end = performance.now();\n  \n  console.log(`First run: ${(mid - start).toFixed(2)}ms`);\n  console.log(`Second run: ${(end - mid).toFixed(2)}ms`);\n  console.log(`The second loop execution will be significantly faster than the first`);\n}\n\ncreateObjects(1000000);\n// Output message: The second loop execution will be significantly faster than the first"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What is the correct setup for winston logging in a Node.js application to capture errors in a file and console?",
      "options": {
        "A": "logger.use(winston.transports.Console); logger.use(winston.transports.File);",
        "B": "winston.log({ transports: [new winston.transports.Console(), new winston.transports.File()] });",
        "C": "new winston.Logger({ levels: winston.config.syslog.levels });",
        "D": "winston.createLogger({ transports: [new winston.transports.Console(), new winston.transports.File({ filename: 'error.log', level: 'error' })] });"
      },
      "correct_answer": "D"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code using Worker threads for parallel processing in Node.js?",
      "options": {
        "A": "Result: 499500",
        "B": "Error: Workers can only process serializable data",
        "C": "A different result each time the code runs",
        "D": "Result: 0"
      },
      "correct_answer": "A",
      "code_example": "const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');\n\nif (isMainThread) {\n  // This code runs in the main thread\n  const worker = new Worker(__filename, {\n    workerData: { start: 0, end: 1000 }\n  });\n  \n  worker.on('message', (result) => {\n    console.log(`Result: ${result}`);\n  });\n  \n  worker.on('error', (error) => {\n    console.error(error);\n  });\n} else {\n  // This code runs in the worker thread\n  const { start, end } = workerData;\n  let sum = 0;\n  \n  for (let i = start; i < end; i++) {\n    sum += i;\n  }\n  \n  parentPort.postMessage(sum);\n}\n// Output: Result: 499500"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What is the main purpose of the X-Content-Type-Options header with the 'nosniff' value?",
      "options": {
        "A": "To prevent browsers from interpreting files as a different MIME type than what is specified",
        "B": "To enforce strict Content Security Policy rules",
        "C": "To disable cross-origin requests completely",
        "D": "To optimize content delivery for different device types"
      },
      "correct_answer": "A"
    }
  ]
}
