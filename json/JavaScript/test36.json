{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "topic": "Template literals",
      "question": "What will be the output of the following code?",
      "code_example": "const name = 'Sarah';\nconst age = 28;\nconsole.log(`${name} is ${age + 2} years old.`);",
      "options": {
        "A": "Sarah is 28 + 2 years old.",
        "B": "Sarah is 30 years old.",
        "C": "{name} is {age + 2} years old.",
        "D": "Template error: cannot perform operations inside literals"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "topic": "package.json, NPM/Yarn basics",
      "question": "Which command would you use to install a package as a development dependency using npm?",
      "options": {
        "A": "npm add --dev [package-name]",
        "B": "npm install [package-name]",
        "C": "npm install --save-dev [package-name]",
        "D": "npm dev-install [package-name]"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "topic": "break and continue statements",
      "question": "What will be the output of the following code?",
      "code_example": "let result = 0;\nfor (let i = 0; i < 5; i++) {\n  if (i === 2) {\n    continue;\n  }\n  result += i;\n}\nconsole.log(result);",
      "options": {
        "A": "10",
        "B": "7",
        "C": "6",
        "D": "4"
      },
      "correct_answer": "B"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "topic": "IIFE (Immediately Invoked Function Expressions)",
      "question": "What will be the output of the following code?",
      "code_example": "var result = 'Outside';\n\n(function() {\n  var result = 'Inside';\n  console.log(result);\n})();\n\nconsole.log(result);",
      "options": {
        "A": "Inside Outside",
        "B": "Outside Inside",
        "C": "Inside Inside",
        "D": "Outside Outside"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "topic": "Higher-order functions",
      "question": "What will be the output of the following code?",
      "code_example": "const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled.filter(num => num > 5));",
      "options": {
        "A": "[6, 8, 10]",
        "B": "[2, 4, 6, 8, 10]",
        "C": "[3, 4, 5]",
        "D": "[6, 7, 8, 9, 10]"
      },
      "correct_answer": "A"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "topic": "Default parameters",
      "question": "What will be the output of the following code?",
      "code_example": "function greet(name = 'Guest', greeting = 'Hello') {\n  return `${greeting}, ${name}!`;\n}\n\nconsole.log(greet('John'));",
      "options": {
        "A": "Hello, Guest!",
        "B": "Hello, John!",
        "C": "undefined, John!",
        "D": "Hello, undefined!"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "topic": "Logical operators",
      "question": "What will be the output of the following code?",
      "code_example": "console.log('hello' && 0 && 'world');",
      "options": {
        "A": "hello",
        "B": "world",
        "C": "0",
        "D": "true"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "topic": "Loops",
      "question": "What will be the output of the following code?",
      "code_example": "let output = '';\nlet i = 0;\n\ndo {\n  output += i;\n  i++;\n} while (i < 3);\n\nconsole.log(output);",
      "options": {
        "A": "123",
        "B": "012",
        "C": "01",
        "D": "0123"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "topic": "Comparison operators",
      "question": "What will be the output of the following code?",
      "code_example": "console.log('5' === 5);",
      "options": {
        "A": "true",
        "B": "false",
        "C": "TypeError",
        "D": "NaN"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "topic": "Ternary operators",
      "question": "What will be the output of the following code?",
      "code_example": "let age = 17;\nlet message = age >= 18 ? 'Adult' : age >= 13 ? 'Teenager' : 'Child';\nconsole.log(message);",
      "options": {
        "A": "Adult",
        "B": "Teenager",
        "C": "Child",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "topic": "Event listeners",
      "question": "Which of the following is the correct way to add a click event listener to a button element with id 'myButton'?",
      "options": {
        "A": "document.getElementById('myButton').addEventListener('click', function() {});",
        "B": "document.getElementById('myButton').onClick = function() {};",
        "C": "document.getElementById('myButton').clickEvent = function() {};",
        "D": "document.getElementById('myButton').listen('click', function() {});"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "topic": "Destructuring assignment",
      "question": "What will be the output of the following code?",
      "code_example": "const person = { name: 'Alex', age: 25 };\nconst { name, job = 'Developer' } = person;\nconsole.log(`${name} works as a ${job}`);",
      "options": {
        "A": "Alex works as a Developer",
        "B": "Alex works as a undefined",
        "C": "undefined works as a Developer",
        "D": "Syntax error"
      },
      "correct_answer": "A"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "topic": "Primitive types",
      "question": "Which of the following is NOT a primitive type in JavaScript?",
      "options": {
        "A": "string",
        "B": "array",
        "C": "symbol",
        "D": "bigint"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "topic": "Object properties & methods",
      "question": "What will be the output of the following code?",
      "code_example": "const user = {\n  name: 'Sam',\n  greet() {\n    return `Hello, ${this.name}`;\n  }\n};\n\nconst greetFn = user.greet;\nconsole.log(greetFn());",
      "options": {
        "A": "Hello, Sam",
        "B": "Hello, undefined",
        "C": "TypeError: this.name is not defined",
        "D": "Hello, [object Object]"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "topic": "var, let, const",
      "question": "What will be the output of the following code?",
      "code_example": "function test() {\n  if (true) {\n    let x = 1;\n    var y = 2;\n  }\n  console.log(typeof x, typeof y);\n}\n\ntest();",
      "options": {
        "A": "number number",
        "B": "undefined number",
        "C": "undefined undefined",
        "D": "ReferenceError: x is not defined"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "topic": "Explicit conversion",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(Number('123') + parseInt('456.789') + parseFloat('789.123'));",
      "options": {
        "A": "1368.123",
        "B": "1368",
        "C": "123456789.123",
        "D": "1245.123"
      },
      "correct_answer": "A"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "topic": "Compression",
      "question": "Which of the following correctly creates a gzip compression middleware in Express?",
      "code_example": "const express = require('express');\nconst compression = require('compression');\nconst app = express();\n\n// Which of the following is correct?\n// A: app.use(compression);\n// B: app.use(compression());\n// C: app.use(new compression());\n// D: app.use(express.compression());",
      "options": {
        "A": "app.use(compression);",
        "B": "app.use(compression());",
        "C": "app.use(new compression());",
        "D": "app.use(express.compression());"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "topic": "Nullish coalescing",
      "question": "What will be the output of the following code?",
      "code_example": "const value1 = '' ?? 'default';\nconst value2 = 0 ?? 42;\nconst value3 = null ?? 'fallback';\n\nconsole.log(`${value1}, ${value2}, ${value3}`);",
      "options": {
        "A": "default, 42, fallback",
        "B": ", 0, fallback",
        "C": ", 42, fallback",
        "D": "default, 0, null"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "topic": "Promise methods",
      "question": "What will be the output of the following code?",
      "code_example": "const p1 = new Promise(resolve => setTimeout(() => resolve('First'), 100));\nconst p2 = new Promise((_, reject) => setTimeout(() => reject(new Error('Failed')), 50));\nconst p3 = new Promise(resolve => setTimeout(() => resolve('Third'), 75));\n\nPromise.race([p1, p2, p3])\n  .then(result => console.log(`Success: ${result}`))\n  .catch(error => console.log(`Error: ${error.message}`));",
      "options": {
        "A": "Success: First",
        "B": "Success: Third",
        "C": "Error: Failed",
        "D": "Error: Promise timeout"
      },
      "correct_answer": "C"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "topic": "Handling file uploads",
      "question": "Which of the following correctly configures Multer for handling single file uploads in Express?",
      "code_example": "const multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', /* What goes here? */, (req, res) => {\n  res.send('File uploaded');\n});",
      "options": {
        "A": "upload('photo')",
        "B": "upload.single('photo')",
        "C": "upload.file('photo')",
        "D": "upload.upload('photo')"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "topic": "MongoDB Schema",
      "question": "Which of the following correctly defines a Mongoose schema with a required string field and a number field with a default value?",
      "code_example": "const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  // Which of the following is correct?\n  // A: username: { type: String, required: true },\n  //    score: { type: Number, default: 0 }\n  // B: username: String, required: true,\n  //    score: Number, default: 0\n  // C: username: String('required'),\n  //    score: Number(0)\n  // D: username: { String, required: true },\n  //    score: { Number, default: 0 }\n});",
      "options": {
        "A": "username: { type: String, required: true }, score: { type: Number, default: 0 }",
        "B": "username: String, required: true, score: Number, default: 0",
        "C": "username: String('required'), score: Number(0)",
        "D": "username: { String, required: true }, score: { Number, default: 0 }"
      },
      "correct_answer": "A"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "topic": "Symbols",
      "question": "What will be the output of the following code?",
      "code_example": "const key1 = Symbol('id');\nconst key2 = Symbol('id');\nconst obj = {};\n\nobj[key1] = 'Value 1';\nobj[key2] = 'Value 2';\n\nconsole.log(Object.keys(obj).length);",
      "options": {
        "A": "1",
        "B": "2",
        "C": "0",
        "D": "Symbol('id')"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "topic": "JWT tokens",
      "question": "Which of the following is the most secure way to store a JWT token on the client-side?",
      "options": {
        "A": "In localStorage",
        "B": "In sessionStorage",
        "C": "In an HttpOnly cookie",
        "D": "In a global JavaScript variable"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "topic": "JSON responses",
      "question": "What's the correct way to send a JSON response with status code 201 in Express?",
      "code_example": "app.post('/users', (req, res) => {\n  // Create a user\n  const user = { id: 123, name: 'Jane' };\n  \n  // Send response\n  // A: res.status(201).json({ user });\n  // B: res.201.json({ user });\n  // C: res.json(201, { user });\n  // D: res.sendJson({ user }, 201);\n});",
      "options": {
        "A": "res.status(201).json({ user });",
        "B": "res.201.json({ user });",
        "C": "res.json(201, { user });",
        "D": "res.sendJson({ user }, 201);"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "topic": "Spread/rest operators",
      "question": "What will be the output of the following code?",
      "code_example": "function process(first, ...rest) {\n  return [first, rest.length, ...rest];\n}\n\nconst results = process('a', 'b', 'c', 'd');\nconsole.log(results);",
      "options": {
        "A": "['a', 3, 'b', 'c', 'd']",
        "B": "['a', ['b', 'c', 'd']]",
        "C": "['a', 3, ['b', 'c', 'd']]",
        "D": "['a', ['b', 'c', 'd'], 3]"
      },
      "correct_answer": "A"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "topic": "Streaming files",
      "question": "What is the correct way to stream a file to the client using Node.js?",
      "code_example": "const fs = require('fs');\nconst path = require('path');\n\napp.get('/download', (req, res) => {\n  const file = path.join(__dirname, 'files', 'document.pdf');\n  \n  // A: const stream = fs.createReadStream(file);\n  //    stream.pipe(res);\n  // B: fs.readFile(file, (err, data) => res.send(data));\n  // C: res.download(file);\n  // D: res.sendFile(file);\n});",
      "options": {
        "A": "const stream = fs.createReadStream(file); stream.pipe(res);",
        "B": "fs.readFile(file, (err, data) => res.send(data));",
        "C": "res.download(file);",
        "D": "res.sendFile(file);"
      },
      "correct_answer": "A"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "topic": "Closures",
      "question": "What will be the output of the following code?",
      "code_example": "function createCounter() {\n  let count = 0;\n  return function() {\n    count += 1;\n    return count;\n  };\n}\n\nconst counter1 = createCounter();\nconst counter2 = createCounter();\n\nconsole.log(counter1());\nconsole.log(counter1());\nconsole.log(counter2());",
      "options": {
        "A": "1, 2, 3",
        "B": "1, 2, 1",
        "C": "1, 1, 1",
        "D": "1, 2, 2"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "topic": "Express Router",
      "question": "Which of the following correctly sets up a modular router in Express?",
      "code_example": "// userRoutes.js\nconst express = require('express');\n\n// Which is correct?\n// A: const router = express.Router();\n// B: const router = new express.Router();\n// C: const router = express.routes;\n// D: const router = express.createRouter();\n\nrouter.get('/', (req, res) => {\n  res.send('User list');\n});\n\nmodule.exports = router;",
      "options": {
        "A": "const router = express.Router();",
        "B": "const router = new express.Router();",
        "C": "const router = express.routes;",
        "D": "const router = express.createRouter();"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "topic": "Input validation",
      "question": "Which of the following correctly sets up input validation middleware for an email field in Express using express-validator?",
      "code_example": "const { body, validationResult } = require('express-validator');\n\napp.post('/users',\n  // Validation middleware\n  // A: body('email').isEmail().withMessage('Invalid email'),\n  // B: body('email', 'Invalid email').validate().isEmail(),\n  // C: validate('email').isEmail().error('Invalid email'),\n  // D: validator.isEmail('email').withMessage('Invalid email'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    // Process valid request\n  }\n);",
      "options": {
        "A": "body('email').isEmail().withMessage('Invalid email')",
        "B": "body('email', 'Invalid email').validate().isEmail()",
        "C": "validate('email').isEmail().error('Invalid email')",
        "D": "validator.isEmail('email').withMessage('Invalid email')"
      },
      "correct_answer": "A"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "topic": "Mongoose connection",
      "question": "What is the correct way to connect to MongoDB using Mongoose?",
      "code_example": "const mongoose = require('mongoose');\n\n// A: mongoose.connect('mongodb://localhost:27017/myapp')\n//      .then(() => console.log('Connected'))\n//      .catch(err => console.error('Connection error:', err));\n// B: mongoose.createConnection('mongodb://localhost:27017/myapp', (err) => {\n//      if (err) console.error('Connection error:', err);\n//      else console.log('Connected');\n//    });\n// C: mongoose.openConnection('mongodb://localhost:27017/myapp')\n//      .on('connected', () => console.log('Connected'))\n//      .on('error', err => console.error('Connection error:', err));\n// D: mongoose.db.connect('mongodb://localhost:27017/myapp', {\n//      onSuccess: () => console.log('Connected'),\n//      onError: err => console.error('Connection error:', err)\n//    });",
      "options": {
        "A": "mongoose.connect('mongodb://localhost:27017/myapp').then(() => console.log('Connected')).catch(err => console.error('Connection error:', err));",
        "B": "mongoose.createConnection('mongodb://localhost:27017/myapp', (err) => { if (err) console.error('Connection error:', err); else console.log('Connected'); });",
        "C": "mongoose.openConnection('mongodb://localhost:27017/myapp').on('connected', () => console.log('Connected')).on('error', err => console.error('Connection error:', err));",
        "D": "mongoose.db.connect('mongodb://localhost:27017/myapp', { onSuccess: () => console.log('Connected'), onError: err => console.error('Connection error:', err) });"
      },
      "correct_answer": "A"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "topic": "Middleware",
      "question": "What will be the output of the following Express middleware code?",
      "code_example": "const express = require('express');\nconst app = express();\n\napp.use((req, res, next) => {\n  console.log('Middleware 1');\n  next();\n});\n\napp.use((req, res, next) => {\n  console.log('Middleware 2');\n  // No next() call here\n});\n\napp.get('/', (req, res) => {\n  console.log('Route handler');\n  res.send('Hello');\n});\n\n// What will be logged when a GET request is made to '/'?",
      "options": {
        "A": "Middleware 1, Middleware 2, Route handler",
        "B": "Middleware 1, Middleware 2",
        "C": "Middleware 1, Route handler",
        "D": "Route handler"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "topic": "Express server",
      "question": "Which of the following correctly sets up a basic Express server that listens on port 3000?",
      "code_example": "const express = require('express');\n\n// A: const app = express();\n//    app.listen(3000, () => console.log('Server running on port 3000'));\n// B: express.createServer().listen(3000, () => console.log('Server running on port 3000'));\n// C: const app = new express();\n//    app.start(3000, () => console.log('Server running on port 3000'));\n// D: const server = express.listen(3000);\n//    server.on('listening', () => console.log('Server running on port 3000'));",
      "options": {
        "A": "const app = express(); app.listen(3000, () => console.log('Server running on port 3000'));",
        "B": "express.createServer().listen(3000, () => console.log('Server running on port 3000'));",
        "C": "const app = new express(); app.start(3000, () => console.log('Server running on port 3000'));",
        "D": "const server = express.listen(3000); server.on('listening', () => console.log('Server running on port 3000'));"
      },
      "correct_answer": "A"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the primary difference between WebSockets and REST APIs?",
      "options": {
        "A": "WebSockets use HTTP/2, while REST uses HTTP/1.1",
        "B": "WebSockets maintain a persistent connection, while REST follows a request-response pattern",
        "C": "WebSockets can only transmit text data, while REST can transmit any data format",
        "D": "WebSockets require authentication for every message, while REST authenticates per session"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "Which of the following code examples demonstrates a DOM-based XSS vulnerability?",
      "options": {
        "A": "app.get('/api/user', (req, res) => res.json({name: req.query.name}))",
        "B": "document.cookie = 'username=' + userName",
        "C": "document.getElementById('welcome').innerHTML = 'Hello, ' + location.hash.substring(1)",
        "D": "fetch('/api/data').then(res => res.json()).then(data => console.log(data))"
      },
      "correct_answer": "C",
      "code_example": "// Consider this code:\nconst displayGreeting = () => {\n  const userName = location.hash.substring(1);\n  document.getElementById('welcome').innerHTML = 'Hello, ' + userName;\n};\nwindow.addEventListener('hashchange', displayGreeting);"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates WeakMap's behavior with garbage collection?",
      "options": {
        "A": "{ name: 'User 1' } followed by undefined",
        "B": "{ name: 'User 1' } followed by { name: 'User 1' }",
        "C": "{ name: 'User 1' } followed by Error: Invalid key",
        "D": "undefined followed by undefined"
      },
      "correct_answer": "A",
      "code_example": "const cache = new WeakMap();\n\nlet user = { name: 'User 1' };\ncache.set(user, { data: 'User data' });\n\nconsole.log(user);\n\n// Simulate garbage collection by removing reference\nuser = null;\n\n// Create new object with same content but different reference\nuser = { name: 'User 1' };\nconsole.log(cache.get(user));"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "When implementing password hashing with bcrypt in Node.js, what is the correct approach?",
      "options": {
        "A": "Use a fixed, high salt round value (like 20) for maximum security",
        "B": "Store both the hash and the plaintext password for recovery purposes",
        "C": "Use async bcrypt methods with salt rounds between 10-12 for a good security/performance balance",
        "D": "Generate a new salt for each login attempt to prevent rainbow table attacks"
      },
      "correct_answer": "C",
      "code_example": "const bcrypt = require('bcrypt');\n\nasync function hashPassword(password) {\n  // Salt rounds: 10-12 is recommended for balance between security and performance\n  const saltRounds = 10;\n  const hash = await bcrypt.hash(password, saltRounds);\n  return hash;\n}\n\nasync function verifyPassword(password, storedHash) {\n  const match = await bcrypt.compare(password, storedHash);\n  return match;\n}"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "Which statement about Just-In-Time (JIT) compilation in JavaScript engines is correct?",
      "options": {
        "A": "JIT compilation always produces faster code than interpreted execution",
        "B": "JIT happens before code execution and remains static throughout runtime",
        "C": "JIT observes execution patterns and optimizes hot code paths at runtime",
        "D": "JIT compilation is only used for browser-based JavaScript, not in Node.js"
      },
      "correct_answer": "C"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be logged by the following Node.js EventEmitter code?",
      "options": {
        "A": "Data received, Processing complete",
        "B": "Processing complete, Data received",
        "C": "Data received (Processing complete will not be logged)",
        "D": "Processing complete (Data received will not be logged)"
      },
      "correct_answer": "A",
      "code_example": "const EventEmitter = require('events');\nconst dataEmitter = new EventEmitter();\n\ndataEmitter.once('data', () => {\n  console.log('Data received');\n});\n\ndataEmitter.on('end', () => {\n  console.log('Processing complete');\n});\n\n// Simulate async operations\nsetTimeout(() => {\n  dataEmitter.emit('data');\n  dataEmitter.emit('data'); // This won't trigger the listener due to .once()\n  dataEmitter.emit('end');\n}, 100);"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which of the following correctly describes the difference between Map and WeakMap in JavaScript?",
      "options": {
        "A": "Map allows any value as keys while WeakMap allows only strings and symbols",
        "B": "Map keeps strong references to key objects while WeakMap holds weak references allowing garbage collection",
        "C": "Map has a size property while WeakMap has a length property",
        "D": "Map is synchronous while WeakMap operations are asynchronous"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of this Node.js crypto module code?",
      "options": {
        "A": "An error because createCipher is deprecated",
        "B": "hello world",
        "C": "A base64 string followed by hello world",
        "D": "A base64 string followed by a different string"
      },
      "correct_answer": "C",
      "code_example": "const crypto = require('crypto');\n\nconst algorithm = 'aes-256-cbc';\nconst key = crypto.scryptSync('secret-key', 'salt', 32);\nconst iv = crypto.randomBytes(16);\n\nfunction encrypt(text) {\n  const cipher = crypto.createCipheriv(algorithm, key, iv);\n  let encrypted = cipher.update(text, 'utf8', 'base64');\n  encrypted += cipher.final('base64');\n  return encrypted;\n}\n\nfunction decrypt(encryptedText) {\n  const decipher = crypto.createDecipheriv(algorithm, key, iv);\n  let decrypted = decipher.update(encryptedText, 'base64', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n\nconst message = 'hello world';\nconst encryptedMessage = encrypt(message);\nconsole.log(encryptedMessage);\nconst decryptedMessage = decrypt(encryptedMessage);\nconsole.log(decryptedMessage);"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "In a proper implementation of CSRF protection for a Node.js application, which approach is most secure?",
      "options": {
        "A": "Using the 'same-origin' value for the Access-Control-Allow-Origin header",
        "B": "Generating a unique token per session and including it in forms and AJAX requests",
        "C": "Setting HttpOnly cookies for all authentication tokens",
        "D": "Implementing request rate limiting based on IP address"
      },
      "correct_answer": "B",
      "code_example": "const express = require('express');\nconst csrf = require('csurf');\nconst cookieParser = require('cookie-parser');\n\nconst app = express();\n\n// Setup middleware\napp.use(cookieParser());\napp.use(express.urlencoded({ extended: true }));\n\n// Create CSRF protection middleware\nconst csrfProtection = csrf({ cookie: true });\n\n// Apply CSRF protection to routes that need it\napp.get('/form', csrfProtection, (req, res) => {\n  // Pass the CSRF token to the view\n  res.render('form', { csrfToken: req.csrfToken() });\n});\n\napp.post('/submit', csrfProtection, (req, res) => {\n  // CSRF token is automatically validated\n  res.send('Form submitted successfully');\n});"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which statement about using winston for log monitoring in Node.js is correct?",
      "options": {
        "A": "winston can only log to the console and cannot write to files",
        "B": "winston levels are fixed and cannot be customized beyond the default error, warn, info, etc.",
        "C": "winston supports multiple transports allowing logs to be sent to different outputs simultaneously",
        "D": "winston is synchronous, which can block the event loop when logging large volumes of data"
      },
      "correct_answer": "C",
      "code_example": "const winston = require('winston');\nconst { format, transports } = winston;\n\n// Define custom format\nconst logFormat = format.combine(\n  format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  format.errors({ stack: true }),\n  format.splat(),\n  format.json()\n);\n\n// Create logger with multiple transports\nconst logger = winston.createLogger({\n  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n  format: logFormat,\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    // Console transport for development\n    new transports.Console({\n      format: format.combine(\n        format.colorize(),\n        format.simple()\n      )\n    }),\n    // File transport for production logs\n    new transports.File({ filename: 'error.log', level: 'error' }),\n    new transports.File({ filename: 'combined.log' })\n  ]\n});"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates how WeakSet differs from Set?",
      "options": {
        "A": "true, true, false, true",
        "B": "true, true, false, false",
        "C": "true, true, true, false",
        "D": "true, false, false, false"
      },
      "correct_answer": "B",
      "code_example": "const set = new Set();\nconst weakSet = new WeakSet();\n\nlet obj1 = { name: 'Object 1' };\nlet obj2 = { name: 'Object 2' };\n\n// Add objects to both collections\nset.add(obj1);\nweakSet.add(obj2);\n\n// Check membership\nconsole.log(set.has(obj1));\nconsole.log(weakSet.has(obj2));\n\n// Try to add a primitive to each\ntry {\n  set.add(42);\n  console.log(true);\n} catch {\n  console.log(false);\n}\n\ntry {\n  weakSet.add(42);\n  console.log(true);\n} catch {\n  console.log(false);\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "Which of the following docker-compose.yml configurations is correct for setting up a Node.js application with MongoDB?",
      "options": {
        "A": "A configuration with mongodb using port 27018 and nodeapp using host network mode",
        "B": "A configuration with properly defined services, networks, and volume mounts for data persistence",
        "C": "A configuration that uses the privileged flag for the nodeapp service to access host resources",
        "D": "A configuration where MongoDB runs inside the Node.js container for simplified deployment"
      },
      "correct_answer": "B",
      "code_example": "version: '3.8'\n\nservices:\n  nodeapp:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: node_app\n    restart: unless-stopped\n    ports:\n      - \"3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - MONGO_URI=mongodb://mongodb:27017/myapp\n    depends_on:\n      - mongodb\n    networks:\n      - app-network\n    volumes:\n      - ./logs:/app/logs\n\n  mongodb:\n    image: mongo:4.4\n    container_name: mongodb\n    restart: unless-stopped\n    ports:\n      - \"27017:27017\"\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=admin\n      - MONGO_INITDB_ROOT_PASSWORD=password\n      - MONGO_INITDB_DATABASE=myapp\n    volumes:\n      - mongodb-data:/data/db\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\n\nvolumes:\n  mongodb-data:\n    driver: local"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "When using Nginx as a reverse proxy for a Node.js application, which configuration is most secure?",
      "options": {
        "A": "A configuration that passes all headers directly to the Node.js application",
        "B": "A configuration that sets up SSL termination, security headers, and proper upstream definitions",
        "C": "A configuration that uses HTTP Basic Authentication for all routes",
        "D": "A configuration that caches all responses for improved performance"
      },
      "correct_answer": "B",
      "code_example": "# /etc/nginx/sites-available/nodejs-app\n\nupstream nodejs_app {\n    server 127.0.0.1:3000;\n    keepalive 64;\n}\n\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n    \n    # Redirect all HTTP traffic to HTTPS\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name example.com www.example.com;\n    \n    # SSL configuration\n    ssl_certificate /etc/nginx/ssl/example.com.crt;\n    ssl_certificate_key /etc/nginx/ssl/example.com.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';\n    ssl_session_cache shared:SSL:10m;\n    \n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    \n    # Proxy settings\n    location / {\n        proxy_pass http://nodejs_app;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be the result of the following code that demonstrates a memory-sensitive caching implementation with WeakMap?",
      "options": {
        "A": "true false",
        "B": "true true",
        "C": "{ data: 'Cached API Response for User 1' } undefined",
        "D": "{ data: 'Cached API Response for User 1' } { data: 'Cached API Response for User 1' }"
      },
      "correct_answer": "C",
      "code_example": "// Memory-sensitive caching implementation using WeakMap\nclass APICache {\n  constructor() {\n    this.cache = new WeakMap();\n  }\n  \n  getCachedResponse(user) {\n    return this.cache.get(user);\n  }\n  \n  cacheResponse(user, data) {\n    this.cache.set(user, data);\n  }\n}\n\nconst apiCache = new APICache();\n\n// User object that will be our key\nlet user1 = { id: 1, name: 'User 1' };\n\n// Cache some data for this user\napiCache.cacheResponse(user1, { data: 'Cached API Response for User 1' });\n\n// Get the cached data\nconsole.log(apiCache.getCachedResponse(user1));\n\n// Simulate the user object being garbage collected\nuser1 = null;\n\n// Create a new object with the same content\nuser1 = { id: 1, name: 'User 1' };\n\n// Try to get the cached data with the new object reference\nconsole.log(apiCache.getCachedResponse(user1));"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "When using Helmet.js to protect against XSS attacks in Express.js, which statement is correct?",
      "options": {
        "A": "helmet() enables all security middlewares by default, including Content-Security-Policy",
        "B": "helmet.xss() must be called explicitly as it's not included in the default helmet() call",
        "C": "helmet() completely eliminates all XSS vulnerabilities without additional measures",
        "D": "helmet() can only protect against reflected XSS, not stored or DOM-based XSS"
      },
      "correct_answer": "A",
      "code_example": "const express = require('express');\nconst helmet = require('helmet');\n\nconst app = express();\n\n// Basic usage applies all default middleware\napp.use(helmet());\n\n// Custom CSP configuration\napp.use(\n  helmet.contentSecurityPolicy({\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'https://trusted-cdn.com'\"],\n      styleSrc: [\"'self'\", \"'https://trusted-cdn.com'\"],\n      imgSrc: [\"'self'\", \"data:\", \"'https://trusted-cdn.com'\"],\n      connectSrc: [\"'self'\", \"'https://api.example.com'\"],\n      fontSrc: [\"'self'\", \"'https://trusted-cdn.com'\"],\n      objectSrc: [\"'none'\"],\n      mediaSrc: [\"'self'\"],\n      frameSrc: [\"'none'\"],\n      sandbox: ['allow-forms', 'allow-scripts'],\n      reportUri: '/report-violation',\n      upgradeInsecureRequests: true\n    }\n  })\n);\n\napp.get('/', (req, res) => {\n  res.send('Helmet is protecting this route');\n});"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What is the best practice for securing JWT secrets in a Node.js application?",
      "options": {
        "A": "Hardcode the secret in the application code for easy deployment",
        "B": "Use a short, simple secret that's easy to remember",
        "C": "Store the secret in environment variables or a secure secrets management service",
        "D": "Regenerate the secret every day for maximum security"
      },
      "correct_answer": "C"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "When using GraphQL, what is its primary advantage over REST for frontend applications?",
      "options": {
        "A": "GraphQL always provides better security than REST",
        "B": "GraphQL allows clients to request exactly the data they need in a single request",
        "C": "GraphQL automatically caches all responses on the client",
        "D": "GraphQL supports WebSocket connections but REST doesn't"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of this Node.js code that demonstrates handling real-time data with streams?",
      "options": {
        "A": "Processing chunk: Buffer data 1, Processing chunk: Buffer data 2, Stream ended",
        "B": "Processing chunk: Buffer data 1, Processing chunk: Buffer data 2 Buffer data 3, Stream ended",
        "C": "Processing chunk: data 1, Processing chunk: data 2, Stream ended",
        "D": "Processing chunk: data 1, Stream ended, Processing chunk: data 2"
      },
      "correct_answer": "C",
      "code_example": "const { Readable, Transform } = require('stream');\n\n// Create a custom readable stream to simulate real-time data\nclass DataSource extends Readable {\n  constructor(options) {\n    super(options);\n    this.data = ['data 1', 'data 2'];\n    this.index = 0;\n  }\n  \n  _read() {\n    if (this.index < this.data.length) {\n      // Simulate async data arrival\n      setTimeout(() => {\n        this.push(this.data[this.index]);\n        this.index++;\n      }, 100);\n    } else {\n      this.push(null); // End of stream\n    }\n  }\n}\n\n// Create a transform stream to process the data\nconst processor = new Transform({\n  transform(chunk, encoding, callback) {\n    console.log('Processing chunk:', chunk.toString());\n    callback(null, chunk);\n  }\n});\n\n// Set up the pipeline\nconst source = new DataSource();\nsource\n  .pipe(processor)\n  .on('end', () => {\n    console.log('Stream ended');\n  });"
    }
  ]
}
