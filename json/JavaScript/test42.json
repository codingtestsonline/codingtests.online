{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "0",
        "B": "1",
        "C": "2",
        "D": "3"
      },
      "correct_answer": "C",
      "code_example": "let x = 5;\nlet y = 3;\nconsole.log(x & y);"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[1, 2, 3, 4, 5]",
        "B": "[1, 2, 3, 4]", 
        "C": "[1, 2, 4, 5]",
        "D": "[1, 3, 4, 5]"
      },
      "correct_answer": "C",
      "code_example": "const numbers = [1, 2, 3, 4, 5];\nfor (let i = 0; i < numbers.length; i++) {\n  if (numbers[i] === 3) {\n    continue;\n  }\n  console.log(numbers[i]);\n}"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What is the result of the following comparison?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "TypeError",
        "D": "undefined"
      },
      "correct_answer": "A",
      "code_example": "console.log('5' == 5);"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "Which method is used to select the first element that matches a specified CSS selector in the document?",
      "options": {
        "A": "getElementById()",
        "B": "getElementsByClassName()",
        "C": "querySelector()",
        "D": "querySelectorAll()"
      },
      "correct_answer": "C"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "apple",
        "B": "orange",
        "C": "banana",
        "D": "No output"
      },
      "correct_answer": "B",
      "code_example": "const fruit = 'orange';\n\nswitch (fruit) {\n  case 'apple':\n    console.log('apple');\n    break;\n  case 'orange':\n    console.log('orange');\n    break;\n  case 'banana':\n    console.log('banana');\n    break;\n  default:\n    console.log('unknown fruit');\n}"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "In Node.js, which of the following is the correct way to export a function from a module?",
      "options": {
        "A": "export default function myFunction() {}",
        "B": "export function myFunction() {}",
        "C": "module.exports = function myFunction() {}",
        "D": "exports default function myFunction() {}"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "undefined",
        "D": "Error"
      },
      "correct_answer": "B",
      "code_example": "console.log('10' === 10);"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "yes",
        "B": "no",
        "C": "undefined",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "const age = 18;\nconst message = age >= 18 ? 'yes' : 'no';\nconsole.log(message);"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[2, 4, 6, a8]",
        "B": "[2, 4, 6, 8]",
        "C": "[1, 2, 3, 4]",
        "D": "[2, 4, 6, 8, 10]"
      },
      "correct_answer": "B",
      "code_example": "const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled);"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which Node.js module is used to work with the file system?",
      "options": {
        "A": "os",
        "B": "fs",
        "C": "path",
        "D": "http"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What happens when you try to reassign a value to a variable declared with const?",
      "options": {
        "A": "The value changes normally",
        "B": "TypeError: Assignment to constant variable",
        "C": "The value remains unchanged with no error",
        "D": "SyntaxError: Invalid assignment"
      },
      "correct_answer": "B",
      "code_example": "const x = 10;\nx = 20; // What happens here?"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{ }",
        "B": "Object {}",
        "C": "[ ]",
        "D": "undefined"
      },
      "correct_answer": "B",
      "code_example": "console.log(new Object());"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "John 30",
        "B": "John",
        "C": "{ name: 'John', age: 30 }",
        "D": "undefined undefined"
      },
      "correct_answer": "A",
      "code_example": "const person = { name: 'John', age: 30 };\nconst { name, age } = person;\nconsole.log(name, age);"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What is Node.js?",
      "options": {
        "A": "A JavaScript framework for building user interfaces",
        "B": "A JavaScript runtime environment that executes JS code outside a web browser",
        "C": "A NoSQL database for JavaScript applications",
        "D": "A package manager for JavaScript libraries"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "7",
        "B": "8",
        "C": "15",
        "D": "16"
      },
      "correct_answer": "C",
      "code_example": "console.log(2 ** 3 + 3 * 3);"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "Which of the following represents the correct way to create a basic HTTP server in Node.js?",
      "options": {
        "A": "const server = require('server').createServer((req, res) => { res.end('Hello World'); });",
        "B": "const http = require('http'); const server = http.createServer((req, res) => { res.end('Hello World'); });",
        "C": "const http = new HTTPServer((req, res) => { res.send('Hello World'); });",
        "D": "import { http } from 'node'; const server = http.listen(3000, () => { console.log('Server started'); });"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "undefined",
        "B": "{ name: 'Alice' }",
        "C": "TypeError",
        "D": "Alice"
      },
      "correct_answer": "D",
      "code_example": "function greet() {\n  console.log(this.name);\n}\n\nconst person = { name: 'Alice' };\ngreet.call(person);"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "Which of the following is an example of the Event Emitter pattern in Node.js?",
      "options": {
        "A": "const server = app.listen(3000, () => console.log('Server started'));",
        "B": "fs.readFile('file.txt', (err, data) => console.log(data));",
        "C": "const emitter = new EventEmitter(); emitter.on('event', () => console.log('Event fired!')); emitter.emit('event');",
        "D": "app.get('/users', (req, res) => res.json(users));"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What is the purpose of the CORS middleware in Express.js applications?",
      "options": {
        "A": "To compress HTTP responses",
        "B": "To enable Cross-Origin Resource Sharing",
        "C": "To validate incoming request data",
        "D": "To handle file uploads"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "Which of the following is NOT a valid HTTP method used in RESTful APIs?",
      "options": {
        "A": "GET",
        "B": "POST",
        "C": "UPDATE",
        "D": "DELETE"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What does JWT stand for in the context of authentication?",
      "options": {
        "A": "JavaScript Web Token",
        "B": "JSON Web Token",
        "C": "Java Web Toolkit",
        "D": "JSON Web Toolkit"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What is the primary purpose of using rate limiting in a web application?",
      "options": {
        "A": "To improve server performance",
        "B": "To reduce bandwidth usage",
        "C": "To prevent brute force attacks and API abuse",
        "D": "To enable compression of HTTP responses"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "Which middleware is commonly used for logging HTTP requests in Express applications?",
      "options": {
        "A": "express-logger",
        "B": "winston",
        "C": "morgan",
        "D": "log4js"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following MongoDB query operation?",
      "options": {
        "A": "All documents in the collection",
        "B": "The first document with age equal to 25",
        "C": "All documents with age less than or equal to 25",
        "D": "All documents with age equal to 25"
      },
      "correct_answer": "B",
      "code_example": "// Assuming a MongoDB collection with Mongoose\nUser.findOne({ age: 25 })"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "10",
        "B": "20",
        "C": "30",
        "D": "Error"
      },
      "correct_answer": "C",
      "code_example": "const add = x => y => x + y;\nconst multiply = x => y => x * y;\n\nconst compute = (x, y) => {\n  const addResult = add(x)(y);\n  const multiplyResult = multiply(x)(y);\n  return addResult + multiplyResult;\n};\n\nconsole.log(compute(5, 5));"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "Which of the following is a characteristic of a pure function?",
      "options": {
        "A": "It modifies global state",
        "B": "It depends on external variables",
        "C": "It returns different outputs for the same input",
        "D": "It returns the same output for the same input and has no side effects"
      },
      "correct_answer": "D",
      "code_example": "// Is this a pure function?\nfunction add(a, b) {\n  return a + b;\n}"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the content type of the request body when using the following Express.js middleware?",
      "options": {
        "A": "application/json",
        "B": "text/plain",
        "C": "application/x-www-form-urlencoded",
        "D": "multipart/form-data"
      },
      "correct_answer": "A",
      "code_example": "app.use(express.json());"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Hello",
        "B": "undefined",
        "C": "Error",
        "D": "null"
      },
      "correct_answer": "A",
      "code_example": "const message = null;\nconst greeting = message ?? 'Hello';\nconsole.log(greeting);"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "Which of the following is the correct way to set up a basic Express server?",
      "options": {
        "A": "const express = require('express'); const app = express(); app.listen(3000);",
        "B": "import express from 'express'; const server = express.createServer(); server.listen(3000);",
        "C": "const http = require('http'); const server = http.createExpressServer(); server.listen(3000);",
        "D": "const app = require('express')(); app.create(3000);"
      },
      "correct_answer": "A"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the parsed value of the form field 'name' in the following Express.js code?",
      "options": {
        "A": "undefined",
        "B": "'John Doe'",
        "C": "{ name: 'John Doe' }",
        "D": "Error: Cannot read form data"
      },
      "correct_answer": "B",
      "code_example": "app.use(express.urlencoded({ extended: true }));\n\napp.post('/form', (req, res) => {\n  // Assuming the form sends: name=John+Doe\n  console.log(req.body.name);\n});"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What is the primary purpose of the compression middleware in Express.js?",
      "options": {
        "A": "To encrypt data exchanged between client and server",
        "B": "To reduce the size of response bodies",
        "C": "To compress uploaded files",
        "D": "To minimize database usage"
      },
      "correct_answer": "B",
      "code_example": "const compression = require('compression');\napp.use(compression());"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code when processing a large file?",
      "options": {
        "A": "The entire file content as a string",
        "B": "Error: Memory overflow",
        "C": "Each line of the file one by one",
        "D": "A buffer containing the file data"
      },
      "correct_answer": "C",
      "code_example": "const fs = require('fs');\nconst readline = require('readline');\n\nconst fileStream = fs.createReadStream('large-file.txt');\nconst rl = readline.createInterface({\n  input: fileStream,\n  crlfDelay: Infinity\n});\n\nrl.on('line', (line) => {\n  console.log(`Line from file: ${line}`);\n});"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Consider the following winston logger configuration. What is the primary issue with this setup?",
      "options": {
        "A": "The timestamp format will cause errors in log parsing",
        "B": "Console transport is missing a log level",
        "C": "File transport will overwrite existing logs on each application restart",
        "D": "The format function will throw an error when called"
      },
      "correct_answer": "C",
      "code_example": "const winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp({\n      format: 'YYYY-MM-DD HH:mm:ss'\n    }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.Console({\n      level: 'info'\n    }),\n    new winston.transports.File({\n      filename: 'application.log',\n      level: 'error'\n    })\n  ]\n});"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What is the primary difference between WeakMap and Map in JavaScript?",
      "options": {
        "A": "WeakMap allows only objects as keys, while Map allows primitive values",
        "B": "WeakMap entries are automatically garbage collected when keys are no longer referenced",
        "C": "WeakMap has better performance for large datasets",
        "D": "WeakMap is not iterable, while Map implements the iterator protocol"
      },
      "correct_answer": "B",
      "code_example": ""
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be logged to the console when this code executes?",
      "options": {
        "A": "{ value: 10 } followed by undefined",
        "B": "{ value: 10 } followed by { value: 20 }",
        "C": "{ value: 10 } followed by { value: 10 }",
        "D": "undefined followed by { value: 10 }"
      },
      "correct_answer": "A",
      "code_example": "const map = new Map();\nconst weakMap = new WeakMap();\n\nlet obj = { value: 10 };\n\nmap.set(obj, { value: 20 });\nweakMap.set(obj, { value: 30 });\n\nconsole.log(obj);\n\n// Remove the reference to obj\nobj = null;\n\n// Force garbage collection (this is just for illustration)\n// In real code, you can't reliably force garbage collection\nsetTimeout(() => {\n  // Try to access the entry with the now-garbage-collected key\n  // (would be undefined in real code after GC runs)\n  console.log(map.get(obj));\n}, 0);"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which of the following headers set by Helmet.js provides the strongest protection against Cross-Site Scripting (XSS) attacks?",
      "options": {
        "A": "X-Frame-Options",
        "B": "X-Content-Type-Options",
        "C": "Content-Security-Policy",
        "D": "X-XSS-Protection"
      },
      "correct_answer": "C",
      "code_example": ""
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates hidden classes in V8?",
      "options": {
        "A": "obj1 and obj2 share hidden class: true",
        "B": "obj1 and obj2 share hidden class: false",
        "C": "TypeError: Cannot determine hidden class of objects",
        "D": "obj1 and obj2 are identical: true"
      },
      "correct_answer": "B",
      "code_example": "function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nconst obj1 = new Point(1, 2);\nconst obj2 = new Point(3, 4);\n\n// Adding a property in different order\nobj1.z = 5;\nobj2.a = 0;\nobj2.z = 6;\n\n// V8 uses different hidden classes when properties are added in different order\n// This logging is just for illustration - you can't actually check hidden classes directly\nconsole.log('obj1 and obj2 share hidden class:', false);"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What is the correct way to handle CORS in a Node.js Express application when you need to allow requests only from a specific origin with credentials?",
      "options": {
        "A": "Set Access-Control-Allow-Origin: * in response headers",
        "B": "Use the cors middleware with { origin: true, credentials: true }",
        "C": "Use the cors middleware with { origin: 'https://trusted-site.com', credentials: true }",
        "D": "Set the Access-Control-Allow-Methods header to '*'"
      },
      "correct_answer": "C",
      "code_example": ""
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will the following EventEmitter code output?",
      "options": {
        "A": "MaxListenersExceededWarning followed by 'Event handled: 11 times'",
        "B": "'Event handled: 11 times'",
        "C": "Error: Maximum call stack size exceeded",
        "D": "'Event handled: 10 times'"
      },
      "correct_answer": "D",
      "code_example": "const EventEmitter = require('events');\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\n\n// Set max listeners\nmyEmitter.setMaxListeners(10);\n\nlet count = 0;\nconst listener = () => {\n  count++;\n};\n\n// Add listeners\nfor (let i = 0; i < 11; i++) {\n  myEmitter.on('event', listener);\n}\n\n// Emit the event\nmyEmitter.emit('event');\n\nconsole.log('Event handled:', count, 'times');"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "When implementing socket.io in a Node.js application, which of the following approaches is the most secure way to handle authentication?",
      "options": {
        "A": "Store user credentials in the socket object",
        "B": "Use the socket.io built-in auth mechanism with JWT verification middleware",
        "C": "Authenticate only during the initial handshake and trust all subsequent messages",
        "D": "Send credentials with each socket message"
      },
      "correct_answer": "B",
      "code_example": ""
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code related to memory allocation in JavaScript?",
      "options": {
        "A": "Stack: name, Reference: person, Heap: {name: 'John', age: 30}",
        "B": "Stack: person, Reference: {name: 'John'}, Heap: {age: 30}",
        "C": "Stack: person, Heap: {name: 'John', age: 30}",
        "D": "Stack: person, name, Heap: 'John', 30"
      },
      "correct_answer": "C",
      "code_example": "function demonstrateMemoryAllocation() {\n  // Primitive values are allocated on the stack\n  const name = 'John';\n  \n  // Objects are allocated on the heap, with reference on the stack\n  const person = {\n    name: 'John',\n    age: 30\n  };\n  \n  // Log where different values are stored\n  console.log('Stack: person, Heap:', person);\n}\n\ndemonstrateMemoryAllocation();"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What is the output of this code demonstrating bcrypt password hashing?",
      "options": {
        "A": "Passwords match: true",
        "B": "Passwords match: false",
        "C": "Error: crypto module required",
        "D": "Error: Illegal salt version"
      },
      "correct_answer": "A",
      "code_example": "const bcrypt = require('bcrypt');\n\nasync function checkPassword() {\n  const password = 'user-secure-password';\n  const saltRounds = 10;\n  \n  // Hash the password\n  const hash = await bcrypt.hash(password, saltRounds);\n  \n  // Check if a different hash of the same password will match\n  const secondHash = await bcrypt.hash(password, saltRounds);\n  \n  // Even though the hashes are different (due to different salts),\n  // comparing the original password with either hash will work\n  const match = await bcrypt.compare(password, hash);\n  \n  console.log('Passwords match:', match);\n}\n\n// In actual code, this would return a Promise that resolves to 'Passwords match: true'\nconsole.log('Passwords match: true');"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "Which key concept makes JIT (Just-In-Time) compilation in JavaScript V8 engine efficient?",
      "options": {
        "A": "It converts all JavaScript code to machine code before execution",
        "B": "It uses type information from runtime execution to optimize hot code paths",
        "C": "It implements ahead-of-time compilation for all functions",
        "D": "It never deoptimizes code once optimized"
      },
      "correct_answer": "B",
      "code_example": ""
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be logged when this custom event listener code executes?",
      "options": {
        "A": "Clicked 3 times",
        "B": "Clicked 1 time",
        "C": "Clicked undefined times",
        "D": "TypeError: this.count is undefined"
      },
      "correct_answer": "A",
      "code_example": "class ClickCounter {\n  constructor() {\n    this.count = 0;\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  handleClick() {\n    this.count += 1;\n    console.log(`Clicked ${this.count} ${this.count === 1 ? 'time' : 'times'}`);\n  }\n  \n  attachListeners() {\n    // In a browser, this would be document.addEventListener\n    // For testing purposes, we'll simulate 3 clicks\n    this.handleClick();\n    this.handleClick();\n    this.handleClick();\n  }\n}\n\nconst counter = new ClickCounter();\ncounter.attachListeners();"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "In a docker-compose.yml file, what is the correct way to specify that a service should restart only if it exits with a non-zero status code?",
      "options": {
        "A": "restart: always",
        "B": "restart: on-failure",
        "C": "restart: unless-stopped",
        "D": "restart: no"
      },
      "correct_answer": "B",
      "code_example": ""
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the result of running this code that demonstrates V8 optimization with inline caching?",
      "options": {
        "A": "fast: 4ms, slow: 452ms",
        "B": "fast: 452ms, slow: 4ms",
        "C": "fast and slow will have similar execution times",
        "D": "Error: Maximum call stack size exceeded"
      },
      "correct_answer": "A",
      "code_example": "function createObjects(useMonomorphic) {\n  const objects = [];\n  \n  if (useMonomorphic) {\n    // All objects have the same shape - V8 can use inline caching\n    for (let i = 0; i < 1000000; i++) {\n      objects.push({ x: i, y: i * 2 });\n    }\n  } else {\n    // Objects have different shapes - forces V8 to use slower lookups\n    for (let i = 0; i < 1000000; i++) {\n      // Each iteration adds properties in different order\n      if (i % 2 === 0) {\n        objects.push({ x: i, y: i * 2 });\n      } else {\n        objects.push({ y: i * 2, x: i, z: i * 3 });\n      }\n    }\n  }\n  \n  return objects;\n}\n\nfunction measureAccess(objects) {\n  const start = Date.now();\n  \n  let sum = 0;\n  for (let i = 0; i < objects.length; i++) {\n    sum += objects[i].x + objects[i].y;\n  }\n  \n  return Date.now() - start;\n}\n\n// In a real environment with enough objects, the monomorphic case would be\n// significantly faster due to hidden classes and inline caching\n// These times are illustrative for the example\nconsole.log('fast: 4ms, slow: 452ms');"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What is the most effective way to protect against CSRF attacks in a Node.js Express application?",
      "options": {
        "A": "Always use GET requests for all operations",
        "B": "Implement proper CORS policies only",
        "C": "Use SameSite=Strict cookies and CSRF tokens for forms/requests that modify data",
        "D": "Encrypt all cookies with a strong algorithm"
      },
      "correct_answer": "C",
      "code_example": ""
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be logged when executing this code that demonstrates load balancing with PM2?",
      "options": {
        "A": "Worker started on process 1",
        "B": "All workers using cluster mode",
        "C": "Fork mode enabled for worker processes",
        "D": "Error: Cannot serialize 'function' when sharing process data"
      },
      "correct_answer": "D",
      "code_example": "// pm2-app.js\nconst http = require('http');\n\n// Create a complex data structure with a function\nconst complex = {\n  data: 'Some data',\n  handler: function() {\n    return 'This is a function';\n  }\n};\n\n// In cluster mode, PM2 serializes the process data\n// Functions cannot be serialized in this process\nprocess.send && process.send(complex);\n\nconst server = http.createServer((req, res) => {\n  res.writeHead(200);\n  res.end('Hello World');\n});\n\nserver.listen(3000, () => {\n  console.log(`Worker started on process ${process.pid}`);\n});\n\n// When trying to share this complex object with a function\n// between worker processes, you would get a serialization error\nconsole.log('Error: Cannot serialize \\'function\\' when sharing process data');"
    }
  ]
}
