{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const arr = [1, 2, 3, 4];\narr.push(5);\nconsole.log(arr.length);",
      "options": {
        "A": "4",
        "B": "5",
        "C": "6",
        "D": "undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What is the purpose of the Array.prototype.slice() method?",
      "options": {
        "A": "Adds elements to the end of an array",
        "B": "Removes elements from an array",
        "C": "Creates a shallow copy of a portion of an array",
        "D": "Sorts the elements of an array"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let num = parseInt('42px');\nconsole.log(num);",
      "options": {
        "A": "42",
        "B": "42px",
        "C": "NaN",
        "D": "Error"
      },
      "correct_answer": "A"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(true && false || true);",
      "options": {
        "A": "true",
        "B": "false",
        "C": "undefined",
        "D": "null"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "Which of the following best describes Node.js?",
      "options": {
        "A": "A JavaScript framework for building user interfaces",
        "B": "A runtime environment that executes JavaScript code outside a web browser",
        "C": "A JavaScript library for DOM manipulation",
        "D": "A server-side programming language"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "function greet(name, callback) {\n  const greeting = `Hello, ${name}!`;\n  callback(greeting);\n}\n\ngreet('John', function(message) {\n  console.log(message);\n});",
      "options": {
        "A": "Hello, John!",
        "B": "function(message) { console.log(message); }",
        "C": "undefined",
        "D": "Error"
      },
      "correct_answer": "A"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = { name: 'John' };\nconst arr = [1, 2, 3];\nconst func = function() {};\n\nconsole.log(typeof obj, typeof arr, typeof func);",
      "options": {
        "A": "object object object",
        "B": "object array function",
        "C": "object object function",
        "D": "{} [] function()"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(greet('John'));\n\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}",
      "options": {
        "A": "Hello, John!",
        "B": "undefined",
        "C": "ReferenceError: greet is not defined",
        "D": "function greet(name) { return `Hello, ${name}!`; }"
      },
      "correct_answer": "A"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "Which field in package.json specifies the entry point to your application?",
      "options": {
        "A": "start",
        "B": "entry",
        "C": "main",
        "D": "index"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let x = 10;\nconst y = 20;\nvar z = 30;\n\n{\n  let x = 40;\n  const y = 50;\n  var z = 60;\n  console.log(x, y, z);\n}\n\nconsole.log(x, y, z);",
      "options": {
        "A": "40 50 60, 10 20 30",
        "B": "40 50 60, 10 20 60",
        "C": "40 50 60, 40 50 60",
        "D": "10 20 30, 10 20 30"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "console.log(5 == '5');\nconsole.log(5 === '5');",
      "options": {
        "A": "true true",
        "B": "false false",
        "C": "true false",
        "D": "false true"
      },
      "correct_answer": "C"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What is event bubbling in JavaScript?",
      "options": {
        "A": "A process where an event handler executes multiple times",
        "B": "A process where events propagate from the target element up through its ancestors",
        "C": "A process where events propagate from the document root down to the target element",
        "D": "A method to prevent default actions on events"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const div = document.createElement('div');\ndiv.textContent = 'Hello';\ndiv.innerHTML = '<strong>World</strong>';\nconsole.log(div.textContent);",
      "options": {
        "A": "Hello",
        "B": "World",
        "C": "<strong>World</strong>",
        "D": "Hello World"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "let x = 10;\n\nfunction foo() {\n  let x = 20;\n  console.log(x);\n}\n\nfoo();\nconsole.log(x);",
      "options": {
        "A": "10, 10",
        "B": "20, 20",
        "C": "20, 10",
        "D": "10, 20"
      },
      "correct_answer": "C"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What is the difference between function declarations and function expressions?",
      "options": {
        "A": "Function declarations are hoisted, while function expressions are not",
        "B": "Function declarations cannot be anonymous, while function expressions can",
        "C": "Both A and B",
        "D": "There is no difference"
      },
      "correct_answer": "C"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "const name = 'John';\nconst age = 30;\nconst message = `${name} is ${age} years old`;\nconsole.log(message);",
      "options": {
        "A": "${name} is ${age} years old",
        "B": "name is age years old",
        "C": "John is 30 years old",
        "D": "TypeError: Template literals must be string literals"
      },
      "correct_answer": "C"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will happen when the following code is executed?",
      "code_example": "function doSomething(callback) {\n  setTimeout(() => {\n    const data = 'Important data';\n    callback(data);\n  }, 1000);\n}\n\ndoSomething(function(data) {\n  console.log('Data received:', data);\n});\nconsole.log('End of script');",
      "options": {
        "A": "'Data received: Important data' is logged, then 'End of script'",
        "B": "'End of script' is logged, then 'Data received: Important data'",
        "C": "Only 'End of script' is logged",
        "D": "Only 'Data received: Important data' is logged"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const person = {\n  name: 'John',\n  age: 30,\n  address: {\n    city: 'New York',\n    country: 'USA'\n  }\n};\n\nconst { name, address: { city } } = person;\nconsole.log(name, city);",
      "options": {
        "A": "John { city: 'New York' }",
        "B": "John New York",
        "C": "undefined undefined",
        "D": "John undefined"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "Which of the following is the best approach for lazy loading images in a web application?",
      "options": {
        "A": "Using the onerror attribute on all image tags",
        "B": "Using the loading='lazy' attribute on img tags",
        "C": "Loading all images immediately for better user experience",
        "D": "Disabling images altogether to improve performance"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const EventEmitter = require('events');\nconst myEmitter = new EventEmitter();\n\nmyEmitter.on('event', (a, b) => {\n  console.log(a, b);\n});\n\nmyEmitter.emit('event', 'Hello', 'World');",
      "options": {
        "A": "Hello World",
        "B": "event event",
        "C": "undefined undefined",
        "D": "No output, as EventEmitter is asynchronous"
      },
      "correct_answer": "A"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "Which of the following can help minimize DOM reflows?",
      "options": {
        "A": "Updating DOM elements individually",
        "B": "Using document.write() for dynamic content",
        "C": "Batching DOM updates and using document fragments",
        "D": "Nesting CSS selectors extensively"
      },
      "correct_answer": "C"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following Express.js code?",
      "code_example": "const express = require('express');\nconst router = express.Router();\n\nrouter.get('/users', (req, res) => {\n  res.send('Get users');\n});\n\nrouter.post('/users', (req, res) => {\n  res.send('Create user');\n});\n\nconst app = express();\napp.use('/api', router);\n\n// Which URL path will match the route to 'Get users'?",
      "options": {
        "A": "GET /users",
        "B": "GET /api",
        "C": "GET /api/users",
        "D": "POST /api/users"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "Which approach would best prevent NoSQL injection in a MongoDB application?",
      "options": {
        "A": "Using raw user input directly in query parameters",
        "B": "Using sanitize-html and validating input against a schema",
        "C": "Disabling JavaScript execution in MongoDB",
        "D": "Using SQL prepared statements"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function multiply(a, b = 1) {\n  return a * b;\n}\n\nconsole.log(multiply(5));\nconsole.log(multiply(5, undefined));\nconsole.log(multiply(5, null));\nconsole.log(multiply(5, 2));",
      "options": {
        "A": "5, 5, 0, 10",
        "B": "5, 5, 5, 10",
        "C": "5, undefined, null, 10",
        "D": "Error is thrown"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What technique should be used to reduce redundant database queries in a Node.js application?",
      "options": {
        "A": "Always use NoSQL databases",
        "B": "Implement caching strategies",
        "C": "Disable database connections",
        "D": "Always use raw SQL queries"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following Mongoose code?",
      "code_example": "const mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/test');\n\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  age: { type: Number, min: 18 }\n});\n\nconst User = mongoose.model('User', userSchema);\nconst user = new User({ name: 'John', age: 17 });\n\nuser.validate(err => {\n  console.log(err ? 'Validation failed' : 'Validation passed');\n});",
      "options": {
        "A": "Validation passed",
        "B": "Validation failed",
        "C": "Error: Connection failed",
        "D": "No output, as validate() is asynchronous"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following Express.js error handling code?",
      "code_example": "const express = require('express');\nconst app = express();\n\napp.get('/data', (req, res, next) => {\n  const err = new Error('Data not found');\n  err.status = 404;\n  next(err);\n});\n\napp.use((err, req, res, next) => {\n  res.status(err.status || 500);\n  res.json({ message: err.message });\n});\n\n// What response will be sent for a GET request to /data?",
      "options": {
        "A": "200 OK with empty response",
        "B": "500 Internal Server Error with error message",
        "C": "404 Not Found with message 'Data not found'",
        "D": "No response, as the error handler is incorrect"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What is the most efficient way to handle large file uploads in Node.js?",
      "options": {
        "A": "Load the entire file into memory using fs.readFileSync",
        "B": "Use streams and process the file in chunks",
        "C": "Always use Base64 encoding for all file uploads",
        "D": "Save the file to a temporary location and then process it all at once"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function Animal(name) {\n  this.name = name;\n}\n\nAnimal.prototype.speak = function() {\n  return `${this.name} makes a noise.`;\n};\n\nfunction Dog(name) {\n  Animal.call(this, name);\n}\n\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n\nDog.prototype.speak = function() {\n  return `${this.name} barks.`;\n};\n\nconst dog = new Dog('Rex');\nconsole.log(dog.speak());",
      "options": {
        "A": "Rex makes a noise.",
        "B": "Rex barks.",
        "C": "undefined",
        "D": "TypeError: dog.speak is not a function"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function debounce(func, wait) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}\n\nlet counter = 0;\nconst debouncedIncrement = debounce(() => {\n  counter++;\n  console.log(counter);\n}, 100);\n\ndebouncedIncrement();\ndebouncedIncrement();\ndebouncedIncrement();\n\n// After 200ms, what will be logged?",
      "options": {
        "A": "0",
        "B": "1",
        "C": "3",
        "D": "Nothing will be logged"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "function greet(greeting) {\n  return function(name) {\n    console.log(`${greeting}, ${name}!`);\n  };\n}\n\nconst sayHello = greet('Hello');\nconst sayHi = greet('Hi');\n\nsayHello.call(null, 'John');\nsayHi.apply(null, ['Jane']);",
      "options": {
        "A": "Hello, John! Hi, Jane!",
        "B": "Hello, John! Hi, undefined!",
        "C": "TypeError: sayHello.call is not a function",
        "D": "undefined, undefined"
      },
      "correct_answer": "A"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "const obj = {\n  name: 'John',\n  greet() {\n    return `Hello, ${this.name}!`;\n  }\n};\n\nconst greetFn = obj.greet;\nconst boundGreet = obj.greet.bind(obj);\n\nconsole.log(greetFn());\nconsole.log(boundGreet());",
      "options": {
        "A": "Hello, John! Hello, John!",
        "B": "Hello, undefined! Hello, John!",
        "C": "Hello, ! Hello, John!",
        "D": "TypeError: Cannot read property 'name' of undefined"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the result of the following code that demonstrates a potential memory leak with closures?",
      "code_example": "function createFunctions() {\n  const functions = [];\n  let largeData = new Array(1000000).fill('potentially large data');\n  \n  for (let i = 0; i < 10; i++) {\n    functions.push(function() {\n      console.log(i); // Using i is fine\n      // But we're accidentally holding a reference to largeData\n      console.log(largeData.length);\n    });\n  }\n  \n  return functions;\n}\n\nconst fns = createFunctions();\nfns[0](); // What is logged to the console?",
      "options": {
        "A": "undefined, undefined",
        "B": "10, 1000000",
        "C": "0, 1000000",
        "D": "0, undefined"
      },
      "correct_answer": "C"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "Which of the following statements about WebSockets, REST, and GraphQL is NOT true?",
      "options": {
        "A": "WebSockets maintain a persistent connection while REST is stateless",
        "B": "GraphQL allows clients to specify exactly what data they need",
        "C": "REST requires multiple endpoints for different resources while GraphQL uses a single endpoint",
        "D": "WebSockets are slower than REST for most operations due to connection overhead"
      },
      "correct_answer": "D"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of this code demonstrating event listener memory management?",
      "code_example": "function setupButton() {\n  const button = document.createElement('button');\n  const heavyData = new Array(1000000).fill('data');\n  \n  const handleClick = () => {\n    console.log('Button clicked', heavyData.length);\n  };\n  \n  button.addEventListener('click', handleClick);\n  \n  return {\n    removeListener: () => {\n      button.removeEventListener('click', handleClick);\n      // What about heavyData?\n    },\n    showListenerCount: () => {\n      console.log('Has listener:', button.onclick !== null);\n    }\n  };\n}\n\nconst controls = setupButton();\ncontrols.removeListener();\ncontrols.showListenerCount(); // What will this log?",
      "options": {
        "A": "Has listener: true",
        "B": "Has listener: false",
        "C": "TypeError: Cannot read property 'onclick' of undefined",
        "D": "Has listener: null"
      },
      "correct_answer": "B"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which approach to CORS prevention is INCORRECT?",
      "options": {
        "A": "Setting Access-Control-Allow-Origin: * for public APIs",
        "B": "Implementing a pre-flight request handler for non-simple requests",
        "C": "Setting Access-Control-Allow-Credentials: true without specifying exact origins",
        "D": "Using the Vary: Origin header with dynamic CORS responses"
      },
      "correct_answer": "C"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will this code using process.on('unhandledRejection') output?",
      "code_example": "process.on('unhandledRejection', (reason, promise) => {\n  console.log('Unhandled Rejection at:', promise);\n  console.log('Reason:', reason);\n});\n\nfunction asyncOperation() {\n  return new Promise((resolve, reject) => {\n    reject(new Error('Operation failed'));\n  });\n}\n\nasyncOperation().then(() => {\n  console.log('Operation succeeded');\n});\n// We don't catch the error\n\nconsole.log('Program continues');\n\n// What will be logged and in what order?",
      "options": {
        "A": "Program continues (Error event is ignored without catch)",
        "B": "Program continues, followed by Unhandled Rejection message with promise and reason details",
        "C": "The program crashes with an uncaught exception",
        "D": "Operation succeeded, then Program continues"
      },
      "correct_answer": "B"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What is the primary difference between horizontal and vertical scaling in Node.js applications?",
      "options": {
        "A": "Horizontal scaling uses multiple CPU cores while vertical scaling uses only a single core",
        "B": "Vertical scaling adds more resources to existing machines while horizontal scaling adds more machines",
        "C": "Horizontal scaling requires code changes while vertical scaling is transparent to the application",
        "D": "Vertical scaling is only possible with containerized applications"
      },
      "correct_answer": "B"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be the output of this code demonstrating V8 engine optimization?",
      "code_example": "function sumNumbers(arr) {\n  // Force deoptimization by changing argument type\n  if (typeof arr === 'string') {\n    arr = [1, 2, 3];\n  }\n  \n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// Optimize the function with same-type arguments\nfor (let i = 0; i < 100000; i++) {\n  sumNumbers([1, 2, 3]);\n}\n\nconsole.log(sumNumbers([1, 2, 3]));\nconsole.log(sumNumbers('deoptimize'));\nconsole.log(sumNumbers([1, 2, 3]));",
      "options": {
        "A": "6, 6, 6",
        "B": "6, 6, TypeError",
        "C": "6, Error (function is optimized and can't handle string)",
        "D": "6, undefined, 6"
      },
      "correct_answer": "A"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What is an incorrectly formatted entry in a docker-compose.yml file?",
      "code_example": "version: '3'\nservices:\n  api:\n    build: ./api\n    ports:\n      - \"3000:3000\"\n    environment:\n      NODE_ENV: production\n    volumes: /app/data:/data\n    depends_on:\n      - db\n  db:\n    image: mongo:4.4\n    restart: always\n    ports:\n      - \"27017:27017\"",
      "options": {
        "A": "The depends_on directive is incompatible with the restart directive",
        "B": "The volumes entry is incorrectly formatted and should use array format",
        "C": "The NODE_ENV value needs to be in quotes",
        "D": "The API port mapping is incorrectly formatted"
      },
      "correct_answer": "B"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will the following code using custom event listeners output?",
      "code_example": "const EventEmitter = require('events');\n\nclass TaskManager extends EventEmitter {\n  constructor() {\n    super();\n    this.maxListeners = this.getMaxListeners();\n    this.setMaxListeners(20);\n  }\n  \n  runTask(task) {\n    this.emit('taskStarted', task);\n    // Task processing...\n    this.emit('taskCompleted', task);\n  }\n}\n\nconst manager = new TaskManager();\n\nmanager.on('taskStarted', (task) => {\n  console.log(`Started: ${task}`);\n});\n\nmanager.once('taskCompleted', (task) => {\n  console.log(`First completion: ${task}`);\n});\n\nmanager.on('taskCompleted', (task) => {\n  console.log(`Completed: ${task}`);\n});\n\nmanager.runTask('Task A');\nmanager.runTask('Task B');\n\n// What is printed?",
      "options": {
        "A": "Started: Task A, First completion: Task A, Completed: Task A, Started: Task B, Completed: Task B",
        "B": "Started: Task A, First completion: Task A, Started: Task B, First completion: Task B",
        "C": "Started: Task A, Completed: Task A, Started: Task B, Completed: Task B",
        "D": "Started: Task A, First completion: Task A, Completed: Task A, Started: Task B, First completion: Task B, Completed: Task B"
      },
      "correct_answer": "A"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which statement about Helm in Kubernetes deployments is FALSE?",
      "options": {
        "A": "Helm charts can contain multiple Kubernetes resources defined in a single package",
        "B": "Helm allows for versioning and rollback of deployments",
        "C": "Helm requires a separate Tiller component in Kubernetes clusters as of Helm 3",
        "D": "Helm templates use Go template syntax for value substitution"
      },
      "correct_answer": "C"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of this code related to JavaScript memory allocation?",
      "code_example": "function createObjects() {\n  let objArray = [];\n  let lastObj = null;\n  \n  for (let i = 0; i < 5; i++) {\n    const obj = {\n      id: i,\n      data: new Array(1000).fill(i),\n      reference: lastObj\n    };\n    \n    lastObj = obj;\n    objArray.push(obj);\n  }\n  \n  // Remove the array but keep the last object\n  objArray = null;\n  \n  return lastObj;\n}\n\nconst result = createObjects();\nconsole.log(result.id);\nconsole.log(result.reference?.id);\nconsole.log(result.reference?.reference?.id);",
      "options": {
        "A": "4, 3, 2",
        "B": "4, undefined, undefined",
        "C": "4, 3, undefined",
        "D": "0, null, null"
      },
      "correct_answer": "A"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "Which statement about using Prometheus and Grafana with Node.js applications is INCORRECT?",
      "options": {
        "A": "The prom-client npm package provides a client library for exposing metrics to Prometheus",
        "B": "Prometheus uses a pull model where it scrapes metrics from an endpoint exposed by your application",
        "C": "Grafana can only visualize data from Prometheus and not from other data sources",
        "D": "Counter, Gauge, Histogram, and Summary are the four main metric types in Prometheus"
      },
      "correct_answer": "C"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will this code demonstrating parallel processing in Node.js output?",
      "code_example": "const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');\n\nif (isMainThread) {\n  const sharedBuffer = new SharedArrayBuffer(4);\n  const view = new Int32Array(sharedBuffer);\n  view[0] = 0;\n  \n  const worker1 = new Worker(__filename, { workerData: { buffer: sharedBuffer, increment: 5 } });\n  const worker2 = new Worker(__filename, { workerData: { buffer: sharedBuffer, increment: 10 } });\n  \n  worker1.on('message', () => {\n    console.log('Worker 1 done, count:', view[0]);\n  });\n  \n  worker2.on('message', () => {\n    console.log('Worker 2 done, count:', view[0]);\n  });\n} else {\n  const { buffer, increment } = workerData;\n  const view = new Int32Array(buffer);\n  \n  // Atomically add the increment value\n  Atomics.add(view, 0, increment);\n  parentPort.postMessage('done');\n}\n\n// What will be the output? (Note: order of worker completion may vary)",
      "options": {
        "A": "Worker 1 done, count: 5\nWorker 2 done, count: 15",
        "B": "Worker 1 done, count: 5\nWorker 2 done, count: 5",
        "C": "Worker 1 done, count: 15\nWorker 2 done, count: 15",
        "D": "An error will occur because SharedArrayBuffer is not available in Node.js"
      },
      "correct_answer": "C"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which of the following statements about using Nginx as a reverse proxy for Node.js applications is INCORRECT?",
      "options": {
        "A": "Nginx can handle SSL termination, removing the need for SSL configuration in Node.js",
        "B": "Nginx automatically load balances between multiple Node.js instances without additional configuration",
        "C": "The X-Forwarded-For header can be used to preserve client IP addresses",
        "D": "Nginx can serve static files more efficiently than Node.js"
      },
      "correct_answer": "B"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will this code demonstrating Cross-Site Scripting (XSS) vulnerabilities output?",
      "code_example": "function sanitizeHTML(input) {\n  return input\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n}\n\nfunction renderUserInput(input) {\n  // The developer intends to safely render user input\n  return `<div data-content=\"${sanitizeHTML(input)}\"></div>`;\n}\n\nconst userInput = 'Hello\" onmouseover=\"alert(1)\"';\nconsole.log(renderUserInput(userInput));",
      "options": {
        "A": "<div data-content=\"Hello\"></div>",
        "B": "<div data-content=\"Hello&quot; onmouseover=&quot;alert(1)&quot;\"></div>",
        "C": "An alert box will pop up when the mouse hovers over the div",
        "D": "<div data-content=\"Hello\\\" onmouseover=\\\"alert(1)\\\"\"></div>"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will the following code using the Node.js crypto module output?",
      "code_example": "const crypto = require('crypto');\n\nfunction encryptAndDecrypt(text, password) {\n  // Create a key from the password\n  const key = crypto.scryptSync(password, 'salt', 24);\n  const iv = crypto.randomBytes(16);\n  \n  // Encrypt\n  const cipher = crypto.createCipheriv('aes-192-cbc', key, iv);\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  \n  // Try to decrypt with different password\n  const wrongKey = crypto.scryptSync(password + '1', 'salt', 24);\n  \n  try {\n    const decipher = crypto.createDecipheriv('aes-192-cbc', wrongKey, iv);\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return `Decrypted: ${decrypted}`;\n  } catch (err) {\n    return `Error: ${err.message}`;\n  }\n}\n\nconsole.log(encryptAndDecrypt('secret data', 'password'));",
      "options": {
        "A": "Decrypted: secret data",
        "B": "Error: Invalid key length",
        "C": "Error: wrong final block length",
        "D": "Error: Unsupported state or unable to authenticate data"
      },
      "correct_answer": "D"
    }
  ]
}
