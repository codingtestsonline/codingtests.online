{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What is the output of the following code?",
      "options": {
        "A": "15",
        "B": "10",
        "C": "5",
        "D": "Compilation error"
      },
      "correct_answer": "A",
      "code_example": "public class Test {\n    public static void main(String[] args) {\n        int a = 5;\n        int b = 10;\n        System.out.println(a + b);\n    }\n}"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which of the following is the correct way to declare a synchronized method in Java?",
      "options": {
        "A": "public synchro void method() {}",
        "B": "public sync void method() {}",
        "C": "public synchronized void method() {}",
        "D": "public synchronize void method() {}"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What is the purpose of the @SpringBootApplication annotation?",
      "options": {
        "A": "It only enables component scanning",
        "B": "It only configures Spring beans",
        "C": "It only enables auto-configuration",
        "D": "It is a combination of @EnableAutoConfiguration, @ComponentScan, and @Configuration"
      },
      "correct_answer": "D"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What is the output of the following code?",
      "options": {
        "A": "10, 20",
        "B": "20, 10",
        "C": "30, 40",
        "D": "Compilation error"
      },
      "correct_answer": "B",
      "code_example": "public class OverloadTest {\n    public static void main(String[] args) {\n        Calculator calc = new Calculator();\n        System.out.println(calc.add(10, 10) + \", \" + calc.add(5, 5));\n    }\n}\n\nclass Calculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n    \n    public int add(int a, int b) {\n        return a * b;\n    }\n}"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What is the correct output of the following code?",
      "options": {
        "A": "Hello",
        "B": "Static Hello",
        "C": "Static Hello\\nHello",
        "D": "Hello\\nStatic Hello"
      },
      "correct_answer": "C",
      "code_example": "public class StaticTest {\n    static {\n        System.out.println(\"Static Hello\");\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(\"Hello\");\n    }\n}"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "Which statement about static methods is correct?",
      "options": {
        "A": "Static methods can access instance variables directly",
        "B": "Static methods can be overridden",
        "C": "Static methods can access other static members directly",
        "D": "Static methods must be invoked with an instance of the class"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What is Inversion of Control (IoC) in Spring?",
      "options": {
        "A": "A design pattern that allows objects to depend on other objects",
        "B": "A principle where the control of object creation and lifecycle is transferred to a container or framework",
        "C": "A programming technique that ensures all dependencies are created at compile time",
        "D": "A way to manually create and manage object dependencies in an application"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What is the output of the following code?",
      "options": {
        "A": "5",
        "B": "5.0",
        "C": "Compilation error",
        "D": "Runtime error"
      },
      "correct_answer": "B",
      "code_example": "public class TypeCastingTest {\n    public static void main(String[] args) {\n        int i = 5;\n        double d = i; // Implicit casting\n        System.out.println(d);\n    }\n}"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What is the result of the following expression?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "Compilation error",
        "D": "Runtime error"
      },
      "correct_answer": "A",
      "code_example": "public class OperatorsTest {\n    public static void main(String[] args) {\n        boolean result = (5 > 3) && (8 < 10) || !(4 == 4);\n        System.out.println(result);\n    }\n}"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which of the following is not a component of Spring MVC architecture?",
      "options": {
        "A": "DispatcherServlet",
        "B": "Controller",
        "C": "View Resolver",
        "D": "EntityManager"
      },
      "correct_answer": "D"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What is the main difference between a Java Bean and a POJO?",
      "options": {
        "A": "POJOs can have any access modifier for properties, while Java Beans must have private properties with public getters/setters",
        "B": "Java Beans must implement Serializable interface, POJOs don't have such constraints",
        "C": "POJOs must have a default constructor, Java Beans don't need one",
        "D": "There is no difference; both terms refer to the same concept"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will happen when the following code is executed?",
      "options": {
        "A": "It will print 'Hello'",
        "B": "It will print 'NullPointerException'",
        "C": "It will throw a NullPointerException",
        "D": "It will print 'null'"
      },
      "correct_answer": "C",
      "code_example": "public class ExceptionTest {\n    public static void main(String[] args) {\n        String str = null;\n        System.out.println(str.length());\n    }\n}"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What is the output of the following code?",
      "options": {
        "A": "Thread-0\\nMain Thread",
        "B": "Main Thread\\nThread-0",
        "C": "The output order is unpredictable",
        "D": "Compilation error"
      },
      "correct_answer": "C",
      "code_example": "public class ThreadTest {\n    public static void main(String[] args) {\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                System.out.println(Thread.currentThread().getName());\n            }\n        });\n        t.start();\n        System.out.println(\"Main Thread\");\n    }\n}"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "Which of the following is not one of the four pillars of Object-Oriented Programming?",
      "options": {
        "A": "Encapsulation",
        "B": "Inheritance",
        "C": "Polymorphism",
        "D": "Compilation"
      },
      "correct_answer": "D"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What is the size of the int data type in Java?",
      "options": {
        "A": "8 bits",
        "B": "16 bits",
        "C": "32 bits",
        "D": "64 bits"
      },
      "correct_answer": "C"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "Which of the following Spring annotations is used to indicate that a class defines a data repository?",
      "options": {
        "A": "@Controller",
        "B": "@Service",
        "C": "@Repository",
        "D": "@Component"
      },
      "correct_answer": "C"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What is the output of the following code?",
      "options": {
        "A": "Original Exception\\nSuppressed Exception",
        "B": "Suppressed Exception\\nOriginal Exception",
        "C": "Original Exception",
        "D": "Suppressed Exception"
      },
      "correct_answer": "A",
      "code_example": "import java.io.IOException;\n\npublic class SuppressedExceptionTest {\n    public static void main(String[] args) {\n        try {\n            throwWithSuppressed();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n            if (e.getSuppressed().length > 0) {\n                System.out.println(e.getSuppressed()[0].getMessage());\n            }\n        }\n    }\n    \n    public static void throwWithSuppressed() throws Exception {\n        Exception original = new Exception(\"Original Exception\");\n        try {\n            throw new IOException(\"Suppressed Exception\");\n        } catch (IOException e) {\n            original.addSuppressed(e);\n        }\n        throw original;\n    }\n}"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What happens if two objects have the same hashCode() but different equals() results when stored in a HashMap?",
      "options": {
        "A": "They will be stored in different buckets",
        "B": "They will be stored in the same bucket but as separate entries",
        "C": "Only one of them will be stored, the other will be discarded",
        "D": "A collision will occur and an exception will be thrown"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What is the primary purpose of Interceptors in Spring MVC?",
      "options": {
        "A": "To handle exceptions across the application",
        "B": "To intercept database operations before they're executed",
        "C": "To intercept HTTP requests before they reach the controller or after they leave the controller",
        "D": "To create authentication tokens for users"
      },
      "correct_answer": "C"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What does the @MockBean annotation do in Spring Boot testing?",
      "options": {
        "A": "Creates a real bean instance with mocked dependencies",
        "B": "Adds a mock of a bean to the Spring application context",
        "C": "Mocks only the public methods of an existing bean",
        "D": "Creates a spy of an existing bean in the context"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What is the output of the following code?",
      "options": {
        "A": "caught in inner try\\ncaught in outer try",
        "B": "caught in inner try\\nexception not caught",
        "C": "caught in inner try",
        "D": "exception not caught"
      },
      "correct_answer": "C",
      "code_example": "public class ExceptionPropagation {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[5];\n                arr[10] = 50; // This will throw ArrayIndexOutOfBoundsException\n            } catch (ArrayIndexOutOfBoundsException e) {\n                System.out.println(\"caught in inner try\");\n                return; // Return from the method\n            }\n        } catch (Exception e) {\n            System.out.println(\"caught in outer try\");\n        }\n        System.out.println(\"exception not caught\");\n    }\n}"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What is the most likely outcome of the following code in a multi-threaded environment?",
      "options": {
        "A": "It will always print 10000",
        "B": "It will always print 0",
        "C": "It will print a value less than 10000 due to race conditions",
        "D": "It will throw a ConcurrentModificationException"
      },
      "correct_answer": "C",
      "code_example": "public class RaceConditionExample {\n    private static int counter = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                counter++;\n            }\n        });\n\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                counter++;\n            }\n        });\n\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n\n        System.out.println(counter);\n    }\n}"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What is the purpose of Spring Profiles?",
      "options": {
        "A": "To create user profiles in a Spring Security context",
        "B": "To register different sets of beans depending on the environment",
        "C": "To profile application performance in different scenarios",
        "D": "To create different views for the same controller"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[B, C, A]",
        "B": "[A, B, C]",
        "C": "[C, B, A]",
        "D": "Compilation error"
      },
      "correct_answer": "B",
      "code_example": "import java.util.*;\n\npublic class ComparatorTest {\n    public static void main(String[] args) {\n        List<Product> products = new ArrayList<>();\n        products.add(new Product(\"C\", 30));\n        products.add(new Product(\"B\", 20));\n        products.add(new Product(\"A\", 10));\n        \n        Collections.sort(products, new Comparator<Product>() {\n            @Override\n            public int compare(Product p1, Product p2) {\n                return p1.getName().compareTo(p2.getName());\n            }\n        });\n        \n        System.out.println(products);\n    }\n}\n\nclass Product {\n    private String name;\n    private int price;\n    \n    public Product(String name, int price) {\n        this.name = name;\n        this.price = price;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public int getPrice() {\n        return price;\n    }\n    \n    @Override\n    public String toString() {\n        return name;\n    }\n}"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What is the output of the following code?",
      "options": {
        "A": "true",
        "B": "false",
        "C": "java.lang.Object@<hashcode>",
        "D": "MyClass{value=10}"
      },
      "correct_answer": "D",
      "code_example": "public class ObjectMethodsTest {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(10);\n        System.out.println(obj);\n    }\n}\n\nclass MyClass {\n    private int value;\n    \n    public MyClass(int value) {\n        this.value = value;\n    }\n    \n    @Override\n    public String toString() {\n        return \"MyClass{value=\" + value + \"}\";\n    }\n}"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "How can you use the @Value annotation to inject a property with a default value in Spring?",
      "options": {
        "A": "@Value(\"app.property\")",
        "B": "@Value(\"${app.property}\")",
        "C": "@Value(\"${app.property:defaultValue}\")",
        "D": "@Value(\"app.property=defaultValue\")"
      },
      "correct_answer": "C"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What is the primary purpose of @EnableAutoConfiguration in Spring Boot?",
      "options": {
        "A": "To enable manual configuration of all beans",
        "B": "To scan for @Configuration classes",
        "C": "To automatically configure Spring beans based on classpath and properties",
        "D": "To enable REST endpoints in a Spring application"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Child static method",
        "B": "Parent static method",
        "C": "Compilation error",
        "D": "Runtime error"
      },
      "correct_answer": "B",
      "code_example": "public class MethodHidingTest {\n    public static void main(String[] args) {\n        Parent p = new Child();\n        p.staticMethod();\n    }\n}\n\nclass Parent {\n    public static void staticMethod() {\n        System.out.println(\"Parent static method\");\n    }\n}\n\nclass Child extends Parent {\n    public static void staticMethod() {\n        System.out.println(\"Child static method\");\n    }\n}"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "Which of the following is NOT a key component of OAuth2?",
      "options": {
        "A": "Resource Owner",
        "B": "Authorization Server",
        "C": "JWT Validator",
        "D": "Client Application"
      },
      "correct_answer": "C"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What is the output of the following code?",
      "options": {
        "A": "100\\n200",
        "B": "200\\n100",
        "C": "The output is unpredictable",
        "D": "100\\n100"
      },
      "correct_answer": "C",
      "code_example": "public class VolatileTest {\n    private static int counter = 0;\n    \n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            counter = 100;\n            System.out.println(counter);\n        });\n        \n        Thread t2 = new Thread(() -> {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            counter = 200;\n            System.out.println(counter);\n        });\n        \n        t1.start();\n        t2.start();\n    }\n}"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What is the output of the following code?",
      "options": {
        "A": "ThreadLocal value for Thread-0\\nThreadLocal value for Thread-1",
        "B": "ThreadLocal value for Thread-1\\nThreadLocal value for Thread-0",
        "C": "The output order is unpredictable but values are thread-specific",
        "D": "Initial Value\\nInitial Value"
      },
      "correct_answer": "C",
      "code_example": "public class ThreadLocalTest {\n    private static ThreadLocal<String> threadLocal = new ThreadLocal<String>() {\n        @Override\n        protected String initialValue() {\n            return \"Initial Value\";\n        }\n    };\n    \n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            threadLocal.set(\"ThreadLocal value for \" + Thread.currentThread().getName());\n            System.out.println(threadLocal.get());\n        });\n        \n        Thread t2 = new Thread(() -> {\n            threadLocal.set(\"ThreadLocal value for \" + Thread.currentThread().getName());\n            System.out.println(threadLocal.get());\n        });\n        \n        t1.start();\n        t2.start();\n    }\n}"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What is the primary purpose of JWT (JSON Web Token) in authentication?",
      "options": {
        "A": "To encrypt user credentials",
        "B": "To provide a stateless authentication mechanism",
        "C": "To store session data in the database",
        "D": "To generate random passwords for users"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which Spring Boot configuration file will be loaded when using the 'dev' profile with the following file structure in the project?",
      "options": {
        "A": "application.properties only",
        "B": "application-dev.properties only",
        "C": "Both application.properties and application-dev.properties, with application-dev.properties values taking precedence",
        "D": "Neither file will be loaded, as Spring profiles must be defined in XML"
      },
      "correct_answer": "C"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "\"The object is a String\" will be printed",
        "B": "\"Unknown object type\" will be printed",
        "C": "A ClassCastException will be thrown",
        "D": "The code will not compile"
      },
      "correct_answer": "A",
      "code_example": "public class InstanceOfCheck {\n    public static void main(String[] args) {\n        Object obj = \"Hello\";\n        \n        if (obj instanceof String s && s.length() > 2) {\n            System.out.println(\"The object is a String\");\n        } else {\n            System.out.println(\"Unknown object type\");\n        }\n    }\n}"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What is the correct way to use @SpringBootTest with a mock service in a Spring Boot application?",
      "options": {
        "A": "@MockBean should be used to create mock implementations, but the mocks must be initialized manually with Mockito.when()",
        "B": "@MockBean automatically creates and injects a mock implementation for a bean, replacing any existing bean of the same type in the application context",
        "C": "@SpringBootTest automatically mocks all services without requiring @MockBean annotations",
        "D": "Mock services cannot be used with @SpringBootTest, only with @WebMvcTest"
      },
      "correct_answer": "B"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will happen when you run the following Spring Boot application with circular dependencies?",
      "options": {
        "A": "It will run normally because Spring automatically resolves circular dependencies",
        "B": "It will fail to start with BeanCurrentlyInCreationException",
        "C": "It will run but ServiceA and ServiceB will be null when injected",
        "D": "It will create proxy objects to handle the circular dependency"
      },
      "correct_answer": "B",
      "code_example": "@Service\nclass ServiceA {\n    private final ServiceB serviceB;\n    \n    @Autowired\n    public ServiceA(ServiceB serviceB) {\n        this.serviceB = serviceB;\n    }\n}\n\n@Service\nclass ServiceB {\n    private final ServiceA serviceA;\n    \n    @Autowired\n    public ServiceB(ServiceA serviceA) {\n        this.serviceA = serviceA;\n    }\n}\n\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the result of the following HashMap operations?",
      "options": {
        "A": "Prints: 2 person1: Person{name='John', age=30}",
        "B": "Prints: 1 person1: Person{name='John', age=25}",
        "C": "Prints: 2 person1: Person{name='John', age=25}",
        "D": "Prints: 1 person1: null"
      },
      "correct_answer": "C",
      "code_example": "class Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Person person = (Person) o;\n        return Objects.equals(name, person.name);\n    }\n    \n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n    \n    @Override\n    public String toString() {\n        return \"Person{name='\" + name + \"', age=\" + age + \"}\";\n    }\n}\n\npublic class HashMapExample {\n    public static void main(String[] args) {\n        Map<Person, String> map = new HashMap<>();\n        \n        Person person1 = new Person(\"John\", 25);\n        map.put(person1, \"Value1\");\n        \n        Person person2 = new Person(\"John\", 30);\n        map.put(person2, \"Value2\");\n        \n        System.out.print(map.size() + \" person1: \" + map.get(person1));\n    }\n}"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "Which of the following is the correct way to implement a file upload endpoint in Spring MVC that restricts file size to 5MB and only accepts PDF files?",
      "options": {
        "A": "@PostMapping(\"/upload\")\npublic String uploadFile(@RequestParam(\"file\") MultipartFile file) {\n    if (!file.getContentType().equals(\"application/pdf\") || file.getSize() > 5242880) {\n        return \"Invalid file\";\n    }\n    // Process file\n    return \"success\";\n}",
        "B": "@PostMapping(\"/upload\")\npublic String uploadFile(@RequestParam(\"file\") File file) {\n    if (!file.getName().endsWith(\".pdf\") || file.length() > 5242880) {\n        return \"Invalid file\";\n    }\n    // Process file\n    return \"success\";\n}",
        "C": "@PostMapping(\"/upload\")\npublic String uploadFile(HttpServletRequest request) {\n    MultipartFile file = request.getPart(\"file\");\n    if (!file.getContentType().equals(\"application/pdf\") || file.getSize() > 5242880) {\n        return \"Invalid file\";\n    }\n    // Process file\n    return \"success\";\n}",
        "D": "@PostMapping(\"/upload\", consumes = \"multipart/form-data\")\npublic ResponseEntity<String> uploadFile(@RequestParam(\"file\") MultipartFile file) {\n    if (file.isEmpty() || !file.getContentType().equals(\"application/pdf\") || file.getSize() > 5242880) {\n        return ResponseEntity.badRequest().body(\"Invalid file\");\n    }\n    // Process file\n    return ResponseEntity.ok(\"success\");\n}"
      },
      "correct_answer": "D"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating fail-fast and fail-safe iterators?",
      "options": {
        "A": "ConcurrentModificationException will be thrown for both ArrayList and CopyOnWriteArrayList",
        "B": "ConcurrentModificationException will be thrown for ArrayList, but CopyOnWriteArrayList will print 1, 2, 3, 4",
        "C": "Both iterators will print 1, 2, 3, 4",
        "D": "ArrayList iterator will print 1, 2, 3, 4 and CopyOnWriteArrayList iterator will print 1, 2, 3"
      },
      "correct_answer": "B",
      "code_example": "import java.util.*;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class IteratorExample {\n    public static void main(String[] args) {\n        // Fail-fast iterator\n        try {\n            List<Integer> arrayList = new ArrayList<>();\n            arrayList.add(1);\n            arrayList.add(2);\n            arrayList.add(3);\n            \n            Iterator<Integer> arrayListIterator = arrayList.iterator();\n            while (arrayListIterator.hasNext()) {\n                Integer num = arrayListIterator.next();\n                System.out.print(num + \" \");\n                arrayList.add(4); // Modification during iteration\n            }\n        } catch (ConcurrentModificationException e) {\n            System.out.println(\"\\nConcurrentModificationException for ArrayList\");\n        }\n        \n        // Fail-safe iterator\n        List<Integer> copyOnWriteArrayList = new CopyOnWriteArrayList<>();\n        copyOnWriteArrayList.add(1);\n        copyOnWriteArrayList.add(2);\n        copyOnWriteArrayList.add(3);\n        \n        Iterator<Integer> cowIterator = copyOnWriteArrayList.iterator();\n        while (cowIterator.hasNext()) {\n            Integer num = cowIterator.next();\n            System.out.print(num + \" \");\n            copyOnWriteArrayList.add(4); // Modification during iteration\n        }\n    }\n}"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates stack trace analysis?",
      "options": {
        "A": "getMessage: Division by zero\ntoString: java.lang.ArithmeticException: Division by zero",
        "B": "getMessage: / by zero\ntoString: java.lang.ArithmeticException: / by zero",
        "C": "getMessage: Division by zero\ntoString: Division by zero",
        "D": "getMessage: / by zero\ngetCause: null"
      },
      "correct_answer": "B",
      "code_example": "public class StackTraceExample {\n    public static void main(String[] args) {\n        try {\n            divideByZero();\n        } catch (Exception e) {\n            System.out.println(\"getMessage: \" + e.getMessage());\n            System.out.println(\"toString: \" + e.toString());\n        }\n    }\n    \n    private static int divideByZero() {\n        return 10 / 0;\n    }\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Result: 25\nDone",
        "B": "Result: 25\nThread was interrupted",
        "C": "Result: 25\nException in thread \"main\" java.lang.InterruptedException",
        "D": "Thread was interrupted\nDone"
      },
      "correct_answer": "A",
      "code_example": "import java.util.concurrent.*;\n\npublic class ExecutorServiceExample {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        \n        try {\n            Callable<Integer> task = () -> {\n                Thread.sleep(1000);\n                return 5 * 5;\n            };\n            \n            Future<Integer> future = executor.submit(task);\n            \n            try {\n                Integer result = future.get(2000, TimeUnit.MILLISECONDS);\n                System.out.println(\"Result: \" + result);\n            } catch (TimeoutException e) {\n                System.out.println(\"Timeout occurred\");\n                future.cancel(true);\n            } catch (InterruptedException e) {\n                System.out.println(\"Thread was interrupted\");\n            } catch (ExecutionException e) {\n                System.out.println(\"Execution exception: \" + e.getCause().getMessage());\n            }\n            \n            System.out.println(\"Done\");\n            \n        } finally {\n            executor.shutdown();\n        }\n    }\n}"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following statements about Map implementations in Java is correct?",
      "options": {
        "A": "WeakHashMap allows garbage collection of its keys when they are no longer referenced elsewhere, IdentityHashMap uses == for key comparison, and EnumMap is not type-safe",
        "B": "WeakHashMap allows garbage collection of both keys and values when not referenced elsewhere, IdentityHashMap uses hashCode() for key comparison, and EnumMap is highly optimized for enum keys",
        "C": "WeakHashMap allows garbage collection of its keys when they are no longer referenced elsewhere, IdentityHashMap uses == for key comparison, and EnumMap is highly optimized for enum keys",
        "D": "WeakHashMap must be explicitly cleared to release memory, IdentityHashMap uses equals() for key comparison, and EnumMap allows any object as keys but is optimized for enums"
      },
      "correct_answer": "C"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating thread interruption?",
      "options": {
        "A": "Thread is working\nThread was interrupted\nThread has finished execution",
        "B": "Thread is working\nCaught InterruptedException\nThread has finished execution",
        "C": "Thread is working\nCaught InterruptedException",
        "D": "Thread is working (repeating until manually terminated)"
      },
      "correct_answer": "B",
      "code_example": "public class ThreadInterruptionExample {\n    public static void main(String[] args) {\n        Thread thread = new Thread(() -> {\n            try {\n                System.out.println(\"Thread is working\");\n                Thread.sleep(10000); // Sleep for 10 seconds\n                System.out.println(\"Thread has finished execution\");\n            } catch (InterruptedException e) {\n                System.out.println(\"Caught InterruptedException\");\n                // Important: interrupted status is cleared when exception is thrown\n                System.out.println(\"Thread has finished execution\");\n            }\n        });\n        \n        thread.start();\n        \n        // Interrupt the thread after 2 seconds\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        \n        thread.interrupt();\n    }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What is the correct implementation of a BeanPostProcessor in Spring that logs the initialization of each bean?",
      "options": {
        "A": "@Component\npublic class LoggingBeanPostProcessor implements BeanPostProcessor {\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) {\n        System.out.println(\"Bean '\" + beanName + \"' created\");\n        return bean;\n    }\n    \n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) {\n        return bean;\n    }\n}",
        "B": "@Component\npublic class LoggingBeanPostProcessor implements InitializingBean {\n    @Override\n    public void afterPropertiesSet() {\n        System.out.println(\"Bean initialized\");\n    }\n}",
        "C": "@Component\npublic class LoggingBeanPostProcessor {\n    @PostConstruct\n    public void logBeanCreation() {\n        System.out.println(\"Bean created\");\n    }\n}",
        "D": "@Component\npublic class LoggingBeanPostProcessor implements BeanPostProcessor {\n    @Override\n    public void beforeInitialization(Object bean, String beanName) {\n        System.out.println(\"Bean '\" + beanName + \"' created\");\n    }\n    \n    @Override\n    public void afterInitialization(Object bean, String beanName) {\n        // Do nothing\n    }\n}"
      },
      "correct_answer": "A"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which of the following is the correct way to set up different database configurations for development and production environments in a Spring Boot application?",
      "options": {
        "A": "Create application-dev.properties and application-prod.properties files, and use @Value(\"${property.name}\") to read property values",
        "B": "Create a single application.properties file with conditional statements to check which profile is active",
        "C": "Create application-dev.properties and application-prod.properties files, and start the application with -Dspring.profiles.active=dev or -Dspring.profiles.active=prod",
        "D": "Create a DatabaseConfig class with @ConditionalOnProperty annotations to switch between configurations"
      },
      "correct_answer": "C"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating dynamic method dispatch?",
      "options": {
        "A": "Animal sound\nCat meow\nDog bark",
        "B": "Animal sound\nCat sound\nDog sound",
        "C": "Animal sound\nCat meow\nAnimal sound",
        "D": "Animal sound\nAnimal sound\nDog bark"
      },
      "correct_answer": "C",
      "code_example": "class Animal {\n    void makeSound() {\n        System.out.println(\"Animal sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    void makeSound() {\n        System.out.println(\"Dog bark\");\n    }\n}\n\nclass Cat extends Animal {\n    void makeSound() {\n        System.out.println(\"Cat meow\");\n    }\n    \n    void purr() {\n        System.out.println(\"Cat purr\");\n    }\n}\n\npublic class DynamicDispatchExample {\n    public static void main(String[] args) {\n        Animal animal1 = new Animal();\n        Animal animal2 = new Cat();\n        Animal animal3 = new Animal();\n        \n        animal1.makeSound();\n        \n        if (animal2 instanceof Cat) {\n            Cat cat = (Cat) animal2;\n            cat.makeSound();\n        }\n        \n        animal3.makeSound();\n    }\n}"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code using a custom Comparator?",
      "options": {
        "A": "[Person{name='Alice', age=25}, Person{name='Bob', age=30}, Person{name='Charlie', age=20}]",
        "B": "[Person{name='Charlie', age=20}, Person{name='Alice', age=25}, Person{name='Bob', age=30}]",
        "C": "[Person{name='Alice', age=25}, Person{name='Charlie', age=20}, Person{name='Bob', age=30}]",
        "D": "[Person{name='Bob', age=30}, Person{name='Alice', age=25}, Person{name='Charlie', age=20}]"
      },
      "correct_answer": "B",
      "code_example": "import java.util.*;\n\nclass Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    @Override\n    public String toString() {\n        return \"Person{name='\" + name + \"', age=\" + age + \"}\";\n    }\n}\n\npublic class ComparatorExample {\n    public static void main(String[] args) {\n        List<Person> people = new ArrayList<>();\n        people.add(new Person(\"Alice\", 25));\n        people.add(new Person(\"Bob\", 30));\n        people.add(new Person(\"Charlie\", 20));\n        \n        // Sort by age (ascending)\n        Collections.sort(people, new Comparator<Person>() {\n            @Override\n            public int compare(Person p1, Person p2) {\n                return Integer.compare(p1.getAge(), p2.getAge());\n            }\n        });\n        \n        System.out.println(people);\n    }\n}"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code using a PriorityQueue?",
      "options": {
        "A": "10 20 30 40",
        "B": "40 30 20 10",
        "C": "10 20 30 40 (in any order)",
        "D": "10 (then exception)"
      },
      "correct_answer": "A",
      "code_example": "import java.util.PriorityQueue;\n\npublic class PriorityQueueExample {\n    public static void main(String[] args) {\n        // Min-heap implementation\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        \n        pq.add(40);\n        pq.add(10);\n        pq.add(30);\n        pq.add(20);\n        \n        StringBuilder result = new StringBuilder();\n        while (!pq.isEmpty()) {\n            result.append(pq.poll()).append(\" \");\n        }\n        \n        System.out.print(result.toString().trim());\n    }\n}"
    }
  ]
}
