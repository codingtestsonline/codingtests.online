{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What is the difference between HashSet and TreeSet in Java?",
      "options": {
        "A": "HashSet maintains insertion order while TreeSet is unordered",
        "B": "TreeSet maintains elements in sorted order while HashSet doesn't guarantee any order",
        "C": "HashSet allows null elements while TreeSet doesn't allow any elements",
        "D": "TreeSet is faster for adding and removing elements than HashSet"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int a = 10;\nint b = 5;\nSystem.out.println((a > b) ? \"Greater\" : \"Smaller\");",
      "options": {
        "A": "Greater",
        "B": "Smaller",
        "C": "true",
        "D": "false"
      },
      "correct_answer": "A"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "According to Java naming conventions, which of the following is the correct way to name a constant?",
      "options": {
        "A": "maxValue",
        "B": "MaxValue",
        "C": "MAX_VALUE",
        "D": "maxvalue"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What is the role of DispatcherServlet in Spring MVC?",
      "options": {
        "A": "To handle database transactions",
        "B": "To manage user sessions",
        "C": "To receive and coordinate HTTP requests to appropriate handlers",
        "D": "To compile Java code at runtime"
      },
      "correct_answer": "C"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "Which of the following is NOT a feature of the Spring Framework?",
      "options": {
        "A": "Dependency Injection",
        "B": "Just-in-time compilation",
        "C": "Aspect-Oriented Programming",
        "D": "Transaction Management"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "public class Animal {\n    public void makeSound() {\n        System.out.println(\"Animal makes a sound\");\n    }\n}\n\npublic class Dog extends Animal {\n    public void makeSound() {\n        System.out.println(\"Dog barks\");\n    }\n\n    public static void main(String[] args) {\n        Animal animal = new Dog();\n        animal.makeSound();\n    }\n}",
      "options": {
        "A": "Animal makes a sound",
        "B": "Dog barks",
        "C": "Compilation error",
        "D": "Runtime error"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What is the main difference between @RequestMapping and @GetMapping in Spring MVC?",
      "options": {
        "A": "@RequestMapping works with all HTTP methods by default, while @GetMapping is specific to GET requests",
        "B": "@GetMapping works with all HTTP methods, while @RequestMapping is specific to GET requests",
        "C": "@RequestMapping is deprecated, and @GetMapping is the new replacement",
        "D": "There is no difference; they are interchangeable"
      },
      "correct_answer": "A"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "System.out.println(\"Hello\\nWorld\\t!\\b\");",
      "options": {
        "A": "Hello\\nWorld\\t!\\b",
        "B": "HelloWorldt!b",
        "C": "Hello\nWorld\t!\b",
        "D": "Hello\nWorld\t!"
      },
      "correct_answer": "C"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "byte b = 50;\nint i = b;\nfloat f = i;\nSystem.out.println(f);",
      "options": {
        "A": "50",
        "B": "50.0",
        "C": "Compilation error",
        "D": "Runtime error"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which of the following is NOT provided by Spring Boot Auto-Configuration?",
      "options": {
        "A": "Database connection setup based on dependencies",
        "B": "Embedded web server configuration",
        "C": "Automatic refactoring of legacy code",
        "D": "Default security settings"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "class Person {\n    private String name;\n    private int age;\n    \n    public Person() {}\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public void setAge(int age) {\n        this.age = age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person p = new Person();\n        p.setName(\"John\");\n        p.setAge(25);\n        System.out.println(p.getName() + \" is \" + p.getAge() + \" years old.\");\n    }\n}",
      "options": {
        "A": "John is 25 years old.",
        "B": "null is 0 years old.",
        "C": "Compilation error",
        "D": "Runtime error"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "char c = 'A';\nint i = c;\ndouble d = i;\nSystem.out.println(d);",
      "options": {
        "A": "A",
        "B": "65",
        "C": "65.0",
        "D": "Compilation error"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "Which component is NOT a part of Spring MVC architecture?",
      "options": {
        "A": "DispatcherServlet",
        "B": "Controller",
        "C": "EntityManager",
        "D": "ViewResolver"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What is Inversion of Control (IoC) in Spring?",
      "options": {
        "A": "A design pattern where objects define their dependencies themselves",
        "B": "A principle where objects receive their dependencies from an external source rather than creating them",
        "C": "A technique to control the flow of data in the application",
        "D": "A method to invert the database schema"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "public class Counter {\n    private int count = 0;\n    \n    public synchronized void increment() {\n        count++;\n    }\n    \n    public synchronized int getCount() {\n        return count;\n    }\n    \n    public static void main(String[] args) throws Exception {\n        final Counter counter = new Counter();\n        \n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 500; i++) {\n                counter.increment();\n            }\n        });\n        \n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 500; i++) {\n                counter.increment();\n            }\n        });\n        \n        t1.start();\n        t2.start();\n        \n        t1.join();\n        t2.join();\n        \n        System.out.println(counter.getCount());\n    }\n}",
      "options": {
        "A": "Less than 1000",
        "B": "Exactly 1000",
        "C": "More than 1000",
        "D": "Unpredictable"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What is the purpose of the @SpringBootApplication annotation?",
      "options": {
        "A": "It creates a connection to the database",
        "B": "It is used to mark RESTful controllers",
        "C": "It is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan",
        "D": "It is used to define the entry point of a command-line application"
      },
      "correct_answer": "C"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class ComparisonTest {\n    public static void main(String[] args) {\n        String s1 = new String(\"Hello\");\n        String s2 = new String(\"Hello\");\n        \n        System.out.println(s1 == s2);\n        System.out.println(s1.equals(s2));\n        \n        Integer i1 = 1000;\n        Integer i2 = 1000;\n        \n        System.out.println(i1 == i2);\n        System.out.println(i1.equals(i2));\n    }\n}",
      "options": {
        "A": "false, true, false, true",
        "B": "false, true, true, true",
        "C": "true, true, false, true",
        "D": "false, false, false, true"
      },
      "correct_answer": "A"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Animal {\n    Animal get() {\n        return new Animal();\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    Dog get() {\n        return new Dog();\n    }\n    \n    public static void main(String[] args) {\n        Animal animal = new Dog();\n        System.out.println(animal.get().getClass().getSimpleName());\n    }\n}",
      "options": {
        "A": "Animal",
        "B": "Dog",
        "C": "Compilation error",
        "D": "Runtime error"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "Where in JVM memory would a local variable be stored?",
      "options": {
        "A": "Heap",
        "B": "Method Area",
        "C": "Stack",
        "D": "PC Register"
      },
      "correct_answer": "C"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What is the primary purpose of the volatile keyword in Java?",
      "options": {
        "A": "To make variable operations atomic",
        "B": "To ensure a variable is never cached in CPU registers and always read from main memory",
        "C": "To prevent a variable from being modified by other threads",
        "D": "To ensure a variable's value is persisted to disk"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "import java.util.HashMap;\n\npublic class HashMapTest {\n    public static void main(String[] args) {\n        HashMap<Key, String> map = new HashMap<>();\n        \n        Key k1 = new Key(1);\n        Key k2 = new Key(1);\n        \n        map.put(k1, \"Value1\");\n        System.out.println(map.get(k2));\n    }\n}\n\nclass Key {\n    private int id;\n    \n    public Key(int id) {\n        this.id = id;\n    }\n    \n    // No hashCode or equals method overridden\n}",
      "options": {
        "A": "Value1",
        "B": "null",
        "C": "Compilation error",
        "D": "Runtime exception"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "Which of the following is the correct way to handle exceptions globally in a Spring Boot application?",
      "options": {
        "A": "@ControllerAdvice class with @ExceptionHandler methods",
        "B": "Implementing ErrorController interface",
        "C": "Using try-catch blocks in every controller method",
        "D": "Overriding doDispatch method in DispatcherServlet"
      },
      "correct_answer": "A"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Person implements Cloneable {\n    String name;\n    Address address;\n    \n    public Person(String name, Address address) {\n        this.name = name;\n        this.address = address;\n    }\n    \n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n\nclass Address {\n    String city;\n    \n    public Address(String city) {\n        this.city = city;\n    }\n}\n\npublic class CloneTest {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        Address address = new Address(\"New York\");\n        Person original = new Person(\"John\", address);\n        Person cloned = (Person) original.clone();\n        \n        cloned.name = \"Jane\";\n        cloned.address.city = \"Boston\";\n        \n        System.out.println(original.name + \" lives in \" + original.address.city);\n    }\n}",
      "options": {
        "A": "John lives in New York",
        "B": "John lives in Boston",
        "C": "Jane lives in Boston",
        "D": "Jane lives in New York"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What is the advantage of Constructor Injection over Setter Injection in Spring?",
      "options": {
        "A": "Constructor Injection allows for optional dependencies",
        "B": "Constructor Injection enforces mandatory dependencies and promotes immutability",
        "C": "Constructor Injection is easier to implement than Setter Injection",
        "D": "Constructor Injection allows for circular dependencies"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class NestedTryTest {\n    public static void main(String[] args) {\n        try {\n            System.out.print(\"Outer try block \");\n            try {\n                System.out.print(\"Inner try block \");\n                int[] arr = new int[5];\n                arr[10] = 50; // ArrayIndexOutOfBoundsException\n                System.out.print(\"End of inner try block \");\n            } catch (NullPointerException e) {\n                System.out.print(\"Inner catch block \");\n            } finally {\n                System.out.print(\"Inner finally block \");\n            }\n            System.out.print(\"End of outer try block \");\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.print(\"Outer catch block \");\n        } finally {\n            System.out.print(\"Outer finally block\");\n        }\n    }\n}",
      "options": {
        "A": "Outer try block Inner try block Inner finally block Outer catch block Outer finally block",
        "B": "Outer try block Inner try block Inner catch block Inner finally block End of outer try block Outer finally block",
        "C": "Outer try block Inner try block Inner finally block End of outer try block Outer finally block",
        "D": "Outer try block Inner try block Inner finally block Outer catch block"
      },
      "correct_answer": "A"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "Why doesn't Java support multiple inheritance through classes?",
      "options": {
        "A": "It would make the language too complex",
        "B": "It increases memory usage",
        "C": "To avoid the Diamond Problem and associated ambiguity",
        "D": "The JVM cannot handle multiple parent references"
      },
      "correct_answer": "C"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Item {\n    @Override\n    public String toString() {\n        return \"Item\";\n    }\n    \n    @Override\n    public boolean equals(Object obj) {\n        return obj instanceof Item;\n    }\n    \n    @Override\n    public int hashCode() {\n        return 0;\n    }\n}\n\npublic class ObjectMethodsTest {\n    public static void main(String[] args) {\n        Item item1 = new Item();\n        Item item2 = new Item();\n        \n        System.out.println(item1);\n        System.out.println(item1.equals(item2));\n        System.out.println(item1.hashCode() == item2.hashCode());\n    }\n}",
      "options": {
        "A": "Item\nfalse\nfalse",
        "B": "Item\ntrue\ntrue",
        "C": "Item@0\ntrue\ntrue",
        "D": "Item@<hex>\ntrue\nfalse"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What is the role of an Interceptor in Spring MVC?",
      "options": {
        "A": "To convert HTTP requests to Java objects",
        "B": "To manage database transactions",
        "C": "To intercept and process requests before or after handling by controllers",
        "D": "To resolve views based on the returned model"
      },
      "correct_answer": "C"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Parent {\n    protected int value = 10;\n    \n    public void display() {\n        System.out.println(\"Parent value: \" + value);\n    }\n}\n\nclass Child extends Parent {\n    private int value = 20;\n    \n    @Override\n    public void display() {\n        System.out.println(\"Child value: \" + value);\n        System.out.println(\"Parent value: \" + super.value);\n    }\n    \n    public static void main(String[] args) {\n        Child child = new Child();\n        child.display();\n    }\n}",
      "options": {
        "A": "Child value: 10\nParent value: 10",
        "B": "Child value: 20\nParent value: 10",
        "C": "Child value: 20\nParent value: 20",
        "D": "Compilation error"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class InstanceOfTest {\n    public static void main(String[] args) {\n        Object[] objects = {new String(\"Hello\"), new Integer(5), new Double(5.5)};\n        \n        for (Object obj : objects) {\n            if (obj instanceof String) {\n                System.out.print(\"String \");\n            } else if (obj instanceof Integer) {\n                System.out.print(\"Integer \");\n            } else if (obj instanceof Number) {\n                System.out.print(\"Number \");\n            } else {\n                System.out.print(\"Object \");\n            }\n        }\n    }\n}",
      "options": {
        "A": "String Integer Number",
        "B": "String Integer Double",
        "C": "String Integer Object",
        "D": "String Number Number"
      },
      "correct_answer": "A"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "Which of the following is NOT a key component of OAuth2?",
      "options": {
        "A": "Authorization Server",
        "B": "Resource Server",
        "C": "Username and Password Storage",
        "D": "Client Application"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class ThreadLocalTest {\n    private static ThreadLocal<String> threadLocal = new ThreadLocal<>();\n    \n    public static void main(String[] args) throws InterruptedException {\n        threadLocal.set(\"Main thread value\");\n        \n        Thread thread = new Thread(() -> {\n            System.out.println(\"Thread A: \" + threadLocal.get());\n            threadLocal.set(\"Thread A value\");\n            System.out.println(\"Thread A after setting: \" + threadLocal.get());\n        });\n        \n        thread.start();\n        thread.join();\n        \n        System.out.println(\"Main thread: \" + threadLocal.get());\n    }\n}",
      "options": {
        "A": "Thread A: Main thread value\nThread A after setting: Thread A value\nMain thread: Thread A value",
        "B": "Thread A: null\nThread A after setting: Thread A value\nMain thread: Main thread value",
        "C": "Thread A: Main thread value\nThread A after setting: Thread A value\nMain thread: Main thread value",
        "D": "Thread A: null\nThread A after setting: Thread A value\nMain thread: null"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "topic": "Proxy Pattern in Java (Dynamic Proxies and Reflection)",
      "question": "What will be the output of the following code which uses Java's Dynamic Proxy?",
      "options": {
        "A": "Method called: printMessage",
        "B": "Method called: printMessage\nHello, Proxy!",
        "C": "Hello, Proxy!",
        "D": "java.lang.IllegalArgumentException: interface MessageService not found"
      },
      "correct_answer": "B",
      "code_example": "import java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\ninterface MessageService {\n    void printMessage(String message);\n}\n\nclass MessageServiceImpl implements MessageService {\n    @Override\n    public void printMessage(String message) {\n        System.out.println(message);\n    }\n}\n\nclass LoggingHandler implements InvocationHandler {\n    private final Object target;\n    \n    public LoggingHandler(Object target) {\n        this.target = target;\n    }\n    \n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"Method called: \" + method.getName());\n        return method.invoke(target, args);\n    }\n}\n\npublic class DynamicProxyExample {\n    public static void main(String[] args) {\n        MessageService target = new MessageServiceImpl();\n        \n        MessageService proxy = (MessageService) Proxy.newProxyInstance(\n            MessageService.class.getClassLoader(),\n            new Class<?>[] { MessageService.class },\n            new LoggingHandler(target)\n        );\n        \n        proxy.printMessage(\"Hello, Proxy!\");\n    }\n}"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "topic": "Custom Comparator Implementation",
      "question": "What will be the output of the following code which uses a custom Comparator?",
      "options": {
        "A": "[Person{name='Alice', age=30}, Person{name='Bob', age=25}, Person{name='Charlie', age=35}]",
        "B": "[Person{name='Bob', age=25}, Person{name='Alice', age=30}, Person{name='Charlie', age=35}]",
        "C": "[Person{name='Alice', age=30}, Person{name='Charlie', age=35}, Person{name='Bob', age=25}]",
        "D": "ClassCastException: Person cannot be cast to Comparable"
      },
      "correct_answer": "B",
      "code_example": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass Person {\n    private String name;\n    private int age;\n    \n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public int getAge() {\n        return age;\n    }\n    \n    @Override\n    public String toString() {\n        return \"Person{name='\" + name + \"', age=\" + age + \"}\";\n    }\n}\n\nclass AgeComparator implements Comparator<Person> {\n    @Override\n    public int compare(Person p1, Person p2) {\n        return Integer.compare(p1.getAge(), p2.getAge());\n    }\n}\n\npublic class ComparatorExample {\n    public static void main(String[] args) {\n        List<Person> people = new ArrayList<>();\n        people.add(new Person(\"Alice\", 30));\n        people.add(new Person(\"Charlie\", 35));\n        people.add(new Person(\"Bob\", 25));\n        \n        Collections.sort(people, new AgeComparator());\n        System.out.println(people);\n    }\n}"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "topic": "Advanced OAuth2 Scopes and Permissions",
      "question": "In OAuth2, which of the following statements about scopes is correct?",
      "options": {
        "A": "Scopes are defined by the resource owner and can only be requested during the initial authorization process",
        "B": "The client application can always request additional scopes after the access token has been issued without requiring user interaction",
        "C": "Scopes define the specific actions that a client application is permitted to perform on behalf of the resource owner",
        "D": "Scopes are stored in the JWT token but are not validated by the resource server during API calls"
      },
      "correct_answer": "C"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "topic": "CompletableFuture and Asynchronous Programming",
      "question": "What will be the output of the following asynchronous code using CompletableFuture?",
      "options": {
        "A": "Task 1 completed\nTask 2 completed\nAll tasks completed",
        "B": "All tasks completed\nTask 1 completed\nTask 2 completed",
        "C": "Task 1 completed\nAll tasks completed\nTask 2 completed",
        "D": "The output order is non-deterministic due to asynchronous execution"
      },
      "correct_answer": "D",
      "code_example": "import java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\n\npublic class CompletableFutureExample {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        \n        CompletableFuture<Void> future1 = CompletableFuture.runAsync(() -> {\n            try {\n                TimeUnit.MILLISECONDS.sleep(ThreadLocalRandom.current().nextInt(100, 1000));\n                System.out.println(\"Task 1 completed\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }, executor);\n        \n        CompletableFuture<Void> future2 = CompletableFuture.runAsync(() -> {\n            try {\n                TimeUnit.MILLISECONDS.sleep(ThreadLocalRandom.current().nextInt(100, 1000));\n                System.out.println(\"Task 2 completed\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }, executor);\n        \n        CompletableFuture<Void> allFutures = CompletableFuture.allOf(future1, future2);\n        \n        allFutures.thenRun(() -> {\n            System.out.println(\"All tasks completed\");\n            executor.shutdown();\n        });\n        \n        try {\n            executor.awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "topic": "Custom Class Loaders in Java",
      "question": "What is the correct sequence of events when a custom ClassLoader loads a class?",
      "options": {
        "A": "First try to delegate to parent, if not found then find the class locally, then define and resolve the class",
        "B": "First find the class locally, then define and resolve the class without checking the parent loader",
        "C": "First check locally, then delegate to parent, and finally define and resolve the class if found",
        "D": "Define the class first, then resolve it, and finally check the parent loader for any conflicts"
      },
      "correct_answer": "A"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "topic": "Circular Dependency Resolution in Spring",
      "question": "Which of the following approaches is NOT a valid way to resolve circular dependencies in Spring?",
      "options": {
        "A": "Using setter injection instead of constructor injection",
        "B": "Using @Lazy annotation on one of the dependencies",
        "C": "Using @PostConstruct to initialize one of the beans after construction",
        "D": "Using @Primary annotation on one of the beans in the circular dependency"
      },
      "correct_answer": "D"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "topic": "HashMap Internal Working (hashCode(), equals())",
      "question": "What will be the result of the following code which uses a custom class as a HashMap key?",
      "options": {
        "A": "Value for device1\nValue for device2",
        "B": "Value for device1\nnull",
        "C": "null\nValue for device2",
        "D": "null\nnull"
      },
      "correct_answer": "B",
      "code_example": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Device {\n    private String id;\n    private String type;\n    \n    public Device(String id, String type) {\n        this.id = id;\n        this.type = type;\n    }\n    \n    @Override\n    public int hashCode() {\n        return id.hashCode();\n    }\n    \n    // Note: equals method is missing\n}\n\npublic class HashMapExample {\n    public static void main(String[] args) {\n        Map<Device, String> deviceMap = new HashMap<>();\n        \n        Device device1 = new Device(\"12345\", \"laptop\");\n        deviceMap.put(device1, \"Value for device1\");\n        \n        // Creating a new Device object with the same id but different reference\n        Device device2 = new Device(\"12345\", \"laptop\");\n        \n        System.out.println(deviceMap.get(device1));\n        System.out.println(deviceMap.get(device2));\n    }\n}"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "topic": "Exception Handling using @ControllerAdvice",
      "question": "Which HTTP status code would be returned by the following Spring Boot controller and exception handler for a 'NotFoundException'?",
      "options": {
        "A": "200 OK",
        "B": "400 Bad Request",
        "C": "404 Not Found",
        "D": "500 Internal Server Error"
      },
      "correct_answer": "C",
      "code_example": "import org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\nclass NotFoundException extends RuntimeException {\n    public NotFoundException(String message) {\n        super(message);\n    }\n}\n\nclass ErrorResponse {\n    private String message;\n    \n    public ErrorResponse(String message) {\n        this.message = message;\n    }\n    \n    public String getMessage() {\n        return message;\n    }\n}\n\n@ControllerAdvice\nclass GlobalExceptionHandler {\n    \n    @ExceptionHandler(NotFoundException.class)\n    public ResponseEntity<ErrorResponse> handleNotFoundException(NotFoundException ex) {\n        ErrorResponse error = new ErrorResponse(ex.getMessage());\n        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);\n    }\n}\n\n@RestController\nclass UserController {\n    \n    @GetMapping(\"/users/{id}\")\n    public String getUser(@PathVariable Long id) {\n        if (id <= 0) {\n            throw new NotFoundException(\"User not found with id: \" + id);\n        }\n        return \"User found\";\n    }\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "topic": "Fail-Fast vs Fail-Safe Iterators",
      "question": "What will be the output when the following code is executed?",
      "options": {
        "A": "1, 2, 3, 4, 5",
        "B": "1, 2, 3, 4, 5, 6",
        "C": "java.util.ConcurrentModificationException will be thrown",
        "D": "A compilation error due to the add operation during iteration"
      },
      "correct_answer": "C",
      "code_example": "import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class IteratorExample {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        numbers.add(5);\n        \n        Iterator<Integer> iterator = numbers.iterator();\n        while (iterator.hasNext()) {\n            Integer number = iterator.next();\n            System.out.print(number + \", \");\n            \n            if (number == 3) {\n                // Adding an element during iteration\n                numbers.add(6);\n            }\n        }\n    }\n}"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "topic": "Atomic Variables (AtomicInteger, AtomicReference)",
      "question": "What will be the final value of the counter after executing the following multithreaded code?",
      "options": {
        "A": "The value will be exactly 1000",
        "B": "The value will be less than 1000 due to race conditions",
        "C": "The code will throw a ConcurrentModificationException",
        "D": "The value may vary on each execution but will be between 0 and 1000"
      },
      "correct_answer": "A",
      "code_example": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class AtomicVariableExample {\n    public static void main(String[] args) throws InterruptedException {\n        int numThreads = 10;\n        int incrementsPerThread = 100;\n        AtomicInteger counter = new AtomicInteger(0);\n        \n        ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n        \n        for (int i = 0; i < numThreads; i++) {\n            executor.submit(() -> {\n                for (int j = 0; j < incrementsPerThread; j++) {\n                    counter.incrementAndGet();\n                }\n            });\n        }\n        \n        executor.shutdown();\n        executor.awaitTermination(5, TimeUnit.SECONDS);\n        \n        System.out.println(\"Final counter value: \" + counter.get());\n    }\n}"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "topic": "Stack Trace Analysis (printStackTrace(), getMessage(), toString())",
      "question": "In the following code, which statement about the exception information is correct?",
      "options": {
        "A": "getCause() will return 'Root cause: Database connection failed'",
        "B": "getMessage() will return 'Failed to process request' followed by the stack trace",
        "C": "toString() will return only the exception class name: 'ServiceException'",
        "D": "getMessage() will return 'Failed to process request' without the stack trace"
      },
      "correct_answer": "D",
      "code_example": "public class ExceptionAnalysisExample {\n    public static void main(String[] args) {\n        try {\n            processRequest();\n        } catch (ServiceException e) {\n            System.out.println(\"Error message: \" + e.getMessage());\n            System.out.println(\"Root cause: \" + (e.getCause() != null ? e.getCause().getMessage() : \"None\"));\n            e.printStackTrace();\n        }\n    }\n    \n    private static void processRequest() throws ServiceException {\n        try {\n            connectToDatabase();\n        } catch (DatabaseException e) {\n            throw new ServiceException(\"Failed to process request\", e);\n        }\n    }\n    \n    private static void connectToDatabase() throws DatabaseException {\n        throw new DatabaseException(\"Database connection failed\");\n    }\n}\n\nclass ServiceException extends Exception {\n    public ServiceException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n\nclass DatabaseException extends Exception {\n    public DatabaseException(String message) {\n        super(message);\n    }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "topic": "Method Hiding in Java (Static Methods Overriding)",
      "question": "What will be the output of the following code which demonstrates method hiding?",
      "options": {
        "A": "Parent static method\nParent static method",
        "B": "Parent static method\nChild static method",
        "C": "Child static method\nChild static method",
        "D": "Child static method\nParent static method"
      },
      "correct_answer": "B",
      "code_example": "class Parent {\n    public static void staticMethod() {\n        System.out.println(\"Parent static method\");\n    }\n}\n\nclass Child extends Parent {\n    public static void staticMethod() {\n        System.out.println(\"Child static method\");\n    }\n}\n\npublic class MethodHidingExample {\n    public static void main(String[] args) {\n        Parent p = new Child();\n        p.staticMethod();\n        \n        Child c = new Child();\n        c.staticMethod();\n    }\n}"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "topic": "Read-Write Locks (ReentrantReadWriteLock)",
      "question": "In the context of ReentrantReadWriteLock, which of the following statements is true?",
      "options": {
        "A": "Multiple threads can acquire the read lock while a thread holds the write lock",
        "B": "A thread holding the read lock can upgrade to a write lock without releasing the read lock first",
        "C": "Multiple threads can acquire the read lock simultaneously, but only one thread can hold the write lock",
        "D": "The lock will automatically downgrade from write to read mode when another thread requests read access"
      },
      "correct_answer": "C"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "topic": "Class Loaders (Bootstrap, Extension, Application/System)",
      "question": "Which of the following statements about Java's ClassLoader hierarchy is correct?",
      "options": {
        "A": "The Application ClassLoader is the parent of the Extension ClassLoader",
        "B": "The Bootstrap ClassLoader loads classes from the JDK's lib/ext directory",
        "C": "The Extension ClassLoader is implemented in native code, not Java",
        "D": "The Bootstrap ClassLoader is the parent of both the Extension and Application ClassLoaders"
      },
      "correct_answer": "D"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "topic": "Default Methods in Interfaces (Java 8)",
      "question": "What will be the output of the following code which uses default methods in interfaces?",
      "options": {
        "A": "Printable.print\nDocument.print",
        "B": "Document.print\nDocument.print",
        "C": "Printable.print\nPrintable.print",
        "D": "Compilation error: class Document inherits unrelated defaults for print() from types Printable and Scannable"
      },
      "correct_answer": "B",
      "code_example": "interface Printable {\n    default void print() {\n        System.out.println(\"Printable.print\");\n    }\n}\n\ninterface Scannable {\n    default void print() {\n        System.out.println(\"Scannable.print\");\n    }\n}\n\nclass Document implements Printable, Scannable {\n    @Override\n    public void print() {\n        System.out.println(\"Document.print\");\n    }\n}\n\npublic class DefaultMethodExample {\n    public static void main(String[] args) {\n        Printable p = new Document();\n        p.print();\n        \n        Document d = new Document();\n        d.print();\n    }\n}"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "topic": "Externalized Configuration (YAML, Property Files, Environment Variables)",
      "question": "In a Spring Boot application with the following configuration setup, which value will be used for the 'app.timeout' property when the application is run with the command 'java -jar app.jar --spring.profiles.active=prod'?",
      "options": {
        "A": "5000 (from application.yml)",
        "B": "10000 (from application-prod.yml)",
        "C": "15000 (from application-prod.properties)",
        "D": "20000 (from command line argument)"
      },
      "correct_answer": "C",
      "code_example": "// Content of application.yml\n// ---\n// app:\n//   timeout: 5000\n//   retry: true\n\n// Content of application-prod.yml\n// ---\n// app:\n//   timeout: 10000\n//   retry: false\n\n// Content of application-prod.properties\n// app.timeout=15000\n\n// Command to run:\n// java -jar app.jar --spring.profiles.active=prod\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class ConfigurationExample {\n    \n    @Value(\"${app.timeout}\")\n    private int timeout;\n    \n    @Bean\n    public void displayTimeout() {\n        System.out.println(\"Using timeout value: \" + timeout);\n    }\n    \n    public static void main(String[] args) {\n        SpringApplication.run(ConfigurationExample.class, args);\n    }\n}"
    }
  ]
}
