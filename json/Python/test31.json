{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "def greet(name, greeting='Hello'):\n    return f'{greeting}, {name}!'\n\nprint(greet('Alice'))",
      "options": {
        "A": "Hello Alice",
        "B": "Hello, Alice!",
        "C": "Alice, Hello!",
        "D": "Alice Hello"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What exception will be raised when executing the following code?",
      "code_example": "numbers = [1, 2, 3, 4, 5]\nprint(numbers[10])",
      "options": {
        "A": "ValueError",
        "B": "TypeError",
        "C": "IndexError",
        "D": "KeyError"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code that calculates the greatest common divisor (GCD)?",
      "code_example": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(gcd(48, 18))",
      "options": {
        "A": "6",
        "B": "3",
        "C": "9",
        "D": "2"
      },
      "correct_answer": "A"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What does the following binary search code return when searching for the value 7 in the given array?",
      "code_example": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\narr = [1, 3, 5, 7, 9, 11]\nprint(binary_search(arr, 7))",
      "options": {
        "A": "-1",
        "B": "3",
        "C": "4",
        "D": "7"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code using a conditional expression?",
      "code_example": "age = 17\nstatus = 'adult' if age >= 18 else 'minor'\nprint(status)",
      "options": {
        "A": "adult",
        "B": "minor",
        "C": "True",
        "D": "False"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What is the median value of the following list?",
      "code_example": "numbers = [4, 1, 7, 2, 8]\nnumbers.sort()\nmedian = numbers[len(numbers) // 2]\nprint(median)",
      "options": {
        "A": "1",
        "B": "4",
        "C": "7",
        "D": "8"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the value of 'result' after the following code executes?",
      "code_example": "x = 10\n\ndef modify_x():\n    global x\n    x = 20\n    y = 5\n    return x + y\n\nresult = modify_x()\nprint(result)",
      "options": {
        "A": "10",
        "B": "15",
        "C": "20",
        "D": "25"
      },
      "correct_answer": "D"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will the following palindrome checking function return for the input 'racecar'?",
      "code_example": "def is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome('racecar'))",
      "options": {
        "A": "True",
        "B": "False",
        "C": "'racecar'",
        "D": "None"
      },
      "correct_answer": "A"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code using a while loop with break?",
      "code_example": "i = 0\nwhile i < 10:\n    i += 1\n    if i == 5:\n        break\n    print(i, end=' ')\nprint('done')",
      "options": {
        "A": "1 2 3 4 done",
        "B": "1 2 3 4 5 done",
        "C": "0 1 2 3 4 done",
        "D": "1 2 3 4 5 6 7 8 9 done"
      },
      "correct_answer": "A"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which of the following correctly defines a function that takes two parameters and returns their sum?",
      "options": {
        "A": "def add(x, y): return x + y",
        "B": "function add(x, y): return x + y",
        "C": "def add(x, y) { return x + y }",
        "D": "add = lambda x y: x + y"
      },
      "correct_answer": "A"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following type checking code?",
      "code_example": "value = 42\nif isinstance(value, int):\n    print('Integer')\nelif isinstance(value, str):\n    print('String')\nelse:\n    print('Other')",
      "options": {
        "A": "42",
        "B": "Integer",
        "C": "String",
        "D": "Other"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "Which of the following is the correct way to include a docstring in a function?",
      "options": {
        "A": "// This function adds two numbers",
        "B": "# This function adds two numbers",
        "C": "/* This function adds two numbers */",
        "D": "\"\"\"This function adds two numbers\"\"\""
      },
      "correct_answer": "D"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the final state of the array after executing this bubble sort code?",
      "code_example": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\nprint(bubble_sort([64, 34, 25, 12, 22]))",
      "options": {
        "A": "[12, 22, 25, 34, 64]",
        "B": "[64, 34, 25, 22, 12]",
        "C": "[25, 22, 34, 12, 64]",
        "D": "[12, 22, 34, 25, 64]"
      },
      "correct_answer": "A"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be printed by the following code manipulating a list?",
      "code_example": "fruits = ['apple', 'banana', 'cherry']\nfruits.append('orange')\nfruits.insert(1, 'kiwi')\nfruits.pop()\nprint(fruits)",
      "options": {
        "A": "['apple', 'kiwi', 'banana', 'cherry']",
        "B": "['apple', 'kiwi', 'banana', 'cherry', 'orange']",
        "C": "['apple', 'banana', 'cherry', 'kiwi']",
        "D": "['apple', 'kiwi', 'banana']"
      },
      "correct_answer": "A"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What is the difference between parameters and arguments in Python functions?",
      "options": {
        "A": "They are exactly the same thing",
        "B": "Parameters are defined in the function definition, while arguments are the values passed to a function when it's called",
        "C": "Arguments are defined in the function definition, while parameters are the values passed to a function when it's called",
        "D": "Parameters are optional, but arguments are required"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will the following linear search implementation return when searching for 5 in the given list?",
      "code_example": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\nprint(linear_search([9, 3, 5, 1, 7], 5))",
      "options": {
        "A": "True",
        "B": "5",
        "C": "2",
        "D": "-1"
      },
      "correct_answer": "C"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of this code demonstrating class variables vs instance variables?",
      "code_example": "class Counter:\n    count = 0  # class variable\n    \n    def __init__(self):\n        self.instance_count = 0  # instance variable\n    \n    def increment(self):\n        Counter.count += 1\n        self.instance_count += 1\n\ncounter1 = Counter()\ncounter2 = Counter()\n\ncounter1.increment()\ncounter1.increment()\ncounter2.increment()\n\nprint(f\"{Counter.count}, {counter1.instance_count}, {counter2.instance_count}\")",
      "options": {
        "A": "2, 2, 1",
        "B": "3, 2, 1",
        "C": "3, 3, 3",
        "D": "2, 1, 1"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code using a decorator with an argument?",
      "code_example": "def repeat(n):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            result = None\n            for _ in range(n):\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello(name):\n    print(f\"Hello, {name}!\")\n    return name\n\nresult = say_hello(\"Alice\")\nprint(f\"Result: {result}\")",
      "options": {
        "A": "Hello, Alice!\nResult: Alice",
        "B": "Hello, Alice!\nHello, Alice!\nHello, Alice!\nResult: Alice",
        "C": "Result: Hello, Alice!",
        "D": "Hello, Alice!\nHello, Alice!\nHello, Alice!\nResult: None"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output when the following singly linked list code is executed?",
      "code_example": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        \n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n    \n    def get_middle(self):\n        slow = fast = self.head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        return slow.data if slow else None\n\nll = LinkedList()\nfor i in [1, 2, 3, 4, 5]:\n    ll.append(i)\n\nprint(ll.get_middle())",
      "options": {
        "A": "2",
        "B": "3",
        "C": "4",
        "D": "None"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code using partial functions?",
      "code_example": "from functools import partial\n\ndef multiply(x, y):\n    return x * y\n\ndouble = partial(multiply, 2)\ntriple = partial(multiply, 3)\n\nprint(double(5), triple(5))",
      "options": {
        "A": "10 15",
        "B": "7 8",
        "C": "25 125",
        "D": "10 5"
      },
      "correct_answer": "A"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "In a Python package structure, what is the primary purpose of the __init__.py file?",
      "options": {
        "A": "To initialize class variables when creating instances",
        "B": "To mark a directory as a Python package and define what gets imported with 'from package import *'",
        "C": "To store initialization configuration settings for the application",
        "D": "It's a required file that must contain the main() function for every Python application"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the result of the following code that combines functional operations?",
      "code_example": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = sum(filter(lambda x: x % 2 == 0, map(lambda x: x**2, numbers)))\nprint(result)",
      "options": {
        "A": "55",
        "B": "30",
        "C": "220",
        "D": "120"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of this code using the two-pointer technique to find pairs that sum to a target?",
      "code_example": "def find_pairs(arr, target):\n    arr.sort()\n    left, right = 0, len(arr) - 1\n    pairs = []\n    \n    while left < right:\n        current_sum = arr[left] + arr[right]\n        \n        if current_sum == target:\n            pairs.append((arr[left], arr[right]))\n            left += 1\n            right -= 1\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n    \n    return pairs\n\nprint(find_pairs([1, 8, 3, 6, 5, 4, 2, 7], 9))",
      "options": {
        "A": "[(1, 8), (2, 7), (3, 6), (4, 5)]",
        "B": "[(1, 8), (2, 7)]",
        "C": "[(2, 7), (3, 6), (4, 5)]",
        "D": "[(1, 8)]"
      },
      "correct_answer": "A"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "When creating a web application with Flask, which of the following is the correct default folder structure for templates and static files?",
      "options": {
        "A": "/templates for HTML files and /static for CSS, JS, and images",
        "B": "/views for HTML files and /assets for CSS, JS, and images",
        "C": "/pages for HTML files and /resources for CSS, JS, and images",
        "D": "/html for HTML files and /public for CSS, JS, and images"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "Which of the following regular expressions would be most performant for matching a simple email pattern?",
      "options": {
        "A": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
        "B": "^.*@.*\\..*$",
        "C": "^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,})$",
        "D": "^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\]\\\\.,;:\\s@\"]+\\.)+[^<>()[\\]\\\\.,;:\\s@\"]{2,})$"
      },
      "correct_answer": "A"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following code using the requests library?",
      "code_example": "import requests\n\ndef get_status_code(url):\n    try:\n        response = requests.get(url, timeout=3)\n        return response.status_code\n    except requests.exceptions.RequestException:\n        return 'Error'\n\n# Simulating the function for test purposes\ndef simulated_get_status_code(url):\n    if url.startswith('https'):\n        return 200\n    elif url.startswith('http'):\n        return 301\n    else:\n        return 'Error'\n\n# Using the simulation for testing\nprint(simulated_get_status_code('https://example.com'))",
      "options": {
        "A": "Error",
        "B": "200",
        "C": "301",
        "D": "None"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "Which of the following is the most secure way to connect to a SQLite database in Python?",
      "options": {
        "A": "import sqlite3; conn = sqlite3.connect('database.db')",
        "B": "import sqlite3; conn = sqlite3.connect(':memory:')",
        "C": "from sqlalchemy import create_engine; engine = create_engine('sqlite:///database.db')",
        "D": "import mysql.connector; conn = mysql.connector.connect(host='localhost', database='database')"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of this code that manipulates nested data structures?",
      "code_example": "people = [\n    {'name': 'Alice', 'age': 25, 'skills': ['Python', 'SQL']},\n    {'name': 'Bob', 'age': 30, 'skills': ['Java', 'C++']},\n    {'name': 'Charlie', 'age': 35, 'skills': ['Python', 'JavaScript']}\n]\n\npython_devs = [person['name'] for person in people if 'Python' in person['skills']]\nprint(python_devs)",
      "options": {
        "A": "['Alice', 'Charlie']",
        "B": "['Alice', 'Bob', 'Charlie']",
        "C": "['Python', 'Python']",
        "D": "[{'name': 'Alice'}, {'name': 'Charlie'}]"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What's the difference between a generator expression and a list comprehension in terms of memory usage?",
      "code_example": "import sys\n\n# List comprehension\nlist_comp = sys.getsizeof([x for x in range(1000)])\n\n# Generator expression\ngen_expr = sys.getsizeof(x for x in range(1000))\n\nprint(f\"List comprehension larger than generator expression: {list_comp > gen_expr}\")",
      "options": {
        "A": "List comprehension larger than generator expression: False",
        "B": "List comprehension larger than generator expression: True",
        "C": "They use exactly the same amount of memory",
        "D": "This code will raise a TypeError"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code using map, filter, and reduce?",
      "code_example": "from functools import reduce\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Map: Double each number\ndoubled = list(map(lambda x: x * 2, numbers))\n\n# Filter: Keep only even numbers\nevens = list(filter(lambda x: x % 2 == 0, doubled))\n\n# Reduce: Sum all numbers\ntotal = reduce(lambda x, y: x + y, evens)\n\nprint(total)",
      "options": {
        "A": "30",
        "B": "20",
        "C": "15",
        "D": "10"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "Which of the following correctly demonstrates creating and importing a custom module in Python?",
      "options": {
        "A": "save as mymodule.py: def hello(): return 'Hello'\nimport mymodule; print(mymodule.hello())",
        "B": "save as mymodule.py: function hello() { return 'Hello'; }\nimport mymodule; print(mymodule.hello())",
        "C": "save as mymodule.py: export default function hello() { return 'Hello'; }\nfrom mymodule import hello; print(hello())",
        "D": "save as mymodule.py: def hello(): pass\nrequire mymodule; print(mymodule.hello())"
      },
      "correct_answer": "A"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following generator function?",
      "code_example": "def fibonacci_generator(n):\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        yield a\n        a, b = b, a + b\n        count += 1\n\ngen = fibonacci_generator(5)\nresult = list(gen)\nprint(result)",
      "options": {
        "A": "[0, 1, 1, 2, 3]",
        "B": "[1, 1, 2, 3, 5]",
        "C": "[0, 1, 1, 2, 3, 5]",
        "D": "[1, 2, 3, 5, 8]"
      },
      "correct_answer": "A"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Consider this implementation of the Knuth-Morris-Pratt (KMP) string matching algorithm. What will be the output when searching for the pattern 'ABABCAB' in the text 'ABABDABACDABABCAB'?",
      "options": {
        "A": "[10]",
        "B": "[0, 10]",
        "C": "[0, 9, 10]",
        "D": "[10, 11]"
      },
      "correct_answer": "A",
      "code_example": "def compute_lps(pattern):\n    m = len(pattern)\n    lps = [0] * m\n    length = 0\n    i = 1\n    \n    while i < m:\n        if pattern[i] == pattern[length]:\n            length += 1\n            lps[i] = length\n            i += 1\n        else:\n            if length != 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n    \n    return lps\n\ndef kmp_search(text, pattern):\n    n = len(text)\n    m = len(pattern)\n    \n    if m == 0:\n        return []\n    \n    lps = compute_lps(pattern)\n    \n    i = 0  # index for text\n    j = 0  # index for pattern\n    indices = []\n    \n    while i < n:\n        if pattern[j] == text[i]:\n            i += 1\n            j += 1\n        \n        if j == m:\n            indices.append(i - j)\n            j = lps[j - 1]\n        elif i < n and pattern[j] != text[i]:\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    \n    return indices\n\ntext = \"ABABDABACDABABCAB\"\npattern = \"ABABCAB\"\nprint(kmp_search(text, pattern))"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What is the primary advantage of using the Rabin-Karp algorithm over a naive string matching approach?",
      "options": {
        "A": "It always has a better worst-case time complexity of O(n)",
        "B": "It can efficiently search for multiple patterns simultaneously",
        "C": "It doesn't require preprocessing of the pattern",
        "D": "It uses less memory than any other string matching algorithm"
      },
      "correct_answer": "B",
      "code_example": null
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following Trie implementation when searching for the word 'apple' after inserting several words into the trie?",
      "options": {
        "A": "True",
        "B": "False",
        "C": "None",
        "D": "KeyError"
      },
      "correct_answer": "A",
      "code_example": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True\n    \n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_end_of_word\n    \n    def starts_with(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return True\n\n# Create a trie and insert words\ntrie = Trie()\ntrie.insert(\"apple\")\ntrie.insert(\"application\")\ntrie.insert(\"appreciate\")\ntrie.insert(\"approach\")\n\n# Search for the word 'apple'\nprint(trie.search(\"apple\"))"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "In a distributed caching system using consistent hashing, which of the following statements is true?",
      "options": {
        "A": "Adding or removing a node requires remapping all keys in the cache",
        "B": "Only keys mapped to the added or removed node need to be remapped",
        "C": "No keys need to be remapped when adding or removing nodes",
        "D": "Only a fraction of keys need to be remapped, primarily those assigned to the added or removed node"
      },
      "correct_answer": "D",
      "code_example": null
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What is the time complexity of the following approximation algorithm for the Traveling Salesman Problem using the nearest neighbor heuristic?",
      "options": {
        "A": "O(n)",
        "B": "O(n²)",
        "C": "O(n log n)",
        "D": "O(2ⁿ)"
      },
      "correct_answer": "B",
      "code_example": "import numpy as np\n\ndef nearest_neighbor_tsp(distances):\n    n = len(distances)\n    \n    # Start from the first city (index 0)\n    current_city = 0\n    unvisited = set(range(1, n))  # All cities except the starting one\n    tour = [current_city]\n    total_distance = 0\n    \n    # Visit all cities\n    while unvisited:\n        # Find the nearest unvisited city\n        nearest_city = min(unvisited, key=lambda city: distances[current_city][city])\n        \n        # Add to tour and update distance\n        total_distance += distances[current_city][nearest_city]\n        current_city = nearest_city\n        tour.append(current_city)\n        unvisited.remove(current_city)\n    \n    # Return to the starting city\n    tour.append(tour[0])\n    total_distance += distances[tour[-2]][tour[0]]\n    \n    return tour, total_distance\n\n# Example usage with 5 cities\ndistances = np.array([\n    [0, 10, 15, 20, 25],\n    [10, 0, 35, 25, 30],\n    [15, 35, 0, 30, 5],\n    [20, 25, 30, 0, 15],\n    [25, 30, 5, 15, 0]\n])\n\n# Execute the algorithm\ntour, distance = nearest_neighbor_tsp(distances)\nprint(f\"Time complexity analysis for {len(distances)} cities\")"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "Which of the following is NOT a recommended approach for implementing API rate limiting in a production environment?",
      "options": {
        "A": "Token bucket algorithm",
        "B": "Leaky bucket algorithm",
        "C": "Fixed window counter",
        "D": "Linear regression prediction"
      },
      "correct_answer": "D",
      "code_example": null
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements a Factory pattern and demonstrates the Liskov Substitution Principle (LSP)?",
      "options": {
        "A": "Original shape area: 50\nSubstituted shape area: 50",
        "B": "Original shape area: 50\nSubstituted shape area: 25",
        "C": "Original shape area: 25\nSubstituted shape area: 50",
        "D": "TypeError: Can't instantiate abstract class Shape with abstract method area"
      },
      "correct_answer": "A",
      "code_example": "from abc import ABC, abstractmethod\n\n# Abstract base class (interface)\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\n# Concrete implementation\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height\n\n# Subclass that respects LSP\nclass Square(Rectangle):\n    def __init__(self, side):\n        super().__init__(side, side)\n    \n    # No need to override area as Rectangle's implementation works\n\n# Factory class\nclass ShapeFactory:\n    @staticmethod\n    def create_shape(shape_type, *args):\n        if shape_type == \"rectangle\":\n            return Rectangle(*args)\n        elif shape_type == \"square\":\n            return Square(*args)\n        else:\n            raise ValueError(f\"Unknown shape type: {shape_type}\")\n\n# Client code that depends on Shape\ndef print_area(shape):\n    return shape.area()\n\n# Using the factory to create objects\nrectangle = ShapeFactory.create_shape(\"rectangle\", 5, 10)\nprint(f\"Original shape area: {print_area(rectangle)}\")\n\n# Substituting a Rectangle with a Square (LSP)\nsquare = ShapeFactory.create_shape(\"square\", 5)\n# rectangle = square  # Substitution\nprint(f\"Substituted shape area: {print_area(square)}\")"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What is the primary benefit of using Cython for Python extensions?",
      "options": {
        "A": "It allows direct calling of Python functions from C code",
        "B": "It automatically parallelizes code execution across multiple cores",
        "C": "It translates Python code to C and compiles it for faster execution",
        "D": "It reduces memory usage by compressing Python objects"
      },
      "correct_answer": "C",
      "code_example": null
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "In the context of web APIs, which of the following correctly describes the relationship between authentication and authorization?",
      "options": {
        "A": "Authentication verifies permissions while authorization verifies identity",
        "B": "Authentication and authorization are synonyms referring to the same security process",
        "C": "Authentication verifies identity while authorization verifies permissions",
        "D": "Authentication encrypts data while authorization decrypts it"
      },
      "correct_answer": "C",
      "code_example": null
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of the following code that compares memoization and tabulation approaches for computing Fibonacci numbers?",
      "options": {
        "A": "Memoization: 55\nTabulation: 55\nBoth approaches give the same result.",
        "B": "Memoization: 55\nTabulation: 89\nApproaches give different results.",
        "C": "Memoization: 89\nTabulation: 55\nApproaches give different results.",
        "D": "RecursionError: maximum recursion depth exceeded"
      },
      "correct_answer": "A",
      "code_example": "# Memoization (top-down approach)\ndef fib_memo(n, memo=None):\n    if memo is None:\n        memo = {}\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)\n    return memo[n]\n\n# Tabulation (bottom-up approach)\ndef fib_tab(n):\n    if n <= 1:\n        return n\n    \n    # Initialize the table\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    \n    # Fill the table\n    for i in range(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]\n\n# Compare both approaches\nn = 10\nmemo_result = fib_memo(n)\ntab_result = fib_tab(n)\n\nprint(f\"Memoization: {memo_result}\")\nprint(f\"Tabulation: {tab_result}\")\nif memo_result == tab_result:\n    print(\"Both approaches give the same result.\")\nelse:\n    print(\"Approaches give different results.\")"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following basic machine learning pipeline implementation?",
      "options": {
        "A": "Mean accuracy: 0.6",
        "B": "Mean accuracy: 0.75",
        "C": "Mean accuracy: 0.8",
        "D": "Mean accuracy: 0.95"
      },
      "correct_answer": "C",
      "code_example": "import numpy as np\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create a simple dataset\nX, y = make_classification(\n    n_samples=100,\n    n_features=20,\n    n_informative=10,\n    n_redundant=5,\n    random_state=42\n)\n\n# Build a simple ML pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),  # Standardize features\n    ('classifier', RandomForestClassifier(n_estimators=10, random_state=42))\n])\n\n# Simulate cross-validation results\n# Instead of actually running cross_val_score which can be environment-dependent,\n# we'll simulate the expected output for reproducibility\nsimulated_scores = np.array([0.75, 0.8, 0.85, 0.85, 0.75])\n\n# Calculate and print the mean accuracy\nmean_accuracy = simulated_scores.mean()\nprint(f\"Mean accuracy: {mean_accuracy}\")"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "Which of the following statements about threading vs multiprocessing in Python is correct?",
      "options": {
        "A": "Threading is always faster than multiprocessing for CPU-bound tasks",
        "B": "The Global Interpreter Lock (GIL) allows multiple threads to execute Python bytecode simultaneously",
        "C": "Multiprocessing has higher overhead but can utilize multiple CPU cores for parallel computation",
        "D": "Threading and multiprocessing provide identical performance benefits in all scenarios"
      },
      "correct_answer": "C",
      "code_example": null
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following pytest test case that uses fixtures and parameterization?",
      "options": {
        "A": "All tests pass",
        "B": "One test fails with AssertionError",
        "C": "Two tests fail with AssertionError",
        "D": "SyntaxError: invalid syntax"
      },
      "correct_answer": "B",
      "code_example": "# Let's simulate a pytest execution\n\ndef test_add_numbers():\n    # This simulates the following pytest code:\n    \"\"\"\n    import pytest\n    \n    # Function to test\n    def add_numbers(a, b):\n        return a + b\n    \n    # Fixture to provide test data\n    @pytest.fixture\n    def number_pairs():\n        return [(1, 2, 3), (5, 5, 10), (10, -5, 5), (3, 3, 7)]\n    \n    # Parameterized test\n    @pytest.mark.parametrize(\"a,b,expected\", [(1, 2, 3), (5, 5, 10), (10, -5, 5), (3, 3, 7)])\n    def test_add_numbers(a, b, expected):\n        assert add_numbers(a, b) == expected\n    \"\"\"\n    \n    # Simulation of the test results\n    def add_numbers(a, b):\n        return a + b\n    \n    # Test cases: (a, b, expected)\n    test_cases = [(1, 2, 3), (5, 5, 10), (10, -5, 5), (3, 3, 7)]\n    \n    # Run the tests and collect results\n    results = []\n    for a, b, expected in test_cases:\n        try:\n            result = add_numbers(a, b)\n            assert result == expected, f\"Expected {expected}, got {result}\"\n            results.append(\"PASS\")\n        except AssertionError:\n            results.append(\"FAIL\")\n    \n    # Count failures\n    failures = results.count(\"FAIL\")\n    \n    if failures == 0:\n        return \"All tests pass\"\n    elif failures == 1:\n        return \"One test fails with AssertionError\"\n    elif failures == 2:\n        return \"Two tests fail with AssertionError\"\n    else:\n        return f\"{failures} tests fail with AssertionError\"\n\nprint(test_add_numbers())"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements the Observer design pattern?",
      "options": {
        "A": "Observer1 received: Weather update: Sunny, 25°C\nObserver2 received: Weather update: Sunny, 25°C",
        "B": "Observer1 received: Weather update: Sunny\nObserver2 received: Weather update: 25°C",
        "C": "Observer1 received: Weather update: Sunny, 25°C",
        "D": "No output, as the observers are not properly attached"
      },
      "correct_answer": "A",
      "code_example": "class Subject:\n    def __init__(self):\n        self._observers = []\n    \n    def attach(self, observer):\n        if observer not in self._observers:\n            self._observers.append(observer)\n    \n    def detach(self, observer):\n        try:\n            self._observers.remove(observer)\n        except ValueError:\n            pass\n    \n    def notify(self, message):\n        for observer in self._observers:\n            observer.update(message)\n\nclass Observer:\n    def __init__(self, name):\n        self.name = name\n    \n    def update(self, message):\n        print(f\"{self.name} received: {message}\")\n\n# Weather station example\nclass WeatherStation(Subject):\n    def __init__(self):\n        super().__init__()\n        self._temperature = 0\n        self._condition = \"\"\n    \n    def set_weather(self, temperature, condition):\n        self._temperature = temperature\n        self._condition = condition\n        self.notify(f\"Weather update: {condition}, {temperature}°C\")\n\n# Create the subject\nweather_station = WeatherStation()\n\n# Create observers\nobserver1 = Observer(\"Observer1\")\nobserver2 = Observer(\"Observer2\")\n\n# Attach observers to the subject\nweather_station.attach(observer1)\nweather_station.attach(observer2)\n\n# Change the weather (this will trigger notifications)\nweather_station.set_weather(25, \"Sunny\")"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates dependency injection?",
      "options": {
        "A": "Using PostgreSQL database\nUser added: John",
        "B": "Using SQLite database\nUser added: John",
        "C": "AttributeError: 'NoneType' object has no attribute 'add_user'",
        "D": "TypeError: __init__() missing 1 required positional argument: 'database'"
      },
      "correct_answer": "A",
      "code_example": "class Database:\n    def add_user(self, user):\n        pass\n\nclass PostgreSQLDatabase(Database):\n    def add_user(self, user):\n        print(f\"Using PostgreSQL database\\nUser added: {user}\")\n\nclass SQLiteDatabase(Database):\n    def add_user(self, user):\n        print(f\"Using SQLite database\\nUser added: {user}\")\n\nclass UserService:\n    def __init__(self, database):\n        self.database = database\n    \n    def add_user(self, user):\n        self.database.add_user(user)\n\n# Create a database instance\ndb = PostgreSQLDatabase()\n\n# Inject the database dependency into the UserService\nuser_service = UserService(db)\n\n# Use the service\nuser_service.add_user(\"John\")"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "In Kubernetes, what does the term 'Pod' refer to?",
      "options": {
        "A": "A single instance of a running process in a cluster",
        "B": "A collection of containers that share storage and network resources and a specification for how to run the containers",
        "C": "A service that exposes an application running on a set of Pods",
        "D": "A component responsible for load balancing traffic between different nodes"
      },
      "correct_answer": "B",
      "code_example": null
    }
  ]
}
