{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[0, 1, 2, 3]",
        "B": "[0, 1, 2, 3, 4]",
        "C": "[1, 2, 3, 4]",
        "D": "[1, 2, 3]"
      },
      "correct_answer": "B",
      "code_example": "print(list(range(5)))"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What does the enumerate() function do in Python?",
      "options": {
        "A": "It converts a list to a dictionary",
        "B": "It counts the number of elements in a list",
        "C": "It returns both the index and value of elements in an iterable",
        "D": "It checks if all elements in a list are enumerable"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]",
        "B": "[(1, 'a'), (2, 'b'), (3, 'c')]",
        "C": "[(0, 1, 'a'), (1, 2, 'b'), (2, 3, 'c')]",
        "D": "Error: too many values to unpack"
      },
      "correct_answer": "B",
      "code_example": "numbers = [1, 2, 3, 4]\nletters = ['a', 'b', 'c']\nprint(list(zip(numbers, letters)))"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "Which of the following is a correct way to check if a number is prime?",
      "options": {
        "A": "def is_prime(n):\n    return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))",
        "B": "def is_prime(n):\n    return n > 1 and all(n % i != 0 for i in range(2, n))",
        "C": "def is_prime(n):\n    return n >= 2 and all(n % i != 0 for i in range(2, n//2))",
        "D": "def is_prime(n):\n    return n > 0 and all(n % i != 0 for i in range(2, n + 1))"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "10",
        "B": "5",
        "C": "Error: UnboundLocalError",
        "D": "None"
      },
      "correct_answer": "C",
      "code_example": "x = 5\n\ndef modify_x():\n    x = x + 5\n    return x\n\nprint(modify_x())"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{1, 2, 3, 4, 5}",
        "B": "{1, 2, 3, 4, 5, 6}",
        "C": "{4, 5, 6}",
        "D": "{1, 2, 3}"
      },
      "correct_answer": "B",
      "code_example": "set1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6}\nprint(set1.union(set2))"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{4, 5}",
        "B": "{1, 2, 3}",
        "C": "{1, 2, 3, 4, 5, 6}",
        "D": "{}"
      },
      "correct_answer": "A",
      "code_example": "set1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6}\nprint(set1.intersection(set2))"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "File not found",
        "B": "Permission denied",
        "C": "Error reading file",
        "D": "Unknown error occurred"
      },
      "correct_answer": "A",
      "code_example": "try:\n    with open('nonexistent_file.txt', 'r') as file:\n        content = file.read()\nexcept FileNotFoundError:\n    print('File not found')\nexcept PermissionError:\n    print('Permission denied')\nexcept Exception:\n    print('Unknown error occurred')"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the decimal value of the binary number 1101?",
      "options": {
        "A": "11",
        "B": "13",
        "C": "14",
        "D": "15"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "15",
        "B": "F",
        "C": "0xF",
        "D": "0X15"
      },
      "correct_answer": "B",
      "code_example": "decimal_value = 15\nhex_value = format(decimal_value, 'X')\nprint(hex_value)"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "My name is Alice and I am 30 years old",
        "B": "My name is name and I am age years old",
        "C": "My name is {name} and I am {age} years old",
        "D": "Error: missing formatting arguments"
      },
      "correct_answer": "A",
      "code_example": "name = 'Alice'\nage = 30\nprint(f\"My name is {name} and I am {age} years old\")"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What is the median value of the following list: [5, 2, 9, 1, 7]?",
      "options": {
        "A": "5",
        "B": "2",
        "C": "7",
        "D": "4.8"
      },
      "correct_answer": "A"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "Which file mode is used for both reading and writing binary data?",
      "options": {
        "A": "'rb'",
        "B": "'wb'",
        "C": "'ab'",
        "D": "'r+b'"
      },
      "correct_answer": "D"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What is the difference between parameters and arguments in Python functions?",
      "options": {
        "A": "They are exactly the same thing",
        "B": "Parameters are defined in function definitions; arguments are the values passed to functions when called",
        "C": "Arguments are defined in function definitions; parameters are the values passed to functions when called",
        "D": "Parameters are only used with positional arguments; arguments are only used with keyword arguments"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "First line\nSecond line",
        "B": "First line\\nSecond line",
        "C": "First line Second line",
        "D": "Error: invalid syntax"
      },
      "correct_answer": "A",
      "code_example": "multi_line = \"\"\"First line\nSecond line\"\"\"\nprint(multi_line)"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "C:\\Users\\Documents",
        "B": "C:/Users/Documents",
        "C": "C:UsersDocuments",
        "D": "Error: invalid escape character"
      },
      "correct_answer": "A",
      "code_example": "path = r\"C:\\Users\\Documents\"\nprint(path)"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Running function\nFunction executed in 0.5 seconds",
        "B": "Function executed in 0.5 seconds\nRunning function",
        "C": "Running function\nFunction 'simulate_work' executed in 0.5 seconds",
        "D": "Function 'simulate_work' executed in 0.5 seconds"
      },
      "correct_answer": "C",
      "code_example": "import time\n\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"Function '{func.__name__}' executed in {end_time - start_time:.1f} seconds\")\n        return result\n    return wrapper\n\n@timing_decorator\ndef simulate_work():\n    print(\"Running function\")\n    time.sleep(0.5)\n\nsimulate_work()"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Before: 5, After: 15",
        "B": "Before: 5, After: 5",
        "C": "Before: 5, After: factorial(3) = 6",
        "D": "Before: 5, After: 6"
      },
      "correct_answer": "C",
      "code_example": "def decorator_with_args(arg1):\n    def actual_decorator(func):\n        def wrapper(*args, **kwargs):\n            result = func(*args, **kwargs)\n            return f\"{arg1}({args[0]}) = {result}\"\n        return wrapper\n    return actual_decorator\n\nx = 5\nprint(f\"Before: {x}\")\n\n@decorator_with_args(\"factorial\")\ndef factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)\n\nx = factorial(3)\nprint(f\"After: {x}\")"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Person(name='Alice', age=30)",
        "B": "{'name': 'Alice', 'age': 30}",
        "C": "Person(name='Alice', age=30, city='New York')",
        "D": "Error: 'city' is not a field"
      },
      "correct_answer": "D",
      "code_example": "from collections import namedtuple\n\nPerson = namedtuple('Person', ['name', 'age'])\np = Person('Alice', 30)\nprint(p._replace(city='New York'))"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Counter({'a': 3, 'b': 2, 'c': 1})",
        "B": "Counter({'a': 3, 'b': 2})",
        "C": "{'a': 3, 'b': 2, 'c': 1}",
        "D": "['a', 'a', 'a', 'b', 'b', 'c']"
      },
      "correct_answer": "A",
      "code_example": "from collections import Counter\n\ndata = ['a', 'a', 'b', 'a', 'c', 'b']\ncounter = Counter(data)\nprint(counter)"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",
        "B": "[0, 1, 1, 2, 3, 5, 8, 13, 21]",
        "C": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]",
        "D": "This code would run forever"
      },
      "correct_answer": "A",
      "code_example": "def fibonacci():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nfib_seq = []\nfor i, num in enumerate(fibonacci()):\n    if i >= 10:\n        break\n    fib_seq.append(num)\n\nprint(fib_seq)"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following breadth-first search function when searching for 5 in the given tree?",
      "options": {
        "A": "Found 5",
        "B": "Not found",
        "C": "Error: maximum recursion depth exceeded",
        "D": "Error: queue is empty"
      },
      "correct_answer": "A",
      "code_example": "from collections import deque\n\nclass TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef bfs(root, target):\n    if not root:\n        return \"Not found\"\n    \n    queue = deque([root])\n    \n    while queue:\n        node = queue.popleft()\n        \n        if node.value == target:\n            return f\"Found {target}\"\n        \n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n    \n    return \"Not found\"\n\n# Create a simple tree\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\n\nprint(bfs(root, 5))"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "Which command is used to install a specific version of a package using pip?",
      "options": {
        "A": "pip install package==version",
        "B": "pip install package@version",
        "C": "pip install package:version",
        "D": "pip install package -v version"
      },
      "correct_answer": "A"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[1, 4, 9, 16, 25]",
        "B": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "C": "<map object at 0x...>",
        "D": "Error: map object is not subscriptable"
      },
      "correct_answer": "A",
      "code_example": "numbers = [1, 2, 3, 4, 5]\nsquares = list(map(lambda x: x**2, numbers))\nprint(squares)"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "CustomObject(42)",
        "B": "<__main__.CustomObject object at 0x...>",
        "C": "42",
        "D": "CustomObject with value: 42"
      },
      "correct_answer": "D",
      "code_example": "class CustomObject:\n    def __init__(self, value):\n        self.value = value\n    \n    def __str__(self):\n        return f\"CustomObject with value: {self.value}\"\n    \n    def __repr__(self):\n        return f\"CustomObject({self.value})\"\n\nobj = CustomObject(42)\nprint(obj)"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "In Django, which function decorator is most commonly used to handle HTTP GET requests?",
      "options": {
        "A": "@api_view(['GET'])",
        "B": "@require_GET",
        "C": "@get_only",
        "D": "@method('GET')"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "['match', 'match', 'no match']",
        "B": "['match', 'no match', 'no match']",
        "C": "['no match', 'match', 'no match']",
        "D": "['match', 'match', 'match']"
      },
      "correct_answer": "A",
      "code_example": "import re\n\npattern = r'^\\d{3}-\\d{2}-\\d{4}$'\n\ninputs = ['123-45-6789', '123-45-6789', 'A12-34-5678']\nresults = []\n\nfor input_str in inputs:\n    if re.match(pattern, input_str):\n        results.append('match')\n    else:\n        results.append('no match')\n\nprint(results)"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "24",
        "B": "Error: 'x' attribute not found",
        "C": "Error: attribute 'x' is read-only",
        "D": "42"
      },
      "correct_answer": "D",
      "code_example": "class Rectangle:\n    def __init__(self, width, height):\n        self._width = width\n        self._height = height\n        self._area = width * height\n    \n    @property\n    def area(self):\n        return self._area\n    \n    @property\n    def x(self):\n        return self._width * self._height\n    \n    @x.setter\n    def x(self, value):\n        self._width = value // self._height\n        self._area = self._width * self._height\n\nrect = Rectangle(4, 6)\nrect.x = 42\nprint(rect.x)"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following hash-based search function?",
      "options": {
        "A": "Found at index 2",
        "B": "Not found",
        "C": "Found at index 1",
        "D": "Found at index 0"
      },
      "correct_answer": "C",
      "code_example": "def hash_search(data, target):\n    # Create a dictionary for O(1) lookup\n    hash_map = {}\n    \n    # Fill the hash map with values and their indices\n    for i, value in enumerate(data):\n        hash_map[value] = i\n    \n    # Look up the target in the hash map\n    if target in hash_map:\n        return f\"Found at index {hash_map[target]}\"\n    else:\n        return \"Not found\"\n\ndata = [5, 3, 8, 1, 9]\nprint(hash_search(data, 3))"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the result of the following functional operations chain?",
      "options": {
        "A": "[4, 8, 12, 16, 20]",
        "B": "[4, 16, 36, 64, 100]",
        "C": "[2, 6, 10, 14, 18]",
        "D": "[8, 16, 24, 32, 40]"
      },
      "correct_answer": "A",
      "code_example": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nresult = list(\n    map(lambda x: x * 2,\n        filter(lambda x: x % 2 == 0,\n               numbers))\n)\n\nprint(result)"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "In Django, which file is responsible for mapping URL patterns to view functions?",
      "options": {
        "A": "models.py",
        "B": "views.py",
        "C": "urls.py",
        "D": "settings.py"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "Which regular expression pattern will match strings that contain exactly 3 digits?",
      "options": {
        "A": "r'\\d{3}'",
        "B": "r'^\\d{3}$'",
        "C": "r'\\d\\d\\d'",
        "D": "r'[0-9][0-9][0-9]'"
      },
      "correct_answer": "B"
    },
    {
      "id": 33,
      "difficulty": "hard",
      "question": "Which AWS service would be most appropriate for implementing a serverless function that processes data from an S3 bucket?",
      "options": {
        "A": "AWS EC2",
        "B": "AWS Lambda",
        "C": "AWS RDS",
        "D": "AWS ECS"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What is the output of the following code that uses encryption?",
      "options": {
        "A": "Original message: Hello, World!",
        "B": "b'Hello, World!'",
        "C": "b'gAAAAAB...'",
        "D": "Encryption failed: No module named 'cryptography'"
      },
      "correct_answer": "C",
      "code_example": "from cryptography.fernet import Fernet\n\ndef encrypt_message(message):\n    key = Fernet.generate_key()\n    f = Fernet(key)\n    encrypted_message = f.encrypt(message.encode())\n    return encrypted_message\n\nmessage = \"Hello, World!\"\nencrypted = encrypt_message(message)\nprint(encrypted[:10])"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Which database sharding strategy distributes data based on a hash of the primary key?",
      "options": {
        "A": "Range-based sharding",
        "B": "Hash-based sharding",
        "C": "Directory-based sharding",
        "D": "Geography-based sharding"
      },
      "correct_answer": "B"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following test-driven development example?",
      "options": {
        "A": "All tests passed!",
        "B": "AssertionError: FAILED: test_multiply",
        "C": "AssertionError: FAILED: test_add",
        "D": "FAILED: test_add, test_multiply"
      },
      "correct_answer": "C",
      "code_example": "class Calculator:\n    def add(self, a, b):\n        return a - b  # Bug: subtraction instead of addition\n    \n    def multiply(self, a, b):\n        return a * b\n\ndef test_calculator():\n    calc = Calculator()\n    \n    # Test addition\n    assert calc.add(2, 3) == 5, \"FAILED: test_add\"\n    \n    # Test multiplication\n    assert calc.multiply(2, 3) == 6, \"FAILED: test_multiply\"\n    \n    return \"All tests passed!\"\n\ntry:\n    result = test_calculator()\n    print(result)\nexcept AssertionError as e:\n    print(e)"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following threaded code?",
      "options": {
        "A": "Counter value: 100000",
        "B": "Counter value: 200000",
        "C": "Counter value: a number less than 200000",
        "D": "Error: threading.Lock object has no attribute 'acquire'"
      },
      "correct_answer": "C",
      "code_example": "import threading\nimport time\n\ndef increment_without_lock():\n    global counter\n    for _ in range(100000):\n        counter += 1\n\ncounter = 0\n\n# Create two threads\nt1 = threading.Thread(target=increment_without_lock)\nt2 = threading.Thread(target=increment_without_lock)\n\n# Start both threads\nt1.start()\nt2.start()\n\n# Wait for both threads to complete\nt1.join()\nt2.join()\n\nprint(f\"Counter value: {counter}\")"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "Which of the following is NOT one of the OWASP Top 10 vulnerabilities as of 2021?",
      "options": {
        "A": "Injection",
        "B": "Broken Authentication",
        "C": "Cross-Site Scripting (XSS)",
        "D": "SSL Stripping"
      },
      "correct_answer": "D"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "In Kubernetes, which component is responsible for scheduling pods on nodes?",
      "options": {
        "A": "kubelet",
        "B": "kube-proxy",
        "C": "kube-scheduler",
        "D": "etcd"
      },
      "correct_answer": "C"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the time complexity of the following space-optimized algorithm?",
      "options": {
        "A": "O(n)",
        "B": "O(n log n)",
        "C": "O(n²)",
        "D": "O(1)"
      },
      "correct_answer": "A",
      "code_example": "def find_duplicate(nums):\n    # Floyd's Tortoise and Hare (Cycle Detection)\n    # Space complexity: O(1)\n    tortoise = nums[0]\n    hare = nums[0]\n    \n    # Find meeting point inside the cycle\n    while True:\n        tortoise = nums[tortoise]\n        hare = nums[nums[hare]]\n        if tortoise == hare:\n            break\n    \n    # Find cycle entrance\n    tortoise = nums[0]\n    while tortoise != hare:\n        tortoise = nums[tortoise]\n        hare = nums[hare]\n    \n    return hare"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What is the primary difference between threading and multiprocessing in Python?",
      "options": {
        "A": "Threading uses multiple CPU cores, while multiprocessing doesn't",
        "B": "Threading has shared memory by default, while multiprocessing has separate memory spaces",
        "C": "Threading is only suitable for I/O-bound tasks, while multiprocessing is only for CPU-bound tasks",
        "D": "Threading can only run one thread at a time due to the GIL, while multiprocessing has no such limitation"
      },
      "correct_answer": "B"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of this basic machine learning pipeline?",
      "options": {
        "A": "Accuracy: a value between 0 and 0.5",
        "B": "Accuracy: a value between 0.5 and 0.7",
        "C": "Accuracy: a value between 0.7 and 1.0",
        "D": "Error: missing required dependency"
      },
      "correct_answer": "C",
      "code_example": "from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Split dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Create and train model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate model\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.2f}\")"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code using pandas?",
      "options": {
        "A": "   A  B\\n0  1  4\\n1  2  5\\n2  3  6",
        "B": "   A  B  C\\n0  1  4  7\\n1  2  5  8\\n2  3  6  9",
        "C": "   A  B  C  D\\n0  1  4  7  10\\n1  2  5  8  11\\n2  3  6  9  12",
        "D": "   A   B   C\\n0  1   4   7\\n1  2   5   8\\n2  3   6   9"
      },
      "correct_answer": "D",
      "code_example": "import pandas as pd\nimport numpy as np\n\n# Create a simple DataFrame\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6]\n})\n\n# Add a new column with a calculation\ndf['C'] = df['A'] + df['B']\n\n# Print the DataFrame with properly aligned columns\nprint(df)"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "Which principle in SOLID is violated by the following code?",
      "options": {
        "A": "Single Responsibility Principle",
        "B": "Open/Closed Principle",
        "C": "Liskov Substitution Principle",
        "D": "Interface Segregation Principle"
      },
      "correct_answer": "A",
      "code_example": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    \n    def save(self):\n        # Save user to database\n        print(f\"Saving user {self.name} to database\")\n    \n    def send_email(self, subject, message):\n        # Send email to user\n        print(f\"Sending email to {self.email} with subject: {subject}\")\n    \n    def generate_report(self):\n        # Generate user activity report\n        print(f\"Generating activity report for {self.name}\")"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which database index type would be most appropriate for a text search feature?",
      "options": {
        "A": "B-tree index",
        "B": "Hash index",
        "C": "Full-text index",
        "D": "Spatial index"
      },
      "correct_answer": "C"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the result of the following topological sort implementation?",
      "options": {
        "A": "[0, 1, 2, 3, 4]",
        "B": "[0, 1, 2, 4, 3]",
        "C": "[4, 3, 2, 1, 0]",
        "D": "Error: graph contains a cycle"
      },
      "correct_answer": "B",
      "code_example": "from collections import defaultdict, deque\n\ndef topological_sort(graph, num_vertices):\n    # Create in-degree array for all vertices\n    in_degree = [0] * num_vertices\n    \n    # Calculate in-degree for each vertex\n    for u in range(num_vertices):\n        for v in graph[u]:\n            in_degree[v] += 1\n    \n    # Create a queue for vertices with in-degree 0\n    queue = deque()\n    for i in range(num_vertices):\n        if in_degree[i] == 0:\n            queue.append(i)\n    \n    # Initialize result array\n    result = []\n    \n    # Process all vertices\n    while queue:\n        u = queue.popleft()\n        result.append(u)\n        \n        # Reduce in-degree of adjacent vertices\n        for v in graph[u]:\n            in_degree[v] -= 1\n            if in_degree[v] == 0:\n                queue.append(v)\n    \n    return result\n\n# Example graph where vertex 0 has edges to 1 and 2,\n# vertex 1 has edge to 3, vertex 2 has edge to 4,\n# and vertex 4 has edge to 3\ngraph = defaultdict(list)\ngraph[0] = [1, 2]\ngraph[1] = [3]\ngraph[2] = [4]\ngraph[4] = [3]\n\nresult = topological_sort(graph, 5)\nprint(result)"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "Which infrastructure as code tool is specifically designed for provisioning and managing AWS resources?",
      "options": {
        "A": "Terraform",
        "B": "CloudFormation",
        "C": "Ansible",
        "D": "Puppet"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the time complexity of querying a range sum from the following segment tree implementation?",
      "options": {
        "A": "O(n)",
        "B": "O(log n)",
        "C": "O(n log n)",
        "D": "O(1)"
      },
      "correct_answer": "B",
      "code_example": "class SegmentTree:\n    def __init__(self, array):\n        self.n = len(array)\n        # Size of segment tree will be 2*n - 1\n        self.tree = [0] * (2 * self.n)\n        \n        # Build the segment tree\n        # Insert leaf nodes in tree\n        for i in range(self.n):\n            self.tree[self.n + i] = array[i]\n        \n        # Build the parent nodes\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1]\n    \n    def query(self, start, end):\n        # Get sum from index start to end\n        # Adjust indices for segment tree representation\n        start += self.n\n        end += self.n\n        \n        sum_result = 0\n        \n        # Traverse nodes in range\n        while start <= end:\n            # If start is odd, it's right child of its parent\n            if start % 2 == 1:\n                sum_result += self.tree[start]\n                start += 1\n            \n            # If end is even, it's left child of its parent\n            if end % 2 == 0:\n                sum_result += self.tree[end]\n                end -= 1\n            \n            # Move to parent level\n            start //= 2\n            end //= 2\n        \n        return sum_result"
    }
]
}
