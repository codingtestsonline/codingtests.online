{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Hello",
        "B": "olleH",
        "C": "HEL",
        "D": "Error"
      },
      "correct_answer": "B",
      "code_example": "text = \"Hello\"\nreversed_text = text[::-1]\nprint(reversed_text)"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which of the following is the correct way to create a list containing the first five even numbers?",
      "options": {
        "A": "[2, 4, 6, 8, 10]",
        "B": "[0, 2, 4, 6, 8]",
        "C": "[0, 1, 2, 3, 4]",
        "D": "[1, 3, 5, 7, 9]"
      },
      "correct_answer": "A",
      "code_example": "# Option A\n[2, 4, 6, 8, 10]\n\n# Option B\n[0, 2, 4, 6, 8]\n\n# Option C\n[0, 1, 2, 3, 4]\n\n# Option D\n[1, 3, 5, 7, 9]"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What is the output of the following code?",
      "options": {
        "A": "[1, 2, 3, 4]",
        "B": "[1, 2, 3, 4, 5]",
        "C": "[1, 2, 3, 5]",
        "D": "[5, 1, 2, 3]"
      },
      "correct_answer": "C",
      "code_example": "my_list = [1, 2, 3, 4]\nmy_list.pop()\nmy_list.append(5)\nprint(my_list)"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "Which file mode allows you to add content to the end of an existing file without overwriting its current content?",
      "options": {
        "A": "'r'",
        "B": "'w'",
        "C": "'a'",
        "D": "'x'"
      },
      "correct_answer": "C"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will the following code print?",
      "options": {
        "A": "{'apple': 1, 'banana': 2, 'cherry': 3}",
        "B": "['apple', 'banana', 'cherry']",
        "C": "[1, 2, 3]",
        "D": "dict_keys(['apple', 'banana', 'cherry'])"
      },
      "correct_answer": "D",
      "code_example": "fruits = {'apple': 1, 'banana': 2, 'cherry': 3}\nprint(fruits.keys())"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What is the time complexity of binary search on a sorted array?",
      "options": {
        "A": "O(n)",
        "B": "O(nÂ²)",
        "C": "O(log n)",
        "D": "O(1)"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "9",
        "B": "27",
        "C": "3",
        "D": "Error"
      },
      "correct_answer": "B",
      "code_example": "def multiply(a, b, c=3):\n    return a * b * c\n\nresult = multiply(3, 3)\nprint(result)"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What is the greatest common divisor (GCD) of 48 and 18?",
      "options": {
        "A": "6",
        "B": "9",
        "C": "3",
        "D": "2"
      },
      "correct_answer": "A",
      "code_example": "import math\nprint(math.gcd(48, 18))"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What is the decimal value of the binary number 1101?",
      "options": {
        "A": "13",
        "B": "15",
        "C": "11",
        "D": "9"
      },
      "correct_answer": "A",
      "code_example": "binary = '1101'\ndecimal = int(binary, 2)\nprint(decimal)"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Python",
        "B": "Py",
        "C": "thon",
        "D": "hon"
      },
      "correct_answer": "D",
      "code_example": "text = \"Python\"\nprint(text[3:])"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "Which exception would be raised by the following code?",
      "options": {
        "A": "ValueError",
        "B": "TypeError",
        "C": "IndexError",
        "D": "KeyError"
      },
      "correct_answer": "C",
      "code_example": "my_list = [1, 2, 3]\nprint(my_list[5])"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "Which of the following functions correctly identifies if a number is prime?",
      "options": {
        "A": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
        "B": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "C": "def is_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
        "D": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What is the correct way to write the contents of a list to a text file, one item per line?",
      "options": {
        "A": "with open('file.txt', 'w') as f:\n    f.writelines(my_list)",
        "B": "with open('file.txt', 'w') as f:\n    for item in my_list:\n        f.write(item)",
        "C": "with open('file.txt', 'w') as f:\n    for item in my_list:\n        f.write(str(item) + '\\n')",
        "D": "with open('file.txt', 'w') as f:\n    f.write(str(my_list))"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following linear search implementation?",
      "options": {
        "A": "2",
        "B": "3",
        "C": "-1",
        "D": "None"
      },
      "correct_answer": "C",
      "code_example": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\nresult = linear_search([1, 3, 5, 7], 4)\nprint(result)"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What is the factorial of 5?",
      "options": {
        "A": "120",
        "B": "60",
        "C": "24",
        "D": "720"
      },
      "correct_answer": "A",
      "code_example": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5))"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following try/except/else/finally block?",
      "options": {
        "A": "Try block executed\nFinally block executed",
        "B": "Try block executed\nElse block executed\nFinally block executed",
        "C": "Try block executed\nException occurred\nFinally block executed",
        "D": "Exception occurred\nFinally block executed"
      },
      "correct_answer": "B",
      "code_example": "try:\n    print(\"Try block executed\")\n    x = 10\nexcept ZeroDivisionError:\n    print(\"Exception occurred\")\nelse:\n    print(\"Else block executed\")\nfinally:\n    print(\"Finally block executed\")"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will the following code output?",
      "options": {
        "A": "[2, 4, 6, 8, 10]",
        "B": "[1, 4, 9, 16, 25]",
        "C": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
        "D": "[4, 16, 36, 64, 100]"
      },
      "correct_answer": "A",
      "code_example": "numbers = [1, 2, 3, 4, 5]\ndoubled = list(map(lambda x: x * 2, numbers))\nprint(doubled)"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following closure example?",
      "options": {
        "A": "15",
        "B": "10",
        "C": "5",
        "D": "Error"
      },
      "correct_answer": "B",
      "code_example": "def outer_function(x):\n    def inner_function(y):\n        return x + y\n    return inner_function\n\nadd_five = outer_function(5)\nresult = add_five(5)\nprint(result)"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following dictionary comprehension?",
      "options": {
        "A": "{1: 1, 2: 8, 3: 27, 4: 64, 5: 125}",
        "B": "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}",
        "C": "{1: 2, 2: 4, 3: 6, 4: 8, 5: 10}",
        "D": "{0: 0, 1: 1, 2: 8, 3: 27, 4: 64}"
      },
      "correct_answer": "A",
      "code_example": "cubes = {x: x**3 for x in range(1, 6)}\nprint(cubes)"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "Which statement about first-class functions in Python is correct?",
      "options": {
        "A": "First-class functions cannot take other functions as arguments",
        "B": "First-class functions can be assigned to variables and passed as arguments",
        "C": "First-class functions are limited to built-in Python functions",
        "D": "First-class functions cannot return other functions"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What is the difference between greedy and non-greedy matching in regular expressions?",
      "options": {
        "A": "Greedy matching tries to match as little as possible, while non-greedy tries to match as much as possible",
        "B": "Greedy matching tries to match as much as possible, while non-greedy tries to match as little as possible",
        "C": "Greedy matching only works with alphanumeric characters, while non-greedy works with all characters",
        "D": "There is no difference; they are synonyms"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following breadth-first search implementation when finding the path from node 'A' to node 'E'?",
      "options": {
        "A": "['A', 'B', 'E']",
        "B": "['A', 'C', 'E']",
        "C": "['A', 'D', 'E']",
        "D": "No path found"
      },
      "correct_answer": "A",
      "code_example": "from collections import deque\n\ndef bfs_shortest_path(graph, start, goal):\n    visited = set()\n    queue = deque([[start]])\n    \n    if start == goal:\n        return [start]\n    \n    while queue:\n        path = queue.popleft()\n        node = path[-1]\n        \n        if node not in visited:\n            neighbors = graph[node]\n            for neighbor in neighbors:\n                new_path = list(path)\n                new_path.append(neighbor)\n                queue.append(new_path)\n                \n                if neighbor == goal:\n                    return new_path\n            \n            visited.add(node)\n    \n    return None\n\ngraph = {\n    'A': ['B', 'C', 'D'],\n    'B': ['E'],\n    'C': ['F'],\n    'D': ['G'],\n    'E': [],\n    'F': [],\n    'G': []\n}\n\nprint(bfs_shortest_path(graph, 'A', 'E'))"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code generating an infinite sequence?",
      "options": {
        "A": "[0, 1, 2, 3, 4]",
        "B": "[0, 1, 1, 2, 3]",
        "C": "[1, 1, 2, 3, 5]",
        "D": "An infinite loop"
      },
      "correct_answer": "B",
      "code_example": "def fibonacci_generator():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nfib = fibonacci_generator()\nresult = [next(fib) for _ in range(5)]\nprint(result)"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "In Django, which directory is used to store static files like CSS, JavaScript, and images?",
      "options": {
        "A": "templates/",
        "B": "static/",
        "C": "media/",
        "D": "assets/"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What is the difference between absolute and relative imports in Python?",
      "options": {
        "A": "Absolute imports use the full path from the project's root directory, while relative imports use paths relative to the current module",
        "B": "Absolute imports work only in Python 3, while relative imports work in both Python 2 and 3",
        "C": "Absolute imports are faster than relative imports",
        "D": "Absolute imports can only import packages, while relative imports can import both packages and modules"
      },
      "correct_answer": "A"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following code involving a constructor and instance methods?",
      "options": {
        "A": "Rectangle with width=5 and height=10\nArea: 50",
        "B": "Rectangle with width=5 and height=10\nArea: 15",
        "C": "Rectangle created\nArea: 50",
        "D": "Error"
      },
      "correct_answer": "A",
      "code_example": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        print(f\"Rectangle with width={width} and height={height}\")\n    \n    def calculate_area(self):\n        return self.width * self.height\n\nrect = Rectangle(5, 10)\nprint(f\"Area: {rect.calculate_area()}\")"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of this quicksort implementation for the given input?",
      "options": {
        "A": "[1, 3, 4, 7, 9]",
        "B": "[9, 7, 4, 3, 1]",
        "C": "[1, 3, 4, 7, 9, 10]",
        "D": "[7, 1, 9, 3, 4]"
      },
      "correct_answer": "A",
      "code_example": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\nresult = quicksort([7, 1, 9, 3, 4])\nprint(result)"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following memoized recursive function?",
      "options": {
        "A": "55",
        "B": "89",
        "C": "144",
        "D": "233"
      },
      "correct_answer": "B",
      "code_example": "def fibonacci(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)\n    return memo[n]\n\nprint(fibonacci(11))"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the maximum sum of the sliding window of size 3 in the given array?",
      "options": {
        "A": "15",
        "B": "16",
        "C": "18",
        "D": "21"
      },
      "correct_answer": "D",
      "code_example": "def max_sliding_window_sum(arr, k):\n    if not arr or k <= 0:\n        return 0\n    \n    max_sum = float('-inf')\n    current_sum = sum(arr[:k])\n    max_sum = current_sum\n    \n    for i in range(k, len(arr)):\n        current_sum = current_sum - arr[i-k] + arr[i]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\narr = [1, 3, 5, 7, 9, 2, 4, 6, 8]\nk = 3\nprint(max_sliding_window_sum(arr, k))"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What is the correct implementation of a node for a doubly linked list?",
      "options": {
        "A": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None",
        "B": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None",
        "C": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None",
        "D": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.child = []\n        self.parent = None"
      },
      "correct_answer": "C"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code using lambda functions?",
      "options": {
        "A": "[2, 4, 6, 8, 10]",
        "B": "[1, 2, 3, 4, 5]",
        "C": "[True, False, True, False, True]",
        "D": "[False, True, False, True, False]"
      },
      "correct_answer": "C",
      "code_example": "numbers = [1, 2, 3, 4, 5]\nis_odd = list(map(lambda x: x % 2 == 1, numbers))\nprint(is_odd)"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following function using *args and **kwargs?",
      "options": {
        "A": "1 2 3 {'a': 4, 'b': 5}",
        "B": "1 2 3 a=4 b=5",
        "C": "(1, 2, 3) {'a': 4, 'b': 5}",
        "D": "Error"
      },
      "correct_answer": "B",
      "code_example": "def example_function(*args, **kwargs):\n    args_str = ' '.join(str(arg) for arg in args)\n    kwargs_str = ' '.join(f\"{k}={v}\" for k, v in kwargs.items())\n    return f\"{args_str} {kwargs_str}\"\n\nresult = example_function(1, 2, 3, a=4, b=5)\nprint(result)"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which of the following correctly describes the difference between a cryptographic hash function and symmetric encryption?",
      "options": {
        "A": "Hash functions are reversible while symmetric encryption is not",
        "B": "Hash functions produce fixed-length output regardless of input size, while symmetric encryption outputs match the input size",
        "C": "Hash functions require two different keys while symmetric encryption requires only one",
        "D": "Hash functions are one-way functions while symmetric encryption is reversible with the proper key"
      },
      "correct_answer": "D"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code which demonstrates a class decorator?",
      "options": {
        "A": "{'name': 'User', 'methods': ['__init__', 'greet']}",
        "B": "{'name': 'User', 'methods': ['__init__', 'greet', '__str__']}",
        "C": "{'name': 'User', 'methods': ['greet']}",
        "D": "TypeError: 'NoneType' object is not subscriptable"
      },
      "correct_answer": "B",
      "code_example": "def track_methods(cls):\n    original_init = cls.__init__\n    method_list = [method for method in dir(cls) if callable(getattr(cls, method)) and not method.startswith('__') or method in ['__init__', '__str__']]\n    \n    def __init__(self, *args, **kwargs):\n        original_init(self, *args, **kwargs)\n        self.class_info = {\n            'name': cls.__name__,\n            'methods': method_list\n        }\n    \n    cls.__init__ = __init__\n    return cls\n\n@track_methods\nclass User:\n    def __init__(self, name):\n        self.name = name\n    \n    def greet(self):\n        return f\"Hello, {self.name}!\"\n    \n    def __str__(self):\n        return self.name\n\nuser = User(\"Alice\")\nprint(user.class_info)"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Consider the following scikit-learn code. What is the most likely purpose of this pipeline?",
      "options": {
        "A": "Dimensionality reduction followed by classification",
        "B": "Data cleaning followed by regression",
        "C": "Text vectorization followed by classification",
        "D": "Feature extraction followed by clustering"
      },
      "correct_answer": "C",
      "code_example": "from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\n\npipeline = Pipeline([\n    ('tfidf', TfidfVectorizer(stop_words='english', max_features=10000)),\n    ('classifier', MultinomialNB())\n])\n\n# Usage example:\n# pipeline.fit(X_train, y_train)\n# predictions = pipeline.predict(X_test)"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which of the following techniques would NOT typically help reduce space complexity in a Python application?",
      "options": {
        "A": "Using generators instead of lists for large sequences",
        "B": "Implementing __slots__ in classes with many instances",
        "C": "Utilizing NumPy arrays instead of lists for numerical operations",
        "D": "Adding more recursive function calls to process data"
      },
      "correct_answer": "D"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "When scraping a JavaScript-heavy website with Python, what will be the output of the following code?",
      "options": {
        "A": "The fully rendered HTML after JavaScript execution",
        "B": "The initial HTML before any JavaScript runs",
        "C": "A JavaScript error message",
        "D": "An empty string"
      },
      "correct_answer": "B",
      "code_example": "import requests\n\nurl = 'https://example.com/spa'\nresponse = requests.get(url)\nprint(\"Content type:\", type(response.text))\nprint(\"Contains 'Loading....':\", 'Loading....' in response.text)"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code using abstract base classes?",
      "options": {
        "A": "TypeError: Can't instantiate abstract class Shape with abstract method area",
        "B": "Area: 50",
        "C": "Area: 50, Perimeter: 30",
        "D": "TypeError: Can't instantiate abstract class Shape with abstract methods area, perimeter"
      },
      "correct_answer": "D",
      "code_example": "from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n    \n    @abstractmethod\n    def perimeter(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height\n\n# Try to create instances\ntry:\n    shape = Shape()\n    print(\"Shape created successfully\")\nexcept TypeError as e:\n    print(e)\n\ntry:\n    rect = Rectangle(10, 5)\n    print(f\"Area: {rect.area()}\")\nexcept TypeError as e:\n    print(e)"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which statement about PyPy's Just-in-Time compilation is FALSE?",
      "options": {
        "A": "PyPy can sometimes be slower than CPython for short-running programs due to JIT warm-up time",
        "B": "PyPy's JIT compiler completely eliminates the Global Interpreter Lock (GIL)",
        "C": "PyPy converts frequently executed code paths into machine code for faster execution",
        "D": "PyPy uses tracing JIT compilation that identifies and optimizes hot loops"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "In CPython implementation, what will be the output of the following code?",
      "options": {
        "A": "Different ID for both variables",
        "B": "Same ID for both variables",
        "C": "Same ID for a and b, different ID for c",
        "D": "TypeError: 'int' object is not mutable"
      },
      "correct_answer": "C",
      "code_example": "a = 256\nb = 256\nc = 1000\nd = 1000\n\nprint(f\"a and b have same id: {id(a) == id(b)}\")\nprint(f\"c and d have same id: {id(c) == id(d)}\")"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following backtracking algorithm implementation?",
      "options": {
        "A": "[[1, 3, 0, 0], [0, 0, 1, 3], [3, 0, 0, 1], [0, 1, 3, 0]]",
        "B": "No solution exists",
        "C": "[[0, 1, 3, 0], [3, 0, 0, 1], [1, 3, 0, 0], [0, 0, 1, 3]]",
        "D": "RecursionError: maximum recursion depth exceeded"
      },
      "correct_answer": "A",
      "code_example": "def is_safe(board, row, col, num, size):\n    # Check if 'num' is not in the same row\n    for x in range(size):\n        if board[row][x] == num:\n            return False\n    \n    # Check if 'num' is not in the same column\n    for x in range(size):\n        if board[x][col] == num:\n            return False\n    \n    return True\n\ndef solve_puzzle(board, row, col, size):\n    # If we've filled all cells, the puzzle is solved\n    if row == size - 1 and col == size:\n        return True\n    \n    # Move to the next row if we've completed the current row\n    if col == size:\n        row += 1\n        col = 0\n    \n    # Skip if cell already has a value\n    if board[row][col] > 0:\n        return solve_puzzle(board, row, col + 1, size)\n    \n    # Try placing values 1 to 3 in the current cell\n    for num in range(1, 4):\n        if is_safe(board, row, col, num, size):\n            board[row][col] = num\n            \n            if solve_puzzle(board, row, col + 1, size):\n                return True\n            \n            # If placing num doesn't lead to a solution, backtrack\n            board[row][col] = 0\n    \n    return False\n\n# 4x4 board with some pre-filled values\nboard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n]\n\nsize = 4\nif solve_puzzle(board, 0, 0, size):\n    print(board)\nelse:\n    print(\"No solution exists\")"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following tools is NOT primarily used for code coverage or quality assessment in Python?",
      "options": {
        "A": "Pylint",
        "B": "Flake8",
        "C": "Coverage.py",
        "D": "Pipenv"
      },
      "correct_answer": "D"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following metaclass implementation?",
      "options": {
        "A": "Creating instance of MyClass\nInstance created: <__main__.MyClass object at 0x...>",
        "B": "Creating class MyClass\nCreating instance of MyClass\nInstance created: <__main__.MyClass object at 0x...>",
        "C": "Creating class MyClass\nCreating instance of MyClass\nInstance created: <instance of MyClass>",
        "D": "TypeError: metaclass conflict"
      },
      "correct_answer": "B",
      "code_example": "class TraceMeta(type):\n    def __new__(mcs, name, bases, attrs):\n        print(f\"Creating class {name}\")\n        return super().__new__(mcs, name, bases, attrs)\n    \n    def __call__(cls, *args, **kwargs):\n        print(f\"Creating instance of {cls.__name__}\")\n        instance = super().__call__(*args, **kwargs)\n        print(f\"Instance created: {instance}\")\n        return instance\n\nclass MyClass(metaclass=TraceMeta):\n    def __init__(self):\n        pass\n\n# Create an instance\nobj = MyClass()"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "In Test-Driven Development, which of the following would be the correct sequence of steps?",
      "options": {
        "A": "Write implementation code, create tests that pass, refactor code",
        "B": "Write tests that fail, write implementation code, refactor code",
        "C": "Design architecture, write implementation code, write tests to validate",
        "D": "Create a prototype, test with users, rewrite with tests"
      },
      "correct_answer": "B"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code comparing memoization and tabulation approaches?",
      "options": {
        "A": "Memoization: 55, Tabulation: 55, Same result: True",
        "B": "Memoization: 55, Tabulation: 55, Same result: True\nMemoization is faster",
        "C": "Memoization: 55, Tabulation: 55, Same result: True\nTabulation is faster",
        "D": "RecursionError: maximum recursion depth exceeded in comparison"
      },
      "correct_answer": "A",
      "code_example": "import time\n\ndef fibonacci_memoization(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci_memoization(n-1, memo) + fibonacci_memoization(n-2, memo)\n    return memo[n]\n\ndef fibonacci_tabulation(n):\n    if n <= 1:\n        return n\n    \n    # Initialize table\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    \n    # Fill table in bottom-up manner\n    for i in range(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    \n    return dp[n]\n\n# Compare results\nn = 10\nmemo_result = fibonacci_memoization(n)\ntab_result = fibonacci_tabulation(n)\n\nprint(f\"Memoization: {memo_result}, Tabulation: {tab_result}, Same result: {memo_result == tab_result}\")"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which of the following statements about database indexing is FALSE?",
      "options": {
        "A": "Indexing improves query performance but can slow down data insertion",
        "B": "Composite indexes are useful for queries with multiple WHERE conditions",
        "C": "Indexing a column with high cardinality (many unique values) is generally more effective",
        "D": "Creating indexes on all columns will always maximize database performance"
      },
      "correct_answer": "D"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of this FastAPI authentication middleware example?",
      "options": {
        "A": "{'message': 'Secret data', 'user': 'john'}",
        "B": "HTTP 401 Unauthorized",
        "C": "{'detail': 'Invalid authentication credentials'}",
        "D": "{'detail': 'Not authenticated'}"
      },
      "correct_answer": "D",
      "code_example": "from fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\n\napp = FastAPI()\nsecurity = HTTPBearer()\n\ndef verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    token = credentials.credentials\n    if token != \"valid_token\":\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\"\n        )\n    return {\"user\": \"john\"}\n\n@app.get(\"/secret\")\nasync def get_secret_data(user_info: dict = Depends(verify_token)):\n    return {\"message\": \"Secret data\", \"user\": user_info[\"user\"]}\n\n# Simulate a request without authorization header\nfrom fastapi.testclient import TestClient\n\nclient = TestClient(app)\nresponse = client.get(\"/secret\")\nprint(response.json())"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses bcrypt for password hashing?",
      "options": {
        "A": "Password verification: True",
        "B": "Password verification: False",
        "C": "ValueError: Invalid salt",
        "D": "ImportError: No module named 'bcrypt'"
      },
      "correct_answer": "A",
      "code_example": "import bcrypt\n\ndef hash_password(password):\n    # Generate a salt and hash the password\n    salt = bcrypt.gensalt()\n    hashed = bcrypt.hashpw(password.encode('utf-8'), salt)\n    return hashed\n\ndef verify_password(stored_password, provided_password):\n    # Check if the provided password matches the stored hash\n    return bcrypt.checkpw(provided_password.encode('utf-8'), stored_password)\n\n# Example usage\noriginal_password = \"secure_password123\"\nhashed_password = hash_password(original_password)\n\n# Try to verify\ntest_password = \"secure_password123\"\nresult = verify_password(hashed_password, test_password)\n\nprint(f\"Password verification: {result}\")"
    }
  ]
}
