{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What is the output of the following code?",
      "code_example": "x = 5\ny = '10'\nprint(str(x) + y)",
      "options": {
        "A": "510",
        "B": "15",
        "C": "Error: cannot concatenate 'int' and 'str'",
        "D": "5 + 10"
      },
      "correct_answer": "A"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which of the following correctly checks if variable x is an integer?",
      "options": {
        "A": "x.is_integer()",
        "B": "type(x) == 'int'",
        "C": "isinstance(x, int)",
        "D": "x.type() == int"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "def greet(name, greeting='Hello'):\n    return f'{greeting}, {name}!'\n\nprint(greet('Alice'))",
      "options": {
        "A": "Hello!",
        "B": "Hello, Alice",
        "C": "Hello, Alice!",
        "D": "Alice, Hello!"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What is the purpose of the 'a' mode when opening a file?",
      "options": {
        "A": "Open for reading (default)",
        "B": "Open for writing, creating the file if it doesn't exist",
        "C": "Open for exclusive creation, failing if the file already exists",
        "D": "Open for appending, creating the file if it doesn't exist"
      },
      "correct_answer": "D"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "numbers = [1, 2, 3, 4, 5]\nsquares = [n**2 for n in numbers if n % 2 == 0]\nprint(squares)",
      "options": {
        "A": "[1, 4, 9, 16, 25]",
        "B": "[4, 16]",
        "C": "[2, 4]",
        "D": "[1, 9, 25]"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What is the median value in the following list?",
      "code_example": "import statistics\nnumbers = [7, 2, 5, 1, 9, 3]\nprint(statistics.median(numbers))",
      "options": {
        "A": "3",
        "B": "4",
        "C": "4.5",
        "D": "5"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "Which of the following is the correct way to catch multiple specific exceptions in Python?",
      "code_example": "try:\n    value = int(input('Enter a number: '))\n    result = 10 / value\nexcept (ValueError, ZeroDivisionError) as e:\n    print(f'Error: {e}')",
      "options": {
        "A": "except ValueError, ZeroDivisionError as e:",
        "B": "except [ValueError, ZeroDivisionError] as e:",
        "C": "except (ValueError, ZeroDivisionError) as e:",
        "D": "except ValueError and ZeroDivisionError as e:"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What does the following code calculate?",
      "code_example": "def calculate_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nprint(calculate_gcd(48, 18))",
      "options": {
        "A": "Least Common Multiple",
        "B": "Greatest Common Divisor",
        "C": "Factorial",
        "D": "Prime Factorization"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "class CustomError(Exception):\n    pass\n\ntry:\n    raise CustomError('This is a custom error')\nexcept CustomError as e:\n    print('Caught:', str(e))",
      "options": {
        "A": "Caught: Exception: This is a custom error",
        "B": "Caught: This is a custom error",
        "C": "Caught: CustomError: This is a custom error",
        "D": "Error: CustomError is not defined"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which exception will the following code raise?",
      "code_example": "numbers = [1, 2, 3]\nprint(numbers[3])",
      "options": {
        "A": "ValueError",
        "B": "KeyError",
        "C": "IndexError",
        "D": "TypeError"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following selection sort implementation?",
      "code_example": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nprint(selection_sort([64, 25, 12, 22, 11]))",
      "options": {
        "A": "[11, 12, 22, 25, 64]",
        "B": "[64, 25, 22, 12, 11]",
        "C": "[11, 22, 12, 25, 64]",
        "D": "[11, 12, 64, 25, 22]"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What does the following code do?",
      "code_example": "i = 0\nwhile i < 10:\n    i += 1\n    if i == 5:\n        continue\n    if i == 8:\n        break\n    print(i, end=' ')",
      "options": {
        "A": "1 2 3 4 6 7",
        "B": "1 2 3 4 5 6 7",
        "C": "1 2 3 4 6 7 8",
        "D": "1 2 3 4 5 6 7 8"
      },
      "correct_answer": "A"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "def is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]\n\nprint(is_palindrome('Madam Im Adam'))",
      "options": {
        "A": "True",
        "B": "False",
        "C": "Error: string indices must be integers",
        "D": "None"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "Which of the following is the correct way to write data to a text file in Python?",
      "code_example": "data = 'Hello, World!'\n\nwith open('output.txt', 'w') as file:\n    file.write(data)",
      "options": {
        "A": "with open('output.txt', 'r') as file:\n    file.write(data)",
        "B": "with open('output.txt', 'w') as file:\n    file.write(data)",
        "C": "with open('output.txt', 'a+') as file:\n    file.read(data)",
        "D": "with write_file('output.txt') as file:\n    file.open(data)"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What is the most efficient way to format this string in modern Python?",
      "code_example": "name = 'Alice'\nage = 30\nprint(f'{name} is {age} years old')",
      "options": {
        "A": "print('%s is %d years old' % (name, age))",
        "B": "print('{} is {} years old'.format(name, age))",
        "C": "print(f'{name} is {age} years old')",
        "D": "print(name + ' is ' + str(age) + ' years old')"
      },
      "correct_answer": "C"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code that calculates the Least Common Multiple (LCM)?",
      "code_example": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nprint(lcm(12, 18))",
      "options": {
        "A": "6",
        "B": "36",
        "C": "216",
        "D": "2"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "Which HTTP method is idempotent but not safe?",
      "options": {
        "A": "GET",
        "B": "POST",
        "C": "PUT",
        "D": "OPTIONS"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code using the requests library?",
      "code_example": "import requests\n\nresponse = requests.get('https://httpbin.org/status/404')\nprint(response.status_code)",
      "options": {
        "A": "200",
        "B": "404",
        "C": "'404'",
        "D": "Error: Connection refused"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What is the purpose of a virtual environment in Python?",
      "options": {
        "A": "To create isolated Python environments with their own packages",
        "B": "To virtualize hardware resources for Python applications",
        "C": "To simulate different operating systems for testing",
        "D": "To run Python code in a sandboxed security environment"
      },
      "correct_answer": "A"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "words = ['apple', 'banana', 'cherry', 'date']\nword_lengths = {word: len(word) for word in words}\nprint(word_lengths)",
      "options": {
        "A": "{'apple': 5, 'banana': 6, 'cherry': 6, 'date': 4}",
        "B": "[5, 6, 6, 4]",
        "C": "{5, 6, 4}",
        "D": "['apple': 5, 'banana': 6, 'cherry': 6, 'date': 4]"
      },
      "correct_answer": "A"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What magic method is used to implement custom string representation for debugging?",
      "code_example": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        \n    def __repr__(self):\n        return f\"Person(name='{self.name}', age={self.age})\"\n\np = Person('Alice', 30)\nprint(repr(p))",
      "options": {
        "A": "__str__",
        "B": "__format__",
        "C": "__repr__",
        "D": "__print__"
      },
      "correct_answer": "C"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "Which SQL query would you use to retrieve all records from a 'users' table where the 'active' column is set to True?",
      "options": {
        "A": "SELECT * FROM users IF active = True;",
        "B": "SELECT * FROM users WHERE active = True;",
        "C": "GET * FROM users WHERE active = True;",
        "D": "SELECT ALL FROM users HAVING active = True;"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "from collections import Counter\n\ntext = 'mississippi'\ncounter = Counter(text)\nprint(counter.most_common(2))",
      "options": {
        "A": "{'i': 4, 's': 4}",
        "B": "[('i', 4), ('s', 4)]",
        "C": "[('m', 1), ('p', 2)]",
        "D": "['i', 's']"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following hash table implementation?",
      "code_example": "class SimpleHashTable:\n    def __init__(self, size=10):\n        self.size = size\n        self.table = [None] * size\n    \n    def hash_function(self, key):\n        return sum(ord(c) for c in str(key)) % self.size\n    \n    def insert(self, key, value):\n        index = self.hash_function(key)\n        self.table[index] = value\n    \n    def get(self, key):\n        index = self.hash_function(key)\n        return self.table[index]\n\nht = SimpleHashTable(5)\nht.insert('apple', 10)\nht.insert('orange', 20)\nprint(ht.get('apple'))",
      "options": {
        "A": "10",
        "B": "20",
        "C": "None",
        "D": "Error: key not found"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "In Django, which file would you modify to register URL patterns for your application?",
      "options": {
        "A": "models.py",
        "B": "views.py",
        "C": "urls.py",
        "D": "settings.py"
      },
      "correct_answer": "C"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following code using regular expressions?",
      "code_example": "import re\n\ntext = 'The quick brown fox jumps over the lazy dog.'\npattern = r'\\\\b\\\\w{4}\\\\b'\nmatches = re.findall(pattern, text)\nprint(matches)",
      "options": {
        "A": "['The', 'quick', 'brown', 'jumps', 'over', 'lazy']",
        "B": "['over', 'lazy']",
        "C": "['quick', 'brown', 'jumps']",
        "D": "['over']"
      },
      "correct_answer": "C"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "Which of the following Python data types is immutable?",
      "options": {
        "A": "list",
        "B": "dictionary",
        "C": "set",
        "D": "tuple"
      },
      "correct_answer": "D"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "numbers = [1, 2, 3, 4, 5]\nfiltered = list(filter(lambda x: x % 2 == 0, numbers))\nmapped = list(map(lambda x: x**2, filtered))\nprint(mapped)",
      "options": {
        "A": "[1, 4, 9, 16, 25]",
        "B": "[4, 16]",
        "C": "[2, 4]",
        "D": "[1, 9, 25]"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following JSON parsing code?",
      "code_example": "import json\n\njson_data = '{\"name\": \"Alice\", \"age\": 30, \"skills\": [\"Python\", \"SQL\"]}'\nparsed_data = json.loads(json_data)\nprint(type(parsed_data))",
      "options": {
        "A": "<class 'str'>",
        "B": "<class 'json'>",
        "C": "<class 'dict'>",
        "D": "<class 'object'>"
      },
      "correct_answer": "C"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code using the functools module?",
      "code_example": "import functools\n\n@functools.lru_cache(maxsize=None)\ndef fibonacci(n):\n    if n < 2:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))",
      "options": {
        "A": "10",
        "B": "55",
        "C": "89",
        "D": "34"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What is the time complexity of the divide and conquer algorithm for merging two sorted arrays?",
      "options": {
        "A": "O(1)",
        "B": "O(n)",
        "C": "O(n²)",
        "D": "O(log n)"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code implementing the iterator protocol?",
      "code_example": "class CountDown:\n    def __init__(self, start):\n        self.start = start\n        \n    def __iter__(self):\n        return self\n        \n    def __next__(self):\n        if self.start <= 0:\n            raise StopIteration\n        self.start -= 1\n        return self.start + 1\n\ncounter = CountDown(3)\nprint(list(counter))",
      "options": {
        "A": "[3, 2, 1]",
        "B": "[3, 2, 1, 0]",
        "C": "[2, 1, 0]",
        "D": "[2, 1]"
      },
      "correct_answer": "A"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which of the following code snippets correctly scrapes all paragraph texts from a webpage using BeautifulSoup and requests?",
      "options": {
        "A": "requests.get(url).find_all('p')",
        "B": "BeautifulSoup(requests.get(url)).find_all('p')",
        "C": "BeautifulSoup(requests.get(url).content, 'html.parser').find_all('p')",
        "D": "requests.get(url, parser='html.parser').find_all('p')"
      },
      "correct_answer": "C",
      "code_example": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\nparagraphs = soup.find_all('p')\nfor p in paragraphs:\n    print(p.text)"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What is the output of the following code that demonstrates abstract classes in Python?",
      "options": {
        "A": "TypeError: Can't instantiate abstract class AbstractExample with abstract methods abstract_method",
        "B": "Implementation of abstract_method",
        "C": "TypeError: Can't instantiate abstract class ConcreteExample with abstract methods abstract_method",
        "D": "ConcreteExample object created successfully"
      },
      "correct_answer": "B",
      "code_example": "from abc import ABC, abstractmethod\n\nclass AbstractExample(ABC):\n    @abstractmethod\n    def abstract_method(self):\n        pass\n        \nclass ConcreteExample(AbstractExample):\n    def abstract_method(self):\n        return \"Implementation of abstract_method\"\n        \n# Try to create and use the concrete implementation\ntry:\n    example = ConcreteExample()\n    print(example.abstract_method())\nexcept TypeError as e:\n    print(e)"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Which of the following statements about memoization versus tabulation is NOT true?",
      "options": {
        "A": "Memoization typically uses recursion, while tabulation uses iteration",
        "B": "Tabulation always guarantees better space complexity than memoization",
        "C": "Memoization is a top-down approach, while tabulation is bottom-up",
        "D": "Memoization can be easily implemented using a decorator in Python"
      },
      "correct_answer": "B",
      "code_example": "# Fibonacci using memoization (top-down)\ndef fib_memo(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        return 1\n    memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)\n    return memo[n]\n\n# Fibonacci using tabulation (bottom-up)\ndef fib_tab(n):\n    if n <= 2:\n        return 1\n    dp = [0] * (n+1)\n    dp[1] = dp[2] = 1\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n\n# Both approaches have different tradeoffs in terms of space and time complexity"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "In the context of API gateway patterns, which of the following is NOT a common responsibility of an API gateway?",
      "options": {
        "A": "Authentication and authorization",
        "B": "Rate limiting and throttling",
        "C": "Request/response transformation",
        "D": "Implementing business logic for the application"
      },
      "correct_answer": "D"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What is the time complexity for inserting a word of length m into a trie data structure with n nodes?",
      "options": {
        "A": "O(m)",
        "B": "O(n)",
        "C": "O(m*n)",
        "D": "O(log n)"
      },
      "correct_answer": "A",
      "code_example": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word):\n        node = self.root\n        # This loop runs in O(m) time where m is the length of the word\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True\n    \n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_end_of_word\n    \n    def starts_with(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return True"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "Which algorithm is commonly used to solve the maximum flow problem in a network?",
      "options": {
        "A": "Dijkstra's algorithm",
        "B": "Ford-Fulkerson algorithm",
        "C": "Bellman-Ford algorithm",
        "D": "Kruskal's algorithm"
      },
      "correct_answer": "B",
      "code_example": "# Simple implementation of Ford-Fulkerson algorithm for maximum flow\ndef bfs(graph, source, sink, parent):\n    visited = [False] * len(graph)\n    queue = [source]\n    visited[source] = True\n    \n    while queue:\n        u = queue.pop(0)\n        for ind, val in enumerate(graph[u]):\n            if visited[ind] == False and val > 0:\n                queue.append(ind)\n                visited[ind] = True\n                parent[ind] = u\n    \n    return visited[sink]\n\ndef ford_fulkerson(graph, source, sink):\n    parent = [-1] * len(graph)\n    max_flow = 0\n    \n    while bfs(graph, source, sink, parent):\n        path_flow = float(\"Inf\")\n        s = sink\n        while s != source:\n            path_flow = min(path_flow, graph[parent[s]][s])\n            s = parent[s]\n        \n        max_flow += path_flow\n        \n        v = sink\n        while v != source:\n            u = parent[v]\n            graph[u][v] -= path_flow\n            graph[v][u] += path_flow\n            v = parent[v]\n    \n    return max_flow"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "When profiling Python code, what does the cProfile module provide that the profile module does not?",
      "options": {
        "A": "Line-by-line profiling",
        "B": "Memory usage analysis",
        "C": "C implementation for lower overhead",
        "D": "Support for threaded applications"
      },
      "correct_answer": "C",
      "code_example": "import cProfile\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\n# Profile the fibonacci function\ncProfile.run('fibonacci(30)')\n\n# Sample output would show function calls, total time, and per-call metrics\n# The output would look something like:\n#    ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n# 2692537    0.437    0.000    0.437    0.000 <string>:2(fibonacci)"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What is the output of the following middleware implementation for token-based authentication?",
      "options": {
        "A": "Access granted",
        "B": "Unauthorized: Token missing",
        "C": "Unauthorized: Invalid token",
        "D": "Server error: middleware failed"
      },
      "correct_answer": "C",
      "code_example": "class AuthMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n        self.valid_tokens = [\"abc123\", \"xyz789\"]\n    \n    def __call__(self, request):\n        token = request.headers.get('Authorization')\n        \n        if not token:\n            return {\"status\": 401, \"message\": \"Unauthorized: Token missing\"}\n        \n        # Check if the token is valid (simplified)\n        if token not in self.valid_tokens:\n            return {\"status\": 401, \"message\": \"Unauthorized: Invalid token\"}\n        \n        response = self.get_response(request)\n        return response\n\nclass Request:\n    def __init__(self, headers):\n        self.headers = headers\n\nclass MockHandler:\n    def __call__(self, request):\n        return {\"status\": 200, \"message\": \"Access granted\"}\n\n# Test the middleware\nrequest = Request({\"Authorization\": \"invalid_token\"})\nmiddleware = AuthMiddleware(MockHandler())\nresponse = middleware(request)\nprint(response[\"message\"])"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "Which of the following is NOT a benefit of using GraphQL over traditional REST APIs?",
      "options": {
        "A": "Reduced over-fetching of data",
        "B": "Better automatic documentation through introspection",
        "C": "Improved cache-control and resource invalidation",
        "D": "Type checking and validation"
      },
      "correct_answer": "C",
      "code_example": "# Example of a simple GraphQL query definition in Python using Graphene\nimport graphene\n\nclass User(graphene.ObjectType):\n    id = graphene.ID()\n    name = graphene.String()\n    email = graphene.String()\n    posts = graphene.List(lambda: Post)\n\nclass Post(graphene.ObjectType):\n    id = graphene.ID()\n    title = graphene.String()\n    content = graphene.String()\n    author = graphene.Field(User)\n\nclass Query(graphene.ObjectType):\n    user = graphene.Field(User, id=graphene.ID(required=True))\n    \n    def resolve_user(self, info, id):\n        # In a real application, this would fetch from a database\n        return User(id=id, name=\"John Doe\", email=\"john@example.com\")\n\nschema = graphene.Schema(query=Query)\n\n# A client could then request only the fields they need:\n# {\n#   user(id: \"123\") {\n#     name\n#     email\n#   }\n# }"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the estimated path cost for the node (3,3) using the A* algorithm with Manhattan distance heuristic in the given code?",
      "options": {
        "A": "4",
        "B": "6",
        "C": "8",
        "D": "10"
      },
      "correct_answer": "B",
      "code_example": "import heapq\n\ndef manhattan_distance(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef a_star(start, goal, grid):\n    open_set = []\n    # Priority queue entry: (f_score, position)\n    heapq.heappush(open_set, (0 + manhattan_distance(start, goal), start))\n    \n    # g_score: cost from start to current position\n    g_score = {start: 0}\n    \n    # f_score: estimated cost from start to goal through current position\n    f_score = {start: manhattan_distance(start, goal)}\n    \n    # For this example, we'll just calculate and return the f_score\n    # of a specific node (3,3) when it's encountered\n    \n    while open_set:\n        current_f, current = heapq.heappop(open_set)\n        \n        if current == (3, 3):\n            # Return f_score for node (3,3)\n            return f_score[current]\n        \n        if current == goal:\n            return f_score[current]\n        \n        # Check all four adjacent cells\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            neighbor = (current[0] + dx, current[1] + dy)\n            \n            # Skip invalid or obstacle cells\n            if not (0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0])):\n                continue\n            if grid[neighbor[0]][neighbor[1]] == 1:  # 1 represents an obstacle\n                continue\n            \n            # Cost to reach neighbor is 1 more than current\n            tentative_g = g_score[current] + 1\n            \n            if neighbor not in g_score or tentative_g < g_score[neighbor]:\n                g_score[neighbor] = tentative_g\n                f_score[neighbor] = tentative_g + manhattan_distance(neighbor, goal)\n                heapq.heappush(open_set, (f_score[neighbor], neighbor))\n    \n    return -1  # No path found\n\n# Create a sample grid (0 = free, 1 = obstacle)\ngrid = [\n    [0, 0, 0, 0, 0],\n    [0, 1, 1, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0]\n]\n\nstart = (0, 0)\ngoal = (4, 4)\n\n# This will calculate and return the f_score for node (3,3)\nresult = a_star(start, goal, grid)"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "Which of the following is NOT a common method for service discovery in a microservices architecture?",
      "options": {
        "A": "Client-side discovery with a service registry",
        "B": "Server-side discovery with a load balancer",
        "C": "DNS-based discovery",
        "D": "Blockchain-based discovery"
      },
      "correct_answer": "D"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "According to the CAP theorem, when a network partition occurs in a distributed system, which of the following must be sacrificed?",
      "options": {
        "A": "Either consistency or availability",
        "B": "Either availability or partition tolerance",
        "C": "Either consistency or partition tolerance",
        "D": "All three properties must be partially compromised"
      },
      "correct_answer": "A"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What is the output of the following code that demonstrates Python's attribute access methods?",
      "options": {
        "A": "{'name': 'John', 'age': 30, 'default': None}",
        "B": "{'name': 'John', 'age': 30, 'salary': 5000}",
        "C": "{'name': 'John', 'age': 30, 'salary': 5000, 'department': 'Engineering'}",
        "D": "AttributeError: 'Person' object has no attribute 'salary'"
      },
      "correct_answer": "C",
      "code_example": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __getattr__(self, attr):\n        # Called when attribute is not found\n        return None\n    \n    def set_attributes(self, **kwargs):\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\n# Create person and manipulate attributes\nperson = Person(\"John\", 30)\n\n# Add new attributes using setattr\nperson.set_attributes(salary=5000, department=\"Engineering\")\n\n# Create a dictionary of all attributes\nattr_dict = {attr: getattr(person, attr) for attr in ['name', 'age', 'salary', 'department']}\nprint(attr_dict)"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "Which of the following is NOT a recommended secure coding practice in Python?",
      "options": {
        "A": "Using parameterized queries to prevent SQL injection",
        "B": "Storing passwords in plain text with proper access controls",
        "C": "Validating and sanitizing all user input",
        "D": "Using secure random number generators for cryptographic operations"
      },
      "correct_answer": "B",
      "code_example": "import hashlib\nimport os\nimport re\nimport sqlite3\n\n# Example of secure password hashing (good practice)\ndef hash_password(password):\n    salt = os.urandom(32)\n    key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)\n    return salt + key\n\n# Example of input validation (good practice)\ndef validate_username(username):\n    if not re.match(r'^[a-zA-Z0-9_]{3,20}$', username):\n        raise ValueError(\"Invalid username format\")\n    return username\n\n# Example of parameterized queries (good practice)\ndef add_user(conn, username, password_hash):\n    cursor = conn.cursor()\n    # Use parameterized query to prevent SQL injection\n    cursor.execute(\n        \"INSERT INTO users (username, password_hash) VALUES (?, ?)\",\n        (username, password_hash)\n    )\n    conn.commit()\n\n# Example of what NOT to do - storing passwords in plain text (bad practice)\ndef insecure_store_password(username, password):\n    # This would be the wrong approach\n    with open('passwords.txt', 'a') as f:\n        f.write(f\"{username}:{password}\\n\")"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What is the output of the following NumPy code?",
      "options": {
        "A": "[[ 0  1  2  3]\n [10 11 12 13]\n [20 21 22 23]]",
        "B": "[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]",
        "C": "[[0.         0.5        1.        ]\n [0.         0.70710678 1.41421356]\n [0.         1.         2.        ]]",
        "D": "[[0 1 2]\n [0 1 2]\n [0 1 2]]"
      },
      "correct_answer": "C",
      "code_example": "import numpy as np\n\n# Create a 3x3 matrix where each value is a function of its indices\ndef create_matrix():\n    matrix = np.zeros((3, 3))\n    for i in range(3):\n        for j in range(3):\n            matrix[i, j] = j * (i + 1) / 2\n    return matrix\n\nresult = create_matrix()\nprint(result)"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "Which of the following techniques is LEAST likely to improve database query performance in a typical Python web application?",
      "options": {
        "A": "Adding appropriate database indexes",
        "B": "Implementing query result caching",
        "C": "Using ORM eager loading to reduce N+1 query problems",
        "D": "Converting all queries to use recursive common table expressions (CTEs)"
      },
      "correct_answer": "D",
      "code_example": "# Example of a query optimization using SQLAlchemy ORM\nfrom sqlalchemy import create_engine, Column, Integer, String, ForeignKey, Index\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship, joinedload, Session\n\nBase = declarative_base()\n\nclass Author(Base):\n    __tablename__ = 'authors'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    books = relationship('Book', back_populates='author')\n\nclass Book(Base):\n    __tablename__ = 'books'\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    author_id = Column(Integer, ForeignKey('authors.id'))\n    author = relationship('Author', back_populates='books')\n    \n    # Adding an index to improve query performance\n    __table_args__ = (Index('idx_author_id', author_id),)\n\n# Example of N+1 query problem (inefficient):\ndef inefficient_query(session):\n    authors = session.query(Author).all()\n    for author in authors:\n        # This creates a separate query for each author's books\n        print(f\"{author.name} wrote {len(author.books)} books\")\n\n# Example of using eager loading to solve N+1 problem (efficient):\ndef efficient_query(session):\n    # Using joinedload to get all authors and their books in a single query\n    authors = session.query(Author).options(joinedload(Author.books)).all()\n    for author in authors:\n        print(f\"{author.name} wrote {len(author.books)} books\")"
    }
  ]
}
