{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "topic": "Default parameters and return values",
      "question": "What will be the output of the following code?",
      "code_example": "def greet(name, greeting='Hello'):\n    return f'{greeting}, {name}!'\n\nprint(greet('Alice'))",
      "options": {
        "A": "Hello Alice",
        "B": "Hello, Alice!",
        "C": "Alice, Hello!",
        "D": "greeting, Alice!"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "topic": "Handling multiple exceptions",
      "question": "What will be the output of the following code?",
      "code_example": "try:\n    x = 10 / 0\nexcept ValueError:\n    print('ValueError')\nexcept ZeroDivisionError:\n    print('ZeroDivisionError')\nexcept:\n    print('Other error')",
      "options": {
        "A": "ValueError",
        "B": "ZeroDivisionError",
        "C": "Other error",
        "D": "The code will crash without output"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "topic": "If-else statements and conditional expressions",
      "question": "What will be the output of the following code?",
      "code_example": "age = 17\nstatus = 'adult' if age >= 18 else 'minor'\nprint(status)",
      "options": {
        "A": "adult",
        "B": "minor",
        "C": "True",
        "D": "False"
      },
      "correct_answer": "B"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "topic": "Context managers (with statement)",
      "question": "What is the main advantage of using a context manager (with statement) when working with files?",
      "options": {
        "A": "It makes the code run faster",
        "B": "It automatically closes the file even if an exception occurs",
        "C": "It prevents other processes from accessing the file",
        "D": "It encrypts the file content"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "topic": "Binary search on sorted arrays",
      "question": "What is the time complexity of binary search on a sorted array?",
      "options": {
        "A": "O(n)",
        "B": "O(n²)",
        "C": "O(log n)",
        "D": "O(n log n)"
      },
      "correct_answer": "C"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "topic": "Parameters vs arguments",
      "question": "In the function definition 'def multiply(a, b=2):', which of the following statements is true?",
      "options": {
        "A": "'a' is a required parameter and 'b' is an optional parameter",
        "B": "Both 'a' and 'b' are required parameters",
        "C": "Both 'a' and 'b' are optional parameters",
        "D": "'a' is an optional parameter and 'b' is a required parameter"
      },
      "correct_answer": "A"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "topic": "Converting number bases",
      "question": "What will be the output of the following code?",
      "code_example": "decimal = 42\nprint(bin(decimal)[2:])",
      "options": {
        "A": "101010",
        "B": "0b101010",
        "C": "0x2A",
        "D": "2A"
      },
      "correct_answer": "A"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "topic": "String formatting",
      "question": "What will be the output of the following code?",
      "code_example": "name = 'Alice'\nage = 30\nprint(f'{name} is {age} years old')",
      "options": {
        "A": "name is age years old",
        "B": "{name} is {age} years old",
        "C": "Alice is 30 years old",
        "D": "Alice is thirty years old"
      },
      "correct_answer": "C"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "topic": "Variable scope",
      "question": "What will be the output of the following code?",
      "code_example": "x = 10\n\ndef change_x():\n    x = 20\n    print(f'Inside function: {x}')\n\nchange_x()\nprint(f'Outside function: {x}')",
      "options": {
        "A": "Inside function: 10\nOutside function: 10",
        "B": "Inside function: 20\nOutside function: 20",
        "C": "Inside function: 20\nOutside function: 10",
        "D": "The code will raise an UnboundLocalError"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "topic": "While loops and break/continue statements",
      "question": "What will be the output of the following code?",
      "code_example": "i = 0\nwhile i < 5:\n    i += 1\n    if i == 3:\n        continue\n    print(i, end=' ')",
      "options": {
        "A": "1 2 3 4 5",
        "B": "1 2 4 5",
        "C": "0 1 2 4",
        "D": "0 1 2 4 5"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "topic": "String reversal and manipulation",
      "question": "What will be the output of the following code?",
      "code_example": "text = 'Python'\nprint(text[::-1])",
      "options": {
        "A": "Python",
        "B": "nohtyP",
        "C": "Pytho",
        "D": "ohtyP"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "topic": "Selection sort implementation",
      "question": "What is the time complexity of selection sort?",
      "options": {
        "A": "O(n)",
        "B": "O(log n)",
        "C": "O(n²)",
        "D": "O(n log n)"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "topic": "Working with CSV files",
      "question": "Which module is commonly used to work with CSV files in Python?",
      "options": {
        "A": "csv",
        "B": "pandas",
        "C": "numpy",
        "D": "json"
      },
      "correct_answer": "A"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "topic": "Simple statistical calculations",
      "question": "What will be the output of the following code?",
      "code_example": "numbers = [1, 2, 3, 4, 5]\nprint(sum(numbers)/len(numbers))",
      "options": {
        "A": "3",
        "B": "2.5",
        "C": "3.0",
        "D": "15"
      },
      "correct_answer": "C"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "topic": "FizzBuzz implementation",
      "question": "What will be the output of the following FizzBuzz implementation for the number 15?",
      "code_example": "def fizzbuzz(n):\n    if n % 3 == 0 and n % 5 == 0:\n        return 'FizzBuzz'\n    elif n % 3 == 0:\n        return 'Fizz'\n    elif n % 5 == 0:\n        return 'Buzz'\n    else:\n        return str(n)\n\nprint(fizzbuzz(15))",
      "options": {
        "A": "15",
        "B": "Fizz",
        "C": "Buzz",
        "D": "FizzBuzz"
      },
      "correct_answer": "D"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "topic": "Creating custom exceptions",
      "question": "What will be the output of the following code?",
      "code_example": "class NegativeValueError(Exception):\n    pass\n\ndef process_value(value):\n    if value < 0:\n        raise NegativeValueError('Value cannot be negative')\n    return value * 2\n\ntry:\n    result = process_value(-5)\nexcept NegativeValueError as e:\n    print('Caught an error:', str(e))",
      "options": {
        "A": "Caught an error: Value cannot be negative",
        "B": "Caught an error: NegativeValueError",
        "C": "-10",
        "D": "The code will crash with an unhandled exception"
      },
      "correct_answer": "A"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "topic": "CRUD operations",
      "question": "Which of the following represents the correct order of CRUD operations?",
      "options": {
        "A": "Create, Read, Use, Delete",
        "B": "Connect, Retry, Update, Disconnect",
        "C": "Create, Read, Update, Delete",
        "D": "Compile, Run, Update, Debug"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "topic": "Creating and importing modules",
      "question": "What will be the output of the following code if it's saved in a file named 'main.py' and executed, assuming 'helper.py' is in the same directory?",
      "code_example": "# helper.py content\ndef calculate(a, b):\n    return a * b\n\n# main.py content\nfrom helper import calculate\nprint(calculate(3, 4))",
      "options": {
        "A": "7",
        "B": "12",
        "C": "An ImportError will be raised",
        "D": "None"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "topic": "Common regex patterns",
      "question": "Which regex pattern correctly matches a valid email address with the following criteria: username can contain letters, numbers, dots, and underscores; domain name can contain letters and numbers; top-level domain must be between 2-4 characters?",
      "options": {
        "A": "^[a-zA-Z0-9_.]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,4}$",
        "B": "^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,4}$",
        "C": "^[\\w.]+@[\\w]+\\.[a-zA-Z]{2,4}$",
        "D": "^.+@.+\\..+$"
      },
      "correct_answer": "A"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "topic": "Named tuples and dataclasses",
      "question": "What will be the output of the following code?",
      "code_example": "from collections import namedtuple\n\nPerson = namedtuple('Person', ['name', 'age'])\nalice = Person('Alice', 30)\nprint(f'{alice.name} is {alice.age} years old')",
      "options": {
        "A": "Person(name='Alice', age=30) is Person(name='Alice', age=30) years old",
        "B": "alice.name is alice.age years old",
        "C": "Alice is 30 years old",
        "D": "The code will raise an AttributeError"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "topic": "Lazy evaluation benefits",
      "question": "What is a primary benefit of lazy evaluation in Python?",
      "options": {
        "A": "It always makes code execution faster",
        "B": "It reduces memory usage for potentially large or infinite sequences",
        "C": "It automatically multithreads operations",
        "D": "It prevents all runtime errors"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "topic": "Two-pointer technique",
      "question": "What will be the output of the following code that uses the two-pointer technique to check if a string is a palindrome?",
      "code_example": "def is_palindrome(s):\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    return True\n\nprint(is_palindrome('racecar'))",
      "options": {
        "A": "True",
        "B": "False",
        "C": "None",
        "D": "The code will raise an IndexError"
      },
      "correct_answer": "A"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "topic": "Classes and instances",
      "question": "What will be the output of the following code?",
      "code_example": "class Counter:\n    count = 0\n    \n    def __init__(self):\n        Counter.count += 1\n        \n    @classmethod\n    def get_count(cls):\n        return cls.count\n\nc1 = Counter()\nc2 = Counter()\nprint(Counter.get_count())",
      "options": {
        "A": "0",
        "B": "1",
        "C": "2",
        "D": "None"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "topic": "Nested data structures",
      "question": "What will be the output of the following code?",
      "code_example": "users = [\n    {'name': 'Alice', 'age': 30, 'skills': ['Python', 'SQL']},\n    {'name': 'Bob', 'age': 25, 'skills': ['JavaScript', 'HTML', 'CSS']},\n    {'name': 'Charlie', 'age': 35, 'skills': ['Python', 'Java']}\n]\n\npython_users = [user['name'] for user in users if 'Python' in user['skills']]\nprint(python_users)",
      "options": {
        "A": "['Alice', 'Charlie']",
        "B": "['Alice', 'Bob', 'Charlie']",
        "C": "['Python', 'Python']",
        "D": "['Python']"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "topic": "Database normalization principles",
      "question": "Which normalization form (NF) addresses the issue of transitive dependencies in a database?",
      "options": {
        "A": "1NF",
        "B": "2NF",
        "C": "3NF",
        "D": "4NF"
      },
      "correct_answer": "C"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "topic": "Infinite sequences",
      "question": "What will be the output of the following code?",
      "code_example": "import itertools\n\ncounter = itertools.count(start=10, step=5)\nprint([next(counter) for _ in range(3)])",
      "options": {
        "A": "[10, 15, 20]",
        "B": "[10, 11, 12]",
        "C": "[0, 1, 2]",
        "D": "The code will raise a StopIteration error"
      },
      "correct_answer": "A"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "topic": "Inheritance and method overriding",
      "question": "What will be the output of the following code?",
      "code_example": "class Animal:\n    def speak(self):\n        return \"Animal sound\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof\"\n\nclass Puppy(Dog):\n    def speak(self):\n        return super().speak() + \" (softly)\"\n\npuppy = Puppy()\nprint(puppy.speak())",
      "options": {
        "A": "Animal sound",
        "B": "Woof",
        "C": "Woof (softly)",
        "D": "Animal sound (softly)"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "topic": "Combining functional operations",
      "question": "What will be the output of the following code?",
      "code_example": "numbers = [1, 2, 3, 4, 5]\n\nresult = list(map(lambda x: x**2, filter(lambda x: x % 2 == 0, numbers)))\nprint(result)",
      "options": {
        "A": "[1, 4, 9, 16, 25]",
        "B": "[4, 16]",
        "C": "[2, 4]",
        "D": "[1, 3, 5]"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "topic": "Depth-first search (DFS)",
      "question": "What will be the output of the following depth-first search implementation on a graph?",
      "code_example": "graph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\n\ndef dfs(graph, node, visited=None):\n    if visited is None:\n        visited = []\n    visited.append(node)\n    \n    for neighbor in graph[node]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n    \n    return visited\n\nprint(dfs(graph, 'A'))",
      "options": {
        "A": "['A', 'B', 'C', 'F']",
        "B": "['A', 'B', 'D', 'E', 'F', 'C']",
        "C": "['A', 'B', 'C', 'D', 'E', 'F']",
        "D": "['A', 'B', 'D', 'E', 'C', 'F']"
      },
      "correct_answer": "D"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "topic": "Database connection in Python",
      "question": "Which module is NOT commonly used for connecting to relational databases in Python?",
      "options": {
        "A": "sqlite3",
        "B": "pymongo",
        "C": "psycopg2",
        "D": "pymysql"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "topic": "Quicksort implementation",
      "question": "What is the average time complexity of the Quicksort algorithm?",
      "options": {
        "A": "O(n)",
        "B": "O(n²)",
        "C": "O(n log n)",
        "D": "O(log n)"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "topic": "Collections module",
      "question": "What will be the output of the following code?",
      "code_example": "from collections import Counter\n\ntext = \"mississippi\"\nc = Counter(text)\nprint(c.most_common(2))",
      "options": {
        "A": "['i', 's']",
        "B": "[('i', 4), ('s', 4)]",
        "C": "[('i', 4), ('m', 1)]",
        "D": "{'i': 4, 's': 4}"
      },
      "correct_answer": "B"
    },
    {
      "id": 33,
      "difficulty": "hard",
      "topic": "Abstract classes and interfaces",
      "question": "What will be the output of the following code?",
      "code_example": "from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n    \n    def description(self):\n        return f\"This shape has an area of {self.area()}\"\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return 3.14 * self.radius * self.radius\n\ntry:\n    shape = Shape()\n    print(\"Created a shape instance\")\nexcept Exception as e:\n    print(f\"Error: {type(e).__name__}\")",
      "options": {
        "A": "Created a shape instance",
        "B": "Error: TypeError",
        "C": "Error: NotImplementedError",
        "D": "Error: AbstractMethodError"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "topic": "API security and rate limiting",
      "question": "Which of the following is NOT a common method for implementing rate limiting in APIs?",
      "options": {
        "A": "Token bucket algorithm",
        "B": "Leaky bucket algorithm",
        "C": "Fixed window counter",
        "D": "Bloom filter algorithm"
      },
      "correct_answer": "D"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "topic": "Basic ML pipeline implementation",
      "question": "What is the correct order of steps in a basic supervised machine learning pipeline?",
      "options": {
        "A": "Data collection, data cleaning, feature engineering, model selection, training, evaluation, deployment",
        "B": "Model selection, data collection, data cleaning, feature engineering, training, deployment, evaluation",
        "C": "Data collection, model selection, feature engineering, data cleaning, training, evaluation, deployment",
        "D": "Data cleaning, data collection, feature engineering, model selection, evaluation, training, deployment"
      },
      "correct_answer": "A"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "topic": "Asyncio framework",
      "question": "What will be the output of the following code?",
      "code_example": "import asyncio\n\nasync def say_after(delay, message):\n    await asyncio.sleep(delay)\n    return message\n\nasync def main():\n    task1 = asyncio.create_task(say_after(0.5, 'hello'))\n    task2 = asyncio.create_task(say_after(0.25, 'world'))\n    \n    results = await asyncio.gather(task1, task2)\n    print(results)\n\nasyncio.run(main())",
      "options": {
        "A": "['hello', 'world']",
        "B": "['world', 'hello']",
        "C": "hello world",
        "D": "world hello"
      },
      "correct_answer": "A"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "topic": "Database sharding and replication",
      "question": "Which statement about database sharding is FALSE?",
      "options": {
        "A": "Sharding involves partitioning data across multiple servers",
        "B": "Sharding can improve read and write performance",
        "C": "Sharding makes JOIN operations easier and more efficient",
        "D": "Sharding helps with horizontal scaling"
      },
      "correct_answer": "C"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "topic": "WebSockets implementation",
      "question": "What is the main advantage of WebSockets over traditional HTTP requests?",
      "options": {
        "A": "WebSockets support binary data transfer",
        "B": "WebSockets establish a persistent connection allowing two-way communication",
        "C": "WebSockets are more secure by default",
        "D": "WebSockets consume less bandwidth for all types of operations"
      },
      "correct_answer": "B"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "topic": "Descriptors",
      "question": "What will be the output of the following code using descriptors?",
      "code_example": "class Positive:\n    def __init__(self):\n        self._name = None\n    \n    def __set_name__(self, owner, name):\n        self._name = name\n    \n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return instance.__dict__.get(self._name, 0)\n    \n    def __set__(self, instance, value):\n        if value < 0:\n            raise ValueError(f\"{self._name} must be positive\")\n        instance.__dict__[self._name] = value\n\nclass Point:\n    x = Positive()\n    y = Positive()\n    \n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ntry:\n    p = Point(5, -3)\n    print(\"Point created successfully\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")",
      "options": {
        "A": "Point created successfully",
        "B": "Error: y must be positive",
        "C": "Error: value must be positive",
        "D": "The code will raise a different exception"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "topic": "Authentication middleware",
      "question": "What is the primary purpose of authentication middleware in a web application?",
      "options": {
        "A": "To compress HTTP responses for faster transmission",
        "B": "To intercept requests and verify user identity before they reach the main application logic",
        "C": "To log all incoming requests for debugging purposes",
        "D": "To cache responses to improve performance"
      },
      "correct_answer": "B"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "topic": "Concurrent.futures module",
      "question": "What will be the output of the following code?",
      "code_example": "import concurrent.futures\nimport time\n\ndef task(n):\n    time.sleep(n / 10)\n    return n * n\n\ndef main():\n    with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:\n        futures = [executor.submit(task, i) for i in range(1, 5)]\n        \n        results = []\n        for future in concurrent.futures.as_completed(futures):\n            results.append(future.result())\n        \n        return results\n\nprint(main())",
      "options": {
        "A": "[1, 4, 9, 16]",
        "B": "[16, 9, 4, 1]",
        "C": "[1, 4, 16, 9]",
        "D": "The order cannot be predicted deterministically"
      },
      "correct_answer": "D"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "topic": "C extensions and Cython",
      "question": "Which of the following statements about Cython is FALSE?",
      "options": {
        "A": "Cython is a superset of Python that can compile to C",
        "B": "Cython can significantly improve performance for CPU-bound operations",
        "C": "Cython code can directly use Python C API",
        "D": "Cython automatically converts all Python code to C without any type annotations needed"
      },
      "correct_answer": "D"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "topic": "NoSQL databases",
      "question": "Which of the following NoSQL database types would be MOST appropriate for storing session data in a web application?",
      "options": {
        "A": "Document store (e.g., MongoDB)",
        "B": "Column-family store (e.g., Cassandra)",
        "C": "Key-value store (e.g., Redis)",
        "D": "Graph database (e.g., Neo4j)"
      },
      "correct_answer": "C"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "topic": "State definition and transition",
      "question": "What will be the output of the following code implementing a simple state machine?",
      "code_example": "class StateMachine:\n    def __init__(self):\n        self.state = 'A'\n        self.transitions = {\n            'A': {'x': 'B', 'y': 'C'},\n            'B': {'x': 'A', 'y': 'D'},\n            'C': {'x': 'D', 'y': 'A'},\n            'D': {'x': 'C', 'y': 'B'}\n        }\n    \n    def process(self, inputs):\n        result = [self.state]\n        for i in inputs:\n            if i in self.transitions[self.state]:\n                self.state = self.transitions[self.state][i]\n                result.append(self.state)\n        return result\n\nsm = StateMachine()\nprint(sm.process(['x', 'y', 'y']))",
      "options": {
        "A": "['A', 'B', 'D', 'C']",
        "B": "['A', 'B', 'D', 'B']",
        "C": "['A', 'x', 'y', 'y']",
        "D": "['A']"
      },
      "correct_answer": "B"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "topic": "Secure coding practices",
      "question": "Which of the following is NOT a recommended practice for secure coding in Python?",
      "options": {
        "A": "Using parameterized queries for database operations",
        "B": "Storing passwords as plain text for easier debugging",
        "C": "Validating and sanitizing all user inputs",
        "D": "Using HTTPS for sensitive data transmission"
      },
      "correct_answer": "B"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "topic": "Design patterns",
      "question": "What will be the output of the following Singleton pattern implementation?",
      "code_example": "class Singleton:\n    _instance = None\n    \n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super().__new__(cls)\n            cls._instance.value = 0\n        return cls._instance\n    \n    def increment(self):\n        self.value += 1\n        return self.value\n\na = Singleton()\nprint(a.increment())\n\nb = Singleton()\nprint(b.increment())\n\nprint(a is b)",
      "options": {
        "A": "1\n1\nFalse",
        "B": "1\n2\nTrue",
        "C": "1\n1\nTrue",
        "D": "0\n0\nTrue"
      },
      "correct_answer": "B"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "topic": "Distributed caching",
      "question": "Which of the following is NOT a benefit of using distributed caching in a web application?",
      "options": {
        "A": "Reduced database load",
        "B": "Improved response times",
        "C": "Guaranteed data consistency across all operations",
        "D": "Ability to scale horizontally"
      },
      "correct_answer": "C"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "topic": "Backtracking algorithms",
      "question": "What will be the output of the following backtracking algorithm implementation for solving the N-Queens problem?",
      "code_example": "def is_safe(board, row, col, n):\n    # Check this row on left side\n    for i in range(col):\n        if board[row][i] == 1:\n            return False\n    \n    # Check upper diagonal on left side\n    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):\n        if board[i][j] == 1:\n            return False\n    \n    # Check lower diagonal on left side\n    for i, j in zip(range(row, n), range(col, -1, -1)):\n        if board[i][j] == 1:\n            return False\n    \n    return True\n\ndef solve_nqueens(n):\n    if n == 0:\n        return [[]]  # Empty board is a solution for n=0\n    \n    def backtrack(board, col):\n        if col >= n:\n            # Convert board to proper format and add to solutions\n            solution = []\n            for i in range(n):\n                row_string = ''\n                for j in range(n):\n                    if board[i][j] == 1:\n                        row_string += 'Q'\n                    else:\n                        row_string += '.'\n                solution.append(row_string)\n            solutions.append(solution)\n            return\n        \n        for row in range(n):\n            if is_safe(board, row, col, n):\n                board[row][col] = 1\n                backtrack(board, col + 1)\n                board[row][col] = 0  # Backtrack\n    \n    solutions = []\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    backtrack(board, 0)\n    return len(solutions)\n\nprint(solve_nqueens(4))",
      "options": {
        "A": "0",
        "B": "1",
        "C": "2",
        "D": "4"
      },
      "correct_answer": "C"
    }
]
}
