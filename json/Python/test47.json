{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "TypeError: can only concatenate str (not \"int\") to str",
        "B": "Hello5",
        "C": "Hello 5",
        "D": "5Hello"
      },
      "correct_answer": "A",
      "code_example": "greeting = \"Hello\"\nnumber = 5\nprint(greeting + number)"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which of the following correctly checks if a variable 'x' is an integer?",
      "options": {
        "A": "if type(x) == int:",
        "B": "if isinstance(x, int):",
        "C": "if x.type() == int:",
        "D": "if x.isinstance(int):"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[0, 1, 2, 3, 4]",
        "B": "[0, 1, 2, 3, 4, 5]",
        "C": "[1, 2, 3, 4, 5]",
        "D": "[1, 2, 3, 4]"
      },
      "correct_answer": "A",
      "code_example": "my_list = []\nfor i in range(5):\n    my_list.append(i)\nprint(my_list)"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "The file was closed successfully",
        "B": "Error: could not open file",
        "C": "Cleaning up resources",
        "D": "The file was closed successfully\\nCleaning up resources"
      },
      "correct_answer": "D",
      "code_example": "try:\n    with open('existing_file.txt', 'r') as f:\n        pass\n    print(\"The file was closed successfully\")\nexcept FileNotFoundError:\n    print(\"Error: could not open file\")\nfinally:\n    print(\"Cleaning up resources\")"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "3",
        "B": "3.5",
        "C": "4",
        "D": "5"
      },
      "correct_answer": "B",
      "code_example": "import statistics\nnumbers = [1, 2, 3, 4, 8]\nprint(statistics.mean(numbers))"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "Which of the following is the correct implementation of a selection sort algorithm?",
      "options": {
        "A": "def selection_sort(arr):\n    for i in range(len(arr)):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr",
        "B": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr",
        "C": "def selection_sort(arr):\n    new_arr = []\n    for i in range(len(arr)):\n        new_arr.append(min(arr))\n        arr.remove(min(arr))\n    return new_arr",
        "D": "def selection_sort(arr):\n    return sorted(arr)"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What is the purpose of a context manager in Python?",
      "options": {
        "A": "To manage memory allocation for objects",
        "B": "To handle exceptions in a structured way",
        "C": "To automatically manage resources (like file handles) with proper acquisition and release",
        "D": "To create and manage different execution contexts for multithreading"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What's the difference between parameters and arguments in Python functions?",
      "options": {
        "A": "They are different names for the same concept",
        "B": "Parameters are variables in function declarations, arguments are the values passed to functions when called",
        "C": "Arguments are variables in function declarations, parameters are the values passed to functions when called",
        "D": "Parameters are only used in class methods, arguments are used in regular functions"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[0, 1, 2]",
        "B": "[(0, 'apple'), (1, 'banana'), (2, 'cherry')]",
        "C": "['apple', 'banana', 'cherry']",
        "D": "[(1, 'apple'), (2, 'banana'), (3, 'cherry')]"
      },
      "correct_answer": "B",
      "code_example": "fruits = ['apple', 'banana', 'cherry']\nprint(list(enumerate(fruits)))"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[('a', 1), ('b', 2)]",
        "B": "[('a', 1), ('b', 2), ('c', None)]",
        "C": "KeyError: 'c'",
        "D": "{'a': 1, 'b': 2}"
      },
      "correct_answer": "A",
      "code_example": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2]\nprint(list(zip(list1, list2)))"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What is the median of the following list of numbers: [5, 3, 1, 8, 7]?",
      "options": {
        "A": "1",
        "B": "3",
        "C": "5",
        "D": "8"
      },
      "correct_answer": "C"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "{'name': 'John', 'age': 30}",
        "B": "dict_keys(['name', 'age'])",
        "C": "dict_values(['John', 30])",
        "D": "dict_items([('name', 'John'), ('age', 30)])"
      },
      "correct_answer": "D",
      "code_example": "person = {'name': 'John', 'age': 30}\nprint(person.items())"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "['apple', 'banana', 'cherry']",
        "B": "['apple', 'banana', 'cherry', 'orange']",
        "C": "['orange', 'apple', 'banana', 'cherry']",
        "D": "['apple', 'orange', 'banana', 'cherry']"
      },
      "correct_answer": "B",
      "code_example": "fruits = 'apple,banana,cherry'\nnew_fruits = fruits.split(',')\nnew_fruits.append('orange')\nprint(new_fruits)"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "Which function would correctly identify if a number is prime?",
      "options": {
        "A": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
        "B": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "C": "def is_prime(n):\n    return all(n % i != 0 for i in range(2, n))",
        "D": "def is_prime(n):\n    return n > 1 and n % 2 != 0"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What exception will be raised by the following code?",
      "options": {
        "A": "ValueError",
        "B": "TypeError",
        "C": "IndexError",
        "D": "KeyError"
      },
      "correct_answer": "C",
      "code_example": "my_list = [1, 2, 3]\nprint(my_list[3])"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "According to PEP 8, which is the correct naming convention for a constant in Python?",
      "options": {
        "A": "maxSize",
        "B": "MAX_SIZE",
        "C": "MaxSize",
        "D": "max_size"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "Which HTTP method is idempotent but not safe according to RESTful API principles?",
      "options": {
        "A": "GET",
        "B": "POST",
        "C": "PUT",
        "D": "OPTIONS"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "10 20",
        "B": "10 10",
        "C": "10",
        "D": "AttributeError: 'Rectangle' object has no attribute 'width'"
      },
      "correct_answer": "A",
      "code_example": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\nr = Rectangle(10, 20)\nprint(r.width, r.height)"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "Which of the following correctly implements a node for a singly linked list?",
      "options": {
        "A": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None",
        "B": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None",
        "C": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.children = []",
        "D": "class Node:\n    def __init__(self, data):\n        self.value = data\n        self.pointer = None"
      },
      "correct_answer": "A"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What is the main purpose of a virtual environment in Python?",
      "options": {
        "A": "To speed up Python code execution",
        "B": "To isolate project dependencies from the global Python installation",
        "C": "To compile Python code into machine code",
        "D": "To provide a virtual machine for running Python code"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "In SQLAlchemy ORM, which of the following correctly defines a simple model class?",
      "options": {
        "A": "class User(Model):\n    name = field.String()\n    age = field.Integer()",
        "B": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    age = Column(Integer)",
        "C": "class User(Table):\n    table_name = 'users'\n    id = PrimaryKey()\n    name = StringColumn()\n    age = IntegerColumn()",
        "D": "class User(ORM):\n    def __init__(self):\n        self.id = pk()\n        self.name = str()\n        self.age = int()"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "ImportError: No module named 'my_module'",
        "B": "Hello from my_module",
        "C": "NameError: name 'greet' is not defined",
        "D": "SyntaxError: invalid syntax"
      },
      "correct_answer": "C",
      "code_example": "# Assuming my_module.py contains:\n# def say_hello():\n#     print(\"Hello from my_module\")\n\nimport my_module\ngreet()"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "Which of the following is a correct way to establish a connection to a SQLite database in Python?",
      "options": {
        "A": "db = Database('example.db')\ndb.connect()",
        "B": "import sqlite3\nconn = sqlite3.connect('example.db')\ncursor = conn.cursor()",
        "C": "from database import SQL\ndb = SQL.open('example.db')",
        "D": "import db\nconnection = db.sqlite.open('example.db')"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "3",
        "B": "2",
        "C": "1",
        "D": "IndexError: pop from empty list"
      },
      "correct_answer": "A",
      "code_example": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n    \n    def is_empty(self):\n        return len(self.items) == 0\n\ns = Stack()\ns.push(1)\ns.push(2)\ns.push(3)\nprint(s.pop())"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code that uses the two-pointer technique?",
      "options": {
        "A": "[1, 2, 3, 4, 5]",
        "B": "[5, 4, 3, 2, 1]",
        "C": "[1, 5, 2, 4, 3]",
        "D": "[3, 2, 4, 1, 5]"
      },
      "correct_answer": "B",
      "code_example": "def reverse_array(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    return arr\n\nprint(reverse_array([1, 2, 3, 4, 5]))"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "25",
        "B": "30",
        "C": "35",
        "D": "40"
      },
      "correct_answer": "B",
      "code_example": "data = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}, {'name': 'Charlie', 'age': 35}]\nprint(data[1]['age'])"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "Which function correctly detects a cycle in a directed graph represented as an adjacency list?",
      "options": {
        "A": "def has_cycle(graph):\n    visited = set()\n    for node in graph:\n        if node not in visited:\n            visited.add(node)\n    return False",
        "B": "def has_cycle(graph):\n    return len(graph) > len(set(node for nodes in graph.values() for node in nodes))",
        "C": "def has_cycle(graph):\n    visited = set()\n    rec_stack = set()\n    \n    def dfs(node):\n        visited.add(node)\n        rec_stack.add(node)\n        \n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                if dfs(neighbor):\n                    return True\n            elif neighbor in rec_stack:\n                return True\n        \n        rec_stack.remove(node)\n        return False\n    \n    for node in graph:\n        if node not in visited:\n            if dfs(node):\n                return True\n    return False",
        "D": "def has_cycle(graph):\n    return sum(len(neighbors) for neighbors in graph.values()) >= len(graph)"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "10",
        "B": "15",
        "C": "20",
        "D": "25"
      },
      "correct_answer": "B",
      "code_example": "def outer_function(x):\n    y = 5\n    def inner_function():\n        return x + y\n    return inner_function\n\nclosure = outer_function(10)\nprint(closure())"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "Which normalization form ensures that all non-key attributes are functionally dependent on the primary key?",
      "options": {
        "A": "First Normal Form (1NF)",
        "B": "Second Normal Form (2NF)",
        "C": "Third Normal Form (3NF)",
        "D": "Boyce-Codd Normal Form (BCNF)"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Tom is 3 years old",
        "B": "Cat is 3 years old",
        "C": "AttributeError: 'Cat' object has no attribute 'speak'",
        "D": "TypeError: speak() missing 1 required positional argument: 'self'"
      },
      "correct_answer": "A",
      "code_example": "class Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def speak(self):\n        return f\"{self.name} is {self.age} years old\"\n\nclass Cat(Animal):\n    def purr(self):\n        return \"Purr...\"\n\ntom = Cat(\"Tom\", 3)\nprint(tom.speak())"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code that combines functional operations?",
      "options": {
        "A": "[2, 4, 6, 8, 10]",
        "B": "[1, 4, 9, 16, 25]",
        "C": "[2, 8, 18, 32, 50]",
        "D": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
      },
      "correct_answer": "A",
      "code_example": "numbers = [1, 2, 3, 4, 5]\ndoubled = list(map(lambda x: x * 2, numbers))\nprint(doubled)"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "[1, 4, 9, 16, 25]",
        "B": "[1, 4, 9, 16]",
        "C": "[1, 2, 3, 4, 5]",
        "D": "TypeError: 'function' object is not iterable"
      },
      "correct_answer": "A",
      "code_example": "squares = list(map(lambda x: x**2, range(1, 6)))\nprint(squares)"
    },
{
      "id": 33,
      "difficulty": "hard",
      "topic": "Bit manipulation",
      "question": "What will be the output of the following code that performs bit manipulation?",
      "code_example": "def bit_puzzle(a, b):\n    return (a & ~b) | (~a & b)\n\nprint(bit_puzzle(10, 7))",
      "options": {
        "A": "13",
        "B": "5",
        "C": "17",
        "D": "3"
      },
      "correct_answer": "A"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "topic": "OWASP top 10 vulnerabilities",
      "question": "Which of the following code snippets demonstrates proper protection against SQL injection according to OWASP guidelines?",
      "code_example": "# Option A\ndef get_user_a(username):\n    query = f\"SELECT * FROM users WHERE username = '{username}'\"\n    return execute_query(query)\n\n# Option B\ndef get_user_b(username):\n    query = \"SELECT * FROM users WHERE username = %s\"\n    return execute_query(query, (username,))\n\n# Option C\ndef get_user_c(username):\n    username = username.replace(\"'\", \"''\")\n    query = f\"SELECT * FROM users WHERE username = '{username}'\"\n    return execute_query(query)\n\n# Option D\ndef get_user_d(username):\n    if not username.isalnum():\n        raise ValueError(\"Invalid username\")\n    query = f\"SELECT * FROM users WHERE username = '{username}'\"\n    return execute_query(query)",
      "options": {
        "A": "Option A - Using f-strings to construct the query",
        "B": "Option B - Using parameterized queries",
        "C": "Option C - Escaping single quotes",
        "D": "Option D - Validating input with isalnum()"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "topic": "Secure coding practices",
      "question": "Which of the following implementations of password hashing follows secure coding practices?",
      "code_example": "# Option A\ndef hash_password_a(password):\n    import hashlib\n    return hashlib.md5(password.encode()).hexdigest()\n\n# Option B\ndef hash_password_b(password):\n    import hashlib\n    salt = b'fixed_salt_value'\n    return hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 1000).hex()\n\n# Option C\ndef hash_password_c(password):\n    import hashlib\n    import os\n    salt = os.urandom(32)\n    key = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)\n    return salt.hex() + key.hex()\n\n# Option D\ndef hash_password_d(password):\n    import base64\n    import hashlib\n    return base64.b64encode(hashlib.sha256(password.encode()).digest()).decode()",
      "options": {
        "A": "Option A - Simple MD5 hashing",
        "B": "Option B - PBKDF2 with fixed salt",
        "C": "Option C - PBKDF2 with random salt and 100,000 iterations",
        "D": "Option D - Base64-encoded SHA-256 hash"
      },
      "correct_answer": "C"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "topic": "Balanced search trees (AVL, Red-Black)",
      "question": "Which statement about AVL trees is correct?",
      "options": {
        "A": "AVL trees maintain perfect balance, ensuring all leaf nodes are at the same level",
        "B": "AVL trees allow a height difference of at most 2 between left and right subtrees",
        "C": "AVL trees maintain balance by ensuring the height difference between left and right subtrees is at most 1",
        "D": "AVL trees use color properties to ensure balance rather than height differences"
      },
      "correct_answer": "C"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "topic": "Containerization with Docker",
      "question": "What will be the result of running the following Dockerfile?",
      "code_example": "FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"python\", \"app.py\"]\nENTRYPOINT [\"flask\", \"run\", \"--host=0.0.0.0\"]",
      "options": {
        "A": "The container will execute 'python app.py' when started",
        "B": "The container will execute 'flask run --host=0.0.0.0' when started",
        "C": "A syntax error will occur because both CMD and ENTRYPOINT are specified",
        "D": "The container will execute 'flask run --host=0.0.0.0 python app.py' when started"
      },
      "correct_answer": "B"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "topic": "Container orchestration basics (Kubernetes)",
      "question": "In a Kubernetes environment, which component is primarily responsible for maintaining the desired state of pods and restarting them if they fail?",
      "options": {
        "A": "kube-proxy",
        "B": "etcd",
        "C": "kubelet",
        "D": "kube-scheduler"
      },
      "correct_answer": "C"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "topic": "Basic ML pipeline implementation",
      "question": "What will be the output of the following ML pipeline code?",
      "code_example": "import numpy as np\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Create synthetic data\nnp.random.seed(42)\nX = np.random.randn(100, 2)\ny = (X[:, 0] + X[:, 1] > 0).astype(int)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42)\n\n# Create and train pipeline\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classifier', RandomForestClassifier(random_state=42, n_estimators=5))\n])\n\npipeline.fit(X_train, y_train)\n\n# Evaluate\naccuracy = pipeline.score(X_test, y_test)\nprint(f\"{accuracy:.2f}\")",
      "options": {
        "A": "0.67",
        "B": "0.77",
        "C": "0.87",
        "D": "0.97"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "topic": "Authentication middleware",
      "question": "What security vulnerability is present in the following Flask authentication middleware?",
      "code_example": "from flask import Flask, request, jsonify\nimport jwt\n\napp = Flask(__name__)\nSECRET_KEY = 'my_secret_key'\n\ndef authenticate(func):\n    def wrapper(*args, **kwargs):\n        token = request.headers.get('Authorization')\n        if not token:\n            return jsonify({'message': 'Missing token'}), 401\n        \n        try:\n            # Remove 'Bearer ' prefix if present\n            if token.startswith('Bearer '):\n                token = token[7:]\n            \n            payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n            request.user = payload['sub']\n            return func(*args, **kwargs)\n        except jwt.ExpiredSignatureError:\n            return jsonify({'message': 'Token expired'}), 401\n        except jwt.InvalidTokenError:\n            return jsonify({'message': 'Invalid token'}), 401\n            \n    return wrapper\n\n@app.route('/protected', methods=['GET'])\n@authenticate\ndef protected():\n    return jsonify({'message': f'Hello, {request.user}!'})",
      "options": {
        "A": "The middleware doesn't verify token issuer",
        "B": "The secret key is hardcoded in the application code",
        "C": "JWT algorithms are not specified in the decode function",
        "D": "The middleware doesn't check token expiration"
      },
      "correct_answer": "B"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "topic": "Approximation algorithms",
      "question": "What will be the output of running this approximation algorithm for the Traveling Salesman Problem?",
      "code_example": "import networkx as nx\nimport numpy as np\n\ndef approximate_tsp(dist_matrix):\n    n = len(dist_matrix)\n    # Create a complete graph\n    G = nx.complete_graph(n)\n    # Add edge weights\n    for i in range(n):\n        for j in range(i+1, n):\n            G[i][j]['weight'] = dist_matrix[i][j]\n    \n    # Find minimum spanning tree\n    T = nx.minimum_spanning_tree(G)\n    \n    # Find nodes with odd degree\n    odd_degree_nodes = [node for node, degree in T.degree() if degree % 2 == 1]\n    \n    # Add minimum-weight perfect matching of odd-degree nodes\n    # (simplified for this example by connecting sequential pairs)\n    for i in range(0, len(odd_degree_nodes), 2):\n        if i+1 < len(odd_degree_nodes):\n            u, v = odd_degree_nodes[i], odd_degree_nodes[i+1]\n            T.add_edge(u, v, weight=dist_matrix[u][v])\n    \n    # Find Eulerian circuit\n    eulerian_circuit = list(nx.eulerian_circuit(T))\n    \n    # Convert to Hamiltonian circuit (TSP tour)\n    visited = set()\n    tour = []\n    for u, v in eulerian_circuit:\n        if u not in visited:\n            tour.append(u)\n            visited.add(u)\n    tour.append(tour[0])  # Return to start\n    \n    # Calculate tour length\n    tour_length = sum(dist_matrix[tour[i]][tour[i+1]] for i in range(len(tour)-1))\n    return tour_length\n\n# Example distance matrix (symmetric)\ndist_matrix = np.array([\n    [0, 2, 9, 10],\n    [2, 0, 6, 4],\n    [9, 6, 0, 3],\n    [10, 4, 3, 0]\n])\n\nprint(approximate_tsp(dist_matrix))",
      "options": {
        "A": "14",
        "B": "15",
        "C": "19",
        "D": "20"
      },
      "correct_answer": "C"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "topic": "CI/CD pipelines",
      "question": "Which of the following statements about CI/CD pipelines is NOT correct?",
      "options": {
        "A": "CI/CD pipelines can automate dependency vulnerability scanning",
        "B": "A well-designed CI/CD pipeline should make deployments to production fully automatic without human approval",
        "C": "CI/CD pipelines can enforce code quality standards through automated testing",
        "D": "Feature flags can be used alongside CI/CD pipelines to gradually roll out new features"
      },
      "correct_answer": "B"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "topic": "Asyncio framework",
      "question": "What will be the output of the following asyncio code?",
      "code_example": "import asyncio\n\nasync def wait_and_print(delay, message):\n    await asyncio.sleep(delay)\n    print(message, end=' ')\n    return message\n\nasync def main():\n    task1 = asyncio.create_task(wait_and_print(2, 'First'))\n    task2 = asyncio.create_task(wait_and_print(1, 'Second'))\n    task3 = asyncio.create_task(wait_and_print(3, 'Third'))\n    \n    results = []\n    for completed in asyncio.as_completed([task1, task2, task3]):\n        result = await completed\n        results.append(result)\n    \n    print('\\nOrder:', ' '.join(results))\n\nasyncio.run(main())",
      "options": {
        "A": "First Second Third\nOrder: First Second Third",
        "B": "Second First Third\nOrder: First Second Third",
        "C": "Second First Third\nOrder: Second First Third",
        "D": "First Second Third\nOrder: Second First Third"
      },
      "correct_answer": "C"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "topic": "Async/await syntax and event loops",
      "question": "What will happen when running the following code with asyncio?",
      "code_example": "import asyncio\nimport time\n\nasync def async_operation(sec):\n    print(f\"Starting {sec}s operation\")\n    await asyncio.sleep(sec)\n    print(f\"Finished {sec}s operation\")\n    return sec\n\ndef blocking_operation(sec):\n    print(f\"Starting {sec}s blocking operation\")\n    time.sleep(sec)\n    print(f\"Finished {sec}s blocking operation\")\n    return sec\n\nasync def main():\n    start = time.time()\n    \n    # Create tasks\n    task1 = asyncio.create_task(async_operation(3))\n    task2 = asyncio.create_task(async_operation(1))\n    \n    # Run a blocking operation\n    blocking_result = blocking_operation(2)\n    \n    # Wait for async tasks\n    results = await asyncio.gather(task1, task2)\n    \n    elapsed = time.time() - start\n    print(f\"Completed in {elapsed:.1f}s with results: {results} and {blocking_result}\")\n\nasyncio.run(main())",
      "options": {
        "A": "The code will complete in approximately 3 seconds",
        "B": "The code will complete in approximately 5 seconds",
        "C": "The code will complete in approximately 6 seconds",
        "D": "A runtime error will occur because blocking_operation blocks the event loop"
      },
      "correct_answer": "B"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "topic": "Minimum spanning tree (Prim's, Kruskal's)",
      "question": "What will be the output of the following code implementing Kruskal's algorithm for finding a minimum spanning tree?",
      "code_example": "class DisjointSet:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n    \n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def union(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        \n        if root_x == root_y:\n            return False\n        \n        if self.rank[root_x] < self.rank[root_y]:\n            self.parent[root_x] = root_y\n        elif self.rank[root_x] > self.rank[root_y]:\n            self.parent[root_y] = root_x\n        else:\n            self.parent[root_y] = root_x\n            self.rank[root_x] += 1\n        \n        return True\n\ndef kruskal_mst(n, edges):\n    # Sort edges by weight\n    edges.sort(key=lambda x: x[2])\n    \n    ds = DisjointSet(n)\n    mst_weight = 0\n    mst_edges = []\n    \n    for u, v, w in edges:\n        if ds.union(u, v):\n            mst_weight += w\n            mst_edges.append((u, v, w))\n    \n    return mst_weight, mst_edges\n\n# Example graph\nn = 4  # Vertices 0, 1, 2, 3\nedges = [\n    (0, 1, 10),\n    (0, 2, 6),\n    (0, 3, 5),\n    (1, 3, 15),\n    (2, 3, 4)\n]\n\nweight, mst = kruskal_mst(n, edges)\nprint(weight)",
      "options": {
        "A": "15",
        "B": "19",
        "C": "25",
        "D": "34"
      },
      "correct_answer": "A"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "topic": "Tries for prefix searching",
      "question": "What will be the output of the following trie implementation?",
      "code_example": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True\n    \n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_end_of_word\n    \n    def starts_with(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return True\n    \n    def count_words(self):\n        def dfs(node):\n            count = 0\n            if node.is_end_of_word:\n                count += 1\n            for child in node.children.values():\n                count += dfs(child)\n            return count\n        return dfs(self.root)\n\ntrie = Trie()\nwords = [\"apple\", \"app\", \"apricot\", \"banana\", \"bat\"]\nfor word in words:\n    trie.insert(word)\n\nresults = [\n    trie.search(\"apple\"),      # True\n    trie.search(\"app\"),        # True\n    trie.search(\"appl\"),       # False\n    trie.starts_with(\"app\"),   # True\n    trie.starts_with(\"ban\"),   # True\n    trie.starts_with(\"bat\"),   # True\n    trie.starts_with(\"apr\"),   # True\n    trie.count_words()         # 5\n]\n\nprint(sum(1 for r in results if r is True), trie.count_words())",
      "options": {
        "A": "5 5",
        "B": "6 5",
        "C": "7 5",
        "D": "8 5"
      },
      "correct_answer": "B"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "topic": "Ethical scraping practices",
      "question": "Which of the following Python scraping practices is considered most ethical?",
      "code_example": "# Option A\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_a(url):\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n    }\n    response = requests.get(url, headers=headers)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup\n\n# Option B\nimport requests\nimport time\nfrom bs4 import BeautifulSoup\n\ndef scrape_b(url):\n    headers = {\n        'User-Agent': 'MyScraperBot/1.0 (contact@example.com)'\n    }\n    response = requests.get(url, headers=headers)\n    time.sleep(2)  # Add delay between requests\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup\n\n# Option C\nimport requests\nimport time\nimport random\nfrom bs4 import BeautifulSoup\n\ndef scrape_c(url):\n    response = requests.get(url)\n    time.sleep(random.uniform(0.5, 1.5))  # Random delay\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup\n\n# Option D\nimport requests\nimport time\nfrom bs4 import BeautifulSoup\n\ndef scrape_d(url):\n    headers = {\n        'User-Agent': 'MyScraperBot/1.0 (contact@example.com)'\n    }\n    # Check robots.txt first\n    from urllib.robotparser import RobotFileParser\n    rp = RobotFileParser()\n    robots_url = url.split('/')[0] + '//' + url.split('/')[2] + '/robots.txt'\n    rp.set_url(robots_url)\n    rp.read()\n    \n    if rp.can_fetch(headers['User-Agent'], url):\n        response = requests.get(url, headers=headers)\n        time.sleep(3)  # Respectful delay\n        soup = BeautifulSoup(response.content, 'html.parser')\n        return soup\n    else:\n        return None",
      "options": {
        "A": "Option A - Using a browser User-Agent string",
        "B": "Option B - Using a descriptive User-Agent with contact info and delay",
        "C": "Option C - Using a random delay between requests",
        "D": "Option D - Checking robots.txt file before scraping"
      },
      "correct_answer": "D"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "topic": "CPython implementation details",
      "question": "What is the output of this code that utilizes CPython implementation details?",
      "code_example": "import sys\n\nls1 = [1, 2, 3]\nls2 = [1, 2, 3]\nls3 = ls1\n\ntup1 = (1, 2, 3)\ntup2 = (1, 2, 3)\n\nstr1 = \"hello\"\nstr2 = \"hello\"\n\nint1 = 257\nint2 = 257\n\nint3 = 42\nint4 = 42\n\nresults = [\n    ls1 is ls2,      # False - different list objects\n    ls1 is ls3,      # True - same list object\n    tup1 is tup2,    # ??\n    str1 is str2,    # ??\n    int1 is int2,    # ??\n    int3 is int4     # ??\n]\n\nprint(sum(results))",
      "options": {
        "A": "2",
        "B": "3",
        "C": "4",
        "D": "5"
      },
      "correct_answer": "C"
    }
  ]
}
