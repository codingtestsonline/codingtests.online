{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "3",
        "B": "5",
        "C": "9",
        "D": "Compilation error"
      },
      "correct_answer": "B",
      "code_example": "int x = 0;\nfor(int i = 0; i < 10; i++) {\n    x++;\n    if(x == 5)\n        break;\n}\nConsole.WriteLine(x);"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What is the purpose of the 'continue' statement in C#?",
      "options": {
        "A": "It terminates the entire loop execution",
        "B": "It skips the current iteration and continues with the next iteration",
        "C": "It jumps to a specific labeled statement elsewhere in the code",
        "D": "It exits the method in which it appears"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "0 1 2 3 4 5 6 7 8 9",
        "B": "0 1 2 4 5 6 7 8 9",
        "C": "0 1 2 4 5 6 7 8",
        "D": "0 1 2 5 6 7 8 9"
      },
      "correct_answer": "D",
      "code_example": "for (int i = 0; i < 10; i++) {\n    if (i >= 3 && i < 5) {\n        continue;\n    }\n    Console.Write(i + \" \");\n}"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Start Next End",
        "B": "Start",
        "C": "Start End",
        "D": "Start Next"
      },
      "correct_answer": "A",
      "code_example": "Console.Write(\"Start \");\ngoto Next;\nConsole.Write(\"Skip \");\nNext:\nConsole.Write(\"Next \");\nConsole.Write(\"End\");"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "Which method would you use to read the entire contents of a text file as a single string?",
      "options": {
        "A": "File.ReadLine()",
        "B": "File.ReadAllText()",
        "C": "File.OpenText()",
        "D": "File.ReadFromFile()"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "2 4 6 8 10",
        "B": "2 4 6 8",
        "C": "1 2 3 4 5",
        "D": "2 3 4 5"
      },
      "correct_answer": "A",
      "code_example": "int[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\nvar evenNumbers = numbers.Where(n => n % 2 == 0);\nforeach (var number in evenNumbers) {\n    Console.Write(number + \" \");\n}"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1 4 9 16 25",
        "B": "1 2 3 4 5",
        "C": "1, 4, 9, 16, 25",
        "D": "A list of Square objects"
      },
      "correct_answer": "A",
      "code_example": "int[] numbers = { 1, 2, 3, 4, 5 };\nvar squares = numbers.Select(n => n * n);\nforeach (var square in squares) {\n    Console.Write(square + \" \");\n}"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1 2 3 4 5",
        "B": "5 4 3 2 1",
        "C": "5, 4, 3, 2, 1",
        "D": "The query is executed but nothing is printed"
      },
      "correct_answer": "B",
      "code_example": "int[] numbers = { 5, 3, 1, 4, 2 };\nvar ordered = numbers.OrderByDescending(n => n);\nforeach (var number in ordered) {\n    Console.Write(number + \" \");\n}"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the result of the following logical expression: true && false || true",
      "options": {
        "A": "true",
        "B": "false",
        "C": "Compilation error due to operator precedence",
        "D": "Runtime error"
      },
      "correct_answer": "A"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "Which of the following statements about value types in C# is correct?",
      "options": {
        "A": "Value types are always allocated on the heap",
        "B": "Value types can be null by default",
        "C": "Value types include int, double, char, bool, and struct",
        "D": "Value types require garbage collection"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "0",
        "B": "null",
        "C": "10",
        "D": "Compilation error"
      },
      "correct_answer": "A",
      "code_example": "int? nullableInt = null;\nint result = nullableInt ?? 0;\nConsole.WriteLine(result);"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "Which of the following is TRUE about .NET 5+ compared to .NET Framework?",
      "options": {
        "A": ".NET 5+ is Windows-only like .NET Framework",
        "B": ".NET 5+ is a continuation of .NET Core and is cross-platform",
        "C": ".NET 5+ and .NET Framework are two names for the same platform",
        "D": ".NET 5+ supports only web applications, while .NET Framework supports all types"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "0 0 0 0 0",
        "B": "A runtime exception will be thrown",
        "C": "Undefined behavior, could be any values",
        "D": "0 1 2 3 4"
      },
      "correct_answer": "A",
      "code_example": "int[] numbers = new int[5];\nfor (int i = 0; i < numbers.Length; i++) {\n    Console.Write(numbers[i] + \" \");\n}"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "25",
        "B": "Compilation error",
        "C": "5",
        "D": "10"
      },
      "correct_answer": "A",
      "code_example": "int Calculate(int x, int y) {\n    int Square(int num) {\n        return num * num;\n    }\n    return Square(x) + y;\n}\n\nConsole.WriteLine(Calculate(5, 0));"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "You're an adult",
        "B": "You're a child",
        "C": "Invalid age",
        "D": "No output, as the condition doesn't match"
      },
      "correct_answer": "A",
      "code_example": "int age = 25;\n\nif (age < 0) {\n    Console.WriteLine(\"Invalid age\");\n}\nelse if (age < 18) {\n    Console.WriteLine(\"You're a child\");\n}\nelse {\n    Console.WriteLine(\"You're an adult\");\n}"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "Which of the following is a key benefit of cross-platform development in .NET?",
      "options": {
        "A": "It requires separate codebases for each platform",
        "B": "It allows the same code to run on Windows, Linux, and macOS",
        "C": "It can only run on mobile devices",
        "D": "It supports only Windows and Linux, but not macOS"
      },
      "correct_answer": "B"
    },
  {
      "id": 17,
      "difficulty": "medium",
      "question": "When using the Code-First approach in Entity Framework, what is the purpose of the DbContext class?",
      "options": {
        "A": "To define database tables as plain C# classes",
        "B": "To provide a session with the database for querying and saving data",
        "C": "To generate SQL scripts for database creation",
        "D": "To define relationships between database objects"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What is a key advantage of using LinkedList<T> over List<T> in C#?",
      "options": {
        "A": "LinkedList<T> provides faster random access to elements",
        "B": "LinkedList<T> offers faster insertions and removals in the middle of the collection",
        "C": "LinkedList<T> consumes less memory than List<T>",
        "D": "LinkedList<T> has better performance for sorting operations"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Button was clicked",
        "B": "Nothing will be printed to the console",
        "C": "Compilation error",
        "D": "Runtime exception"
      },
      "correct_answer": "A",
      "code_example": "public class ButtonClickEventArgs : EventArgs {\n    public string ButtonName { get; set; }\n}\n\npublic class Button {\n    public event EventHandler<ButtonClickEventArgs> Click;\n    \n    public void PerformClick() {\n        Click?.Invoke(this, new ButtonClickEventArgs { ButtonName = \"OK\" });\n    }\n}\n\nButton button = new Button();\nbutton.Click += (sender, e) => Console.WriteLine(\"Button was clicked\");\nbutton.PerformClick();"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "True",
        "B": "False",
        "C": "Compilation error",
        "D": "Runtime exception"
      },
      "correct_answer": "A",
      "code_example": "bool AreEqual<T>(T a, T b) where T : IComparable<T> {\n    return a.CompareTo(b) == 0;\n}\n\nConsole.WriteLine(AreEqual<int>(5, 5));"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "Which of the following statements about GC generations in .NET is correct?",
      "options": {
        "A": "Generation 0 is for long-lived objects",
        "B": "Generation 2 is for recently allocated objects",
        "C": "Objects that survive collection in Generation 0 are promoted to Generation 1",
        "D": "The garbage collector always collects all generations at once"
      },
      "correct_answer": "C"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following LINQ query with EF Core?",
      "options": {
        "A": "A SQL query is generated but not executed until the results are enumerated",
        "B": "All customers are immediately loaded into memory",
        "C": "Only customers with names starting with 'A' are loaded into memory",
        "D": "A compilation error as the Where clause is invalid"
      },
      "correct_answer": "A",
      "code_example": "var query = dbContext.Customers\n    .Where(c => c.Name.StartsWith(\"A\"))\n    .Select(c => new { c.Name, c.Email });"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "Which middleware component is responsible for routing HTTP requests to the appropriate controller actions in ASP.NET Core?",
      "options": {
        "A": "UseStaticFiles",
        "B": "UseAuthentication",
        "C": "UseRouting",
        "D": "UseEndpoints"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "ButtonClicked event triggered",
        "B": "No output as the event is not triggered",
        "C": "Compilation error due to incorrect event declaration",
        "D": "Runtime exception when raising the event"
      },
      "correct_answer": "B",
      "code_example": "public class Button {\n    public event EventHandler Clicked;\n\n    public void Click() {\n        Clicked?.Invoke(this, EventArgs.Empty);\n    }\n}\n\nButton button = new Button();\n// No event handlers attached\nbutton.Click();"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What is the primary purpose of calling GC.Collect() in C#?",
      "options": {
        "A": "To immediately release all unused objects",
        "B": "To force an immediate garbage collection",
        "C": "To prevent garbage collection from occurring",
        "D": "To increase application performance"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the main difference when executing the following code compared to a regular foreach loop?",
      "options": {
        "A": "The order of items processed is guaranteed to be sequential",
        "B": "Items will be processed on multiple threads in parallel",
        "C": "The loop will execute faster but still on a single thread",
        "D": "It prevents exceptions from occurring during iteration"
      },
      "correct_answer": "B",
      "code_example": "List<int> numbers = Enumerable.Range(1, 1000).ToList();\nParallel.ForEach(numbers, number => {\n    // Process each number\n    Console.WriteLine(number * number);\n});"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Base Init Derived",
        "B": "Derived Base Init",
        "C": "Derived Init Base",
        "D": "Base Derived Init"
      },
      "correct_answer": "A",
      "code_example": "public class Base {\n    public Base() {\n        Console.Write(\"Base \");\n    }\n}\n\npublic class Derived : Base {\n    public Derived() : base() {\n        Console.Write(\"Derived\");\n    }\n    \n    public void Init() {\n        Console.Write(\"Init \");\n    }\n}\n\nDerived d = new Derived();\nd.Init();"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "File is not closed properly",
        "B": "Connection opened Connection closed",
        "C": "Connection opened",
        "D": "Compilation error"
      },
      "correct_answer": "B",
      "code_example": "public class Connection {\n    public void Open() {\n        Console.Write(\"Connection opened \");\n    }\n    \n    public void Close() {\n        Console.Write(\"Connection closed\");\n    }\n}\n\nusing (Connection conn = new Connection()) {\n    conn.Open();\n} // conn.Close() will be called automatically"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What is the correct way to set up a mock for an interface method using Moq?",
      "options": {
        "A": "mock.Create<IService>().Setup(s => s.GetData()).Returns(\"test\");",
        "B": "var mock = new Mock<IService>(); mock.Setup(s => s.GetData()).Returns(\"test\");",
        "C": "var mock = Mock.Create(typeof(IService)); mock.When(s => s.GetData()).Return(\"test\");",
        "D": "IService mock = Substitute.For<IService>(); mock.GetData().Returns(\"test\");"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Compilation error because the property cannot be set outside the class",
        "B": "10",
        "C": "Runtime exception when trying to set the property",
        "D": "0"
      },
      "correct_answer": "A",
      "code_example": "public class User {\n    public int Id { get; private set; }\n}\n\nUser user = new User();\nuser.Id = 10; // Trying to set a private setter\nConsole.WriteLine(user.Id);"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "Which HTTP attribute would you use in ASP.NET Core to specify that an action method should handle HTTP GET requests?",
      "options": {
        "A": "[GetMethod]",
        "B": "[Route(\"GET\")]",
        "C": "[HttpGet]",
        "D": "[GetRequest]"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Base implementation",
        "B": "Derived implementation",
        "C": "Compilation error",
        "D": "Runtime exception"
      },
      "correct_answer": "B",
      "code_example": "public class Base {\n    public virtual void Display() {\n        Console.WriteLine(\"Base implementation\");\n    }\n}\n\npublic class Derived : Base {\n    public override void Display() {\n        Console.WriteLine(\"Derived implementation\");\n    }\n}\n\nBase obj = new Derived();\nobj.Display();"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which statement accurately describes the Adapter Pattern in C#?",
      "options": {
        "A": "It's used to create objects without exposing the instantiation logic to the client",
        "B": "It allows incompatible interfaces to work together by wrapping an instance of a class with a new interface",
        "C": "It provides a simplified interface to a larger body of code such as a class library",
        "D": "It ensures a class has only one instance and provides a global point of access to it"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses Activator.CreateInstance()?",
      "options": {
        "A": "System.ArgumentException: Cannot create an instance of an interface.",
        "B": "System.MissingMethodException: No parameterless constructor defined for this object.",
        "C": "MyClass: 42",
        "D": "A new instance of MyClass with default values"
      },
      "correct_answer": "C",
      "code_example": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var type = typeof(MyClass);\n        var instance = Activator.CreateInstance(type, 42) as MyClass;\n        Console.WriteLine($\"{instance}\");\n    }\n}\n\npublic class MyClass\n{\n    private int _value;\n    \n    public MyClass(int value)\n    {\n        _value = value;\n    }\n    \n    public override string ToString()\n    {\n        return $\"MyClass: {_value}\";\n    }\n}"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Which of the following is NOT a key characteristic of the Repository Pattern?",
      "options": {
        "A": "It acts as a collection of domain objects in memory",
        "B": "It mediates between the domain and data mapping layers",
        "C": "It directly exposes database connection strings to the business logic layer",
        "D": "It provides a way to achieve separation of concerns"
      },
      "correct_answer": "C"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses ExpandoObject?",
      "options": {
        "A": "Compilation error: Cannot implicitly convert type 'string' to 'int'",
        "B": "Compilation error: 'dynamic' does not contain a definition for 'Age'",
        "C": "Runtime error: 'object' does not contain a definition for 'Age'",
        "D": "John is 30"
      },
      "correct_answer": "D",
      "code_example": "using System;\nusing System.Dynamic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        dynamic person = new ExpandoObject();\n        \n        person.Name = \"John\";\n        person.Age = 30;\n        \n        string message = $\"{person.Name} is {person.Age}\";\n        Console.WriteLine(message);\n    }\n}"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "In ASP.NET Core role-based authentication, which of the following statements is true?",
      "options": {
        "A": "The [AllowAnonymous] attribute allows authenticated users to access a controller or action",
        "B": "Role-based authentication cannot be combined with policy-based authorization",
        "C": "The [Authorize(Roles = \"Admin, Manager\")] attribute requires a user to be in both roles to access the resource",
        "D": "The [Authorize(Roles = \"Admin,Manager\")] attribute allows access if a user is in either role"
      },
      "correct_answer": "D"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code related to string interning?",
      "options": {
        "A": "Different references, Different values",
        "B": "Same references, Same values",
        "C": "Different references, Same values",
        "D": "Same references, Different values"
      },
      "correct_answer": "C",
      "code_example": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        string s1 = \"Hello\";\n        string s2 = new StringBuilder().Append(\"H\").Append(\"ello\").ToString();\n        \n        bool sameReferences = ReferenceEquals(s1, s2);\n        bool sameValues = s1 == s2;\n        \n        Console.WriteLine(\n            sameReferences ? \"Same references\" : \"Different references\",\n            \", \",\n            sameValues ? \"Same values\" : \"Different values\"\n        );\n    }\n}"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which of the following is NOT a core concept in Apache Kafka?",
      "options": {
        "A": "Topics: Categories or feed names to which records are published",
        "B": "Brokers: Servers that store the published messages",
        "C": "Partitions: Divisions of a topic for parallel processing",
        "D": "Queues: FIFO data structures ensuring exactly-once delivery of messages"
      },
      "correct_answer": "D"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses MethodInfo.Invoke()?",
      "options": {
        "A": "Compilation error: Cannot find method 'PrivateMethod'",
        "B": "Runtime error: Method is not public",
        "C": "This is a private method with value: 42",
        "D": "null"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Reflection;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var instance = new MyClass();\n        var methodInfo = typeof(MyClass).GetMethod(\"PrivateMethod\", \n            BindingFlags.NonPublic | BindingFlags.Instance);\n            \n        methodInfo.Invoke(instance, new object[] { 42 });\n    }\n}\n\npublic class MyClass\n{\n    private void PrivateMethod(int value)\n    {\n        Console.WriteLine($\"This is a private method with value: {value}\");\n    }\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What is the primary purpose of the Mediator Pattern in C# applications?",
      "options": {
        "A": "To decouple classes that communicate with each other by channeling their communication through a mediator object",
        "B": "To provide a unified interface to a set of interfaces in a subsystem",
        "C": "To create a family of related objects without specifying their concrete classes",
        "D": "To separate the construction of a complex object from its representation"
      },
      "correct_answer": "A"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following is NOT a recommended practice when deploying .NET applications in Kubernetes?",
      "options": {
        "A": "Using health checks to monitor application status",
        "B": "Storing sensitive configuration directly in Deployment YAML files",
        "C": "Using Horizontal Pod Autoscaler for scaling based on CPU/memory usage",
        "D": "Implementing proper liveness and readiness probes"
      },
      "correct_answer": "B"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements a basic JWT authentication check?",
      "options": {
        "A": "Token is valid: True",
        "B": "Token is valid: False",
        "C": "SecurityTokenExpiredException: Token expired",
        "D": "InvalidOperationException: IDX10503: Signature validation failed"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing Microsoft.IdentityModel.Tokens;\nusing System.Text;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = Encoding.ASCII.GetBytes(\"ThisIsASecretKeyThatIsNotLongEnough\");\n        \n        // Expired token for testing\n        string token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.4Adcj3UFYzPUVaVF43FmMab6RlaQD8A9V8wFzzht-KQ\";\n        \n        try\n        {\n            tokenHandler.ValidateToken(token, new TokenValidationParameters\n            {\n                ValidateIssuerSigningKey = true,\n                IssuerSigningKey = new SymmetricSecurityKey(key),\n                ValidateIssuer = false,\n                ValidateAudience = false,\n                ClockSkew = TimeSpan.Zero\n            }, out _);\n            Console.WriteLine(\"Token is valid: True\");\n        }\n        catch\n        {\n            Console.WriteLine(\"Token is valid: False\");\n        }\n    }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be the output of the following code using Parallel.Invoke()?",
      "options": {
        "A": "Method2, Method1, Method3 (in that exact order)",
        "B": "Method1, Method2, Method3 (in that exact order)",
        "C": "The methods will execute in parallel, so the output order is non-deterministic",
        "D": "AggregateException containing all exceptions from the three methods"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Parallel.Invoke(\n            () => Method1(),\n            () => Method2(),\n            () => Method3()\n        );\n    }\n    \n    static void Method1()\n    {\n        Thread.Sleep(new Random().Next(1, 10));\n        Console.WriteLine(\"Method1\");\n    }\n    \n    static void Method2()\n    {\n        Thread.Sleep(new Random().Next(1, 10));\n        Console.WriteLine(\"Method2\");\n    }\n    \n    static void Method3()\n    {\n        Thread.Sleep(new Random().Next(1, 10));\n        Console.WriteLine(\"Method3\");\n    }\n}"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which OAuth 2.0 grant type is most appropriate for a server-side web application that needs to access resources on behalf of a user?",
      "options": {
        "A": "Implicit Grant",
        "B": "Client Credentials Grant",
        "C": "Authorization Code Grant",
        "D": "Resource Owner Password Credentials Grant"
      },
      "correct_answer": "C"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code related to stack vs heap allocation?",
      "options": {
        "A": "5, 10",
        "B": "10, 10",
        "C": "5, 5",
        "D": "10, 5"
      },
      "correct_answer": "B",
      "code_example": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        int valueType = 5;\n        MyClass referenceType = new MyClass { Value = 5 };\n        \n        ModifyValues(valueType, referenceType);\n        \n        Console.WriteLine($\"{valueType}, {referenceType.Value}\");\n    }\n    \n    static void ModifyValues(int value, MyClass reference)\n    {\n        value = 10;\n        reference.Value = 10;\n    }\n}\n\npublic class MyClass\n{\n    public int Value { get; set; }\n}"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "Which of the following statements about RabbitMQ is NOT true?",
      "options": {
        "A": "RabbitMQ implements the Advanced Message Queuing Protocol (AMQP)",
        "B": "Exchanges are responsible for routing messages to specific queues",
        "C": "RabbitMQ guarantees that messages will always be processed exactly once",
        "D": "RabbitMQ supports multiple messaging patterns including publish/subscribe and work queues"
      },
      "correct_answer": "C"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements IdentityServer4 Client Credentials flow?",
      "options": {
        "A": "Authenticated with scope: api1",
        "B": "Error: invalid_client",
        "C": "Error: invalid_scope",
        "D": "Error: unauthorized_client"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing IdentityModel.Client;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        // Create HTTP client\n        var client = new HttpClient();\n\n        // Discover endpoints from metadata\n        var disco = await client.GetDiscoveryDocumentAsync(\"https://demo.identityserver.io\");\n        if (disco.IsError)\n        {\n            Console.WriteLine($\"Error: {disco.Error}\");\n            return;\n        }\n\n        // Request token with client credentials\n        var tokenResponse = await client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n        {\n            Address = disco.TokenEndpoint,\n            ClientId = \"client\",\n            ClientSecret = \"secret\",\n            Scope = \"api1\"\n        });\n\n        if (tokenResponse.IsError)\n        {\n            Console.WriteLine($\"Error: {tokenResponse.Error}\");\n            return;\n        }\n\n        Console.WriteLine($\"Authenticated with scope: {tokenResponse.Scope}\");\n    }\n}"
    }
  ]
}
