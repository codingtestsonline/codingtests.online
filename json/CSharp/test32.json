{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "topic": "FirstOrDefault(), SingleOrDefault()",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new List<int>();\nvar result = numbers.FirstOrDefault();\nConsole.WriteLine(result);",
      "options": {
        "A": "null",
        "B": "0",
        "C": "An exception will be thrown",
        "D": "Empty string"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "topic": "Pattern matching in switch",
      "question": "What will be the output of the following code?",
      "code_example": "object value = 5;\nswitch (value)\n{\n    case int i when i > 10:\n        Console.WriteLine(\"Large number\");\n        break;\n    case int i:\n        Console.WriteLine(\"Number: \" + i);\n        break;\n    case string s:\n        Console.WriteLine(\"Text\");\n        break;\n    default:\n        Console.WriteLine(\"Unknown\");\n        break;\n}",
      "options": {
        "A": "Large number",
        "B": "Number: 5",
        "C": "Text",
        "D": "Unknown"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "topic": "Type inference",
      "question": "Which of the following is NOT a valid way to use type inference in C#?",
      "options": {
        "A": "var x = 10;",
        "B": "var s = \"Hello\";",
        "C": "var numbers = new List<int>();",
        "D": "var x;"
      },
      "correct_answer": "D"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "topic": "Logical operators",
      "question": "What will be the output of the following code?",
      "code_example": "bool a = true;\nbool b = false;\nConsole.WriteLine(a && b || !b);",
      "options": {
        "A": "True",
        "B": "False",
        "C": "Compilation error",
        "D": "Runtime exception"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "topic": "String Interpolation",
      "question": "What will be the output of the following code?",
      "code_example": "string name = \"Alice\";\nint age = 30;\nConsole.WriteLine($\"Name: {name}, Age: {age + 5}\");",
      "options": {
        "A": "Name: Alice, Age: 30 + 5",
        "B": "Name: Alice, Age: 35",
        "C": "Name: {name}, Age: {age + 5}",
        "D": "Compilation error"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "topic": "Function Overloading",
      "question": "Which of the following is NOT a valid function overload?",
      "options": {
        "A": "void Display(int x) and void Display(string s)",
        "B": "int Add(int a, int b) and double Add(double a, double b)",
        "C": "void Process(int x) and int Process(int x)",
        "D": "void Show(int x = 0) and void Show(int x = 0, string s = \"\")"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "topic": "Cross-platform development in .NET",
      "question": "Which of the following is NOT a benefit of .NET's cross-platform capabilities?",
      "options": {
        "A": "Code sharing between different platforms",
        "B": "Unified framework for desktop, web, and mobile",
        "C": "Automatic UI adaptation for different devices",
        "D": "Consistent development experience across platforms"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "topic": "Convert.ToInt32(), int.Parse(), int.TryParse()",
      "question": "What will be the output of the following code?",
      "code_example": "string input = \"abc\";\ntry\n{\n    int result = Convert.ToInt32(input);\n    Console.WriteLine(\"Success\");\n}\ncatch\n{\n    Console.WriteLine(\"Failed\");\n}",
      "options": {
        "A": "Success",
        "B": "Failed",
        "C": "0",
        "D": "Compilation error"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "topic": "ArrayList, List<T>",
      "question": "Which of the following statements about ArrayList and List<T> is false?",
      "options": {
        "A": "ArrayList can store elements of different types",
        "B": "List<T> is type-safe and generally performs better than ArrayList",
        "C": "ArrayList is thread-safe by default while List<T> is not",
        "D": "Both ArrayList and List<T> implement the ICollection interface"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "topic": "Multi-dimensional arrays",
      "question": "What will be the output of the following code?",
      "code_example": "int[,] matrix = new int[2, 3];\nConsole.WriteLine(matrix.Length);",
      "options": {
        "A": "2",
        "B": "3",
        "C": "5",
        "D": "6"
      },
      "correct_answer": "D"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "topic": "StreamReader, StreamWriter",
      "question": "Which of the following statements about StreamReader and StreamWriter is correct?",
      "options": {
        "A": "StreamReader and StreamWriter cannot be used with network streams",
        "B": "StreamReader.ReadToEnd() reads all characters from the current position to the end of the stream",
        "C": "StreamWriter automatically flushes the buffer after each write operation",
        "D": "StreamReader and StreamWriter can only operate on files with specific extensions"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "topic": "Arithmetic operators",
      "question": "What will be the output of the following code?",
      "code_example": "int a = 10;\nint b = 3;\nConsole.WriteLine(a / b + \" \" + a % b);",
      "options": {
        "A": "3.33 1",
        "B": "3 1",
        "C": "3.33 0.1",
        "D": "3 0"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "topic": "Custom exceptions",
      "question": "What is the output of the following code?",
      "code_example": "class InvalidValueException : Exception\n{\n    public InvalidValueException(string message) : base(message) { }\n}\n\ntry\n{\n    throw new InvalidValueException(\"Value is invalid\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(ex.Message);\n}",
      "options": {
        "A": "Exception of type 'InvalidValueException' was thrown",
        "B": "Value is invalid",
        "C": "System.InvalidValueException: Value is invalid",
        "D": "No output, the program crashes"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "topic": "File.ReadAllText(), File.WriteAllText()",
      "question": "Which of the following is true about File.ReadAllText() and File.WriteAllText()?",
      "options": {
        "A": "Both methods require a FileStream to be created first",
        "B": "File.ReadAllText() automatically determines the encoding of the file",
        "C": "File.WriteAllText() will throw an exception if the file already exists",
        "D": "Both methods provide a simple way to read/write an entire text file in a single operation"
      },
      "correct_answer": "D"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "topic": "Implicit vs. explicit casting",
      "question": "What will be the output of the following code?",
      "code_example": "double pi = 3.14159;\nint roundedPi = (int)pi;\nConsole.WriteLine(roundedPi);",
      "options": {
        "A": "3.14159",
        "B": "3",
        "C": "3.14",
        "D": "4"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "topic": "Constructor overloading",
      "question": "What will be the output of the following code?",
      "code_example": "class Person\n{\n    private string name;\n    private int age;\n\n    public Person() : this(\"Unknown\", 0) { }\n    \n    public Person(string name) : this(name, 0) { }\n    \n    public Person(string name, int age)\n    {\n        this.name = name;\n        this.age = age;\n    }\n    \n    public void PrintInfo()\n    {\n        Console.WriteLine($\"{name}, {age}\");\n    }\n}\n\nPerson p = new Person(\"Alice\");\np.PrintInfo();",
      "options": {
        "A": "Unknown, 0",
        "B": "Alice, 0",
        "C": ", 0",
        "D": "Alice, "
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "topic": "ConfigureAwait(false)",
      "question": "What is the primary purpose of using ConfigureAwait(false) in asynchronous methods?",
      "options": {
        "A": "To prevent the method from being awaited",
        "B": "To avoid context capture and potential deadlocks in UI applications",
        "C": "To make the async method run on a separate thread",
        "D": "To ensure that the continuation runs on the original SynchronizationContext"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "topic": "Method hiding using new",
      "question": "What will be the output of the following code?",
      "code_example": "class Base\n{\n    public virtual void Method1()\n    {\n        Console.WriteLine(\"Base.Method1\");\n    }\n    \n    public void Method2()\n    {\n        Console.WriteLine(\"Base.Method2\");\n    }\n}\n\nclass Derived : Base\n{\n    public override void Method1()\n    {\n        Console.WriteLine(\"Derived.Method1\");\n    }\n    \n    public new void Method2()\n    {\n        Console.WriteLine(\"Derived.Method2\");\n    }\n}\n\nBase b = new Derived();\nb.Method1();\nb.Method2();",
      "options": {
        "A": "Base.Method1\nBase.Method2",
        "B": "Derived.Method1\nDerived.Method2",
        "C": "Base.Method1\nDerived.Method2",
        "D": "Derived.Method1\nBase.Method2"
      },
      "correct_answer": "D"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "topic": "Multicast delegates",
      "question": "What will be the output of the following code?",
      "code_example": "delegate void MyDelegate(string message);\n\nstatic void Main()\n{\n    MyDelegate d1 = (msg) => Console.WriteLine($\"D1: {msg}\");\n    MyDelegate d2 = (msg) => Console.WriteLine($\"D2: {msg}\");\n    \n    MyDelegate combined = d1 + d2;\n    combined -= d1;\n    combined(\"Hello\");\n}",
      "options": {
        "A": "D1: Hello",
        "B": "D2: Hello",
        "C": "D1: Hello\nD2: Hello",
        "D": "No output"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "topic": "EventArgs pattern",
      "question": "What will be the output of the following code?",
      "code_example": "class CustomEventArgs : EventArgs\n{\n    public string Message { get; }\n    \n    public CustomEventArgs(string message)\n    {\n        Message = message;\n    }\n}\n\nclass Publisher\n{\n    public event EventHandler<CustomEventArgs> OnEvent;\n    \n    public void RaiseEvent()\n    {\n        OnEvent?.Invoke(this, new CustomEventArgs(\"Event raised\"));\n    }\n}\n\nclass Subscriber\n{\n    public void HandleEvent(object sender, CustomEventArgs e)\n    {\n        Console.WriteLine(e.Message);\n    }\n}\n\nPublisher publisher = new Publisher();\nSubscriber subscriber = new Subscriber();\npublisher.OnEvent += subscriber.HandleEvent;\npublisher.RaiseEvent();",
      "options": {
        "A": "Event raised",
        "B": "Object reference not set to an instance of an object.",
        "C": "No output",
        "D": "Compilation error"
      },
      "correct_answer": "A"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "topic": "HashSet<T> vs. Dictionary<TKey, TValue>",
      "question": "Which of the following statements about HashSet<T> and Dictionary<TKey, TValue> is false?",
      "options": {
        "A": "HashSet<T> typically provides faster lookup operations than List<T>",
        "B": "Dictionary<TKey, TValue> can have duplicate keys if they have different hash codes",
        "C": "HashSet<T> allows efficient testing for set operations like union and intersection",
        "D": "Both HashSet<T> and Dictionary<TKey, TValue> have O(1) average-case complexity for lookups"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "topic": "Lambda expressions",
      "question": "What will be the output of the following code?",
      "code_example": "List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar result = numbers.Where(x => x > 2).Select(x => x * 2).Sum();\nConsole.WriteLine(result);",
      "options": {
        "A": "30",
        "B": "24",
        "C": "12",
        "D": "15"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "topic": "Transient, Scoped, Singleton",
      "question": "In the context of Dependency Injection in ASP.NET Core, which of the following statements is false?",
      "options": {
        "A": "A Transient service is created each time it is requested",
        "B": "A Scoped service is created once per HTTP request",
        "C": "A Singleton service is created the first time it is requested",
        "D": "A Scoped service must always depend on a Transient service"
      },
      "correct_answer": "D"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "topic": "Property Injection",
      "question": "Which of the following correctly describes Property Injection in Dependency Injection?",
      "options": {
        "A": "The constructor accepts all dependencies as parameters",
        "B": "Dependencies are injected directly into public properties",
        "C": "Dependencies are provided through method parameters",
        "D": "The service locator pattern is used to resolve dependencies"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "topic": "Read-only properties",
      "question": "What will be the output of the following code?",
      "code_example": "class Person\n{\n    public string Name { get; }\n    public int Age { get; private set; }\n    \n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n    \n    public void HaveBirthday()\n    {\n        Age++;\n        // Name = \"Changed\"; // Uncomment to see what happens\n    }\n}\n\nvar person = new Person(\"Alice\", 30);\nperson.HaveBirthday();\nConsole.WriteLine($\"{person.Name}, {person.Age}\");",
      "options": {
        "A": "Alice, 30",
        "B": "Alice, 31",
        "C": "Changed, 31",
        "D": "Compilation error"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "topic": "Model binding",
      "question": "Which of the following is NOT a way to customize model binding in ASP.NET Core?",
      "options": {
        "A": "Using the [BindProperty] attribute",
        "B": "Using the [FromBody] attribute",
        "C": "Implementing a custom IModelBinder",
        "D": "Using the [AutoBind] attribute"
      },
      "correct_answer": "D"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "topic": "LINQ Queries with EF Core",
      "question": "What will be the result of the following LINQ query with Entity Framework Core?",
      "code_example": "var result = await context.Products\n    .Where(p => p.Price > 100)\n    .OrderBy(p => p.Name)\n    .Skip(5)\n    .Take(10)\n    .ToListAsync();",
      "options": {
        "A": "All products with Price > 100, ordered by Name",
        "B": "The first 10 products with Price > 100, ordered by Name",
        "C": "Products 6-15 with Price > 100, ordered by Name",
        "D": "The query is invalid and will throw an exception"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "topic": "virtual, override, sealed, abstract",
      "question": "What will be the output of the following code?",
      "code_example": "abstract class Base\n{\n    public virtual void Method1()\n    {\n        Console.WriteLine(\"Base.Method1\");\n    }\n    \n    public abstract void Method2();\n}\n\nclass Derived : Base\n{\n    public sealed override void Method1()\n    {\n        base.Method1();\n        Console.WriteLine(\"Derived.Method1\");\n    }\n    \n    public override void Method2()\n    {\n        Console.WriteLine(\"Derived.Method2\");\n    }\n}\n\nBase obj = new Derived();\nobj.Method1();\nobj.Method2();",
      "options": {
        "A": "Base.Method1\nDerived.Method2",
        "B": "Base.Method1\nDerived.Method1\nDerived.Method2",
        "C": "Derived.Method1\nDerived.Method2",
        "D": "Base.Method1\nBase.Method2"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "topic": "xUnit / NUnit Basics",
      "question": "Which of the following is NOT a valid assertion in xUnit?",
      "options": {
        "A": "Assert.Equal(expected, actual)",
        "B": "Assert.Contains(expectedSubstring, actualString)",
        "C": "Assert.IsTrue(condition)",
        "D": "Assert.Throws<Exception>(() => methodThatThrows())"
      },
      "correct_answer": "C"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "topic": "Base class initialization",
      "question": "What will be the output of the following code?",
      "code_example": "class Base\n{\n    protected string Value;\n    \n    public Base()\n    {\n        Value = \"Default\";\n        Initialize();\n    }\n    \n    public virtual void Initialize()\n    {\n        Console.WriteLine($\"Base: {Value}\");\n    }\n}\n\nclass Derived : Base\n{\n    public Derived()\n    {\n        Value = \"Changed\";\n    }\n    \n    public override void Initialize()\n    {\n        Console.WriteLine($\"Derived: {Value}\");\n    }\n}\n\nnew Derived();",
      "options": {
        "A": "Base: Default",
        "B": "Derived: Default",
        "C": "Base: Changed",
        "D": "Derived: Changed"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "topic": "Generic methods",
      "question": "What will be the output of the following code?",
      "code_example": "class Program\n{\n    static T First<T>(List<T> list, Func<T, bool> predicate)\n    {\n        foreach (var item in list)\n        {\n            if (predicate(item))\n                return item;\n        }\n        return default;\n    }\n    \n    static void Main()\n    {\n        var numbers = new List<int> { 1, 3, 5, 7, 2, 4, 6 };\n        var result = First(numbers, x => x % 2 == 0);\n        Console.WriteLine(result);\n    }\n}",
      "options": {
        "A": "1",
        "B": "2",
        "C": "0",
        "D": "null"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "topic": "Interface segregation principle",
      "question": "Which of the following best describes the Interface Segregation Principle?",
      "options": {
        "A": "High-level modules should not depend on low-level modules",
        "B": "A class should have only one reason to change",
        "C": "Clients should not be forced to depend on interfaces they do not use",
        "D": "Derived classes must be substitutable for their base classes"
      },
      "correct_answer": "C"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the key characteristic of a readonly struct in C#?",
      "options": {
        "A": "It can only be instantiated once per application",
        "B": "Its properties can only be set in the constructor",
        "C": "It is always allocated on the stack, never the heap",
        "D": "It cannot be used as a generic type parameter"
      },
      "correct_answer": "B",
      "code_example": "readonly struct Point\n{\n    public double X { get; }\n    public double Y { get; }\n    \n    public Point(double x, double y)\n    {\n        X = x;\n        Y = y;\n    }\n    \n    // This would cause a compiler error\n    // public void SetX(double x) { X = x; }\n}"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code involving ExpandoObject?",
      "options": {
        "A": "Property1: 100, Property2: Hello",
        "B": "Property1: 100",
        "C": "System.Dynamic.ExpandoObject",
        "D": "A runtime exception will be thrown"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Dynamic;\n\ndynamic expando = new ExpandoObject();\nexpando.Property1 = 100;\nexpando.Property2 = \"Hello\";\n\nConsole.WriteLine($\"Property1: {expando.Property1}, Property2: {expando.Property2}\");"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "When implementing a distributed cache using Redis in ASP.NET Core, which method is used to add the Redis distributed cache service to the service collection?",
      "options": {
        "A": "AddRedisDistributedCache",
        "B": "AddDistributedRedisCache",
        "C": "AddStackExchangeRedisCache",
        "D": "AddRedisCacheService"
      },
      "correct_answer": "C"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following code using Parallel.Invoke()?",
      "options": {
        "A": "Task 1, Task 2, Task 3 (always in this order)",
        "B": "The output order will be random for each execution",
        "C": "Task 3, Task 2, Task 1 (always in this order)",
        "D": "A runtime exception will be thrown"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nParallel.Invoke(\n    () => { Thread.Sleep(100); Console.WriteLine(\"Task 1\"); },\n    () => { Thread.Sleep(100); Console.WriteLine(\"Task 2\"); },\n    () => { Thread.Sleep(100); Console.WriteLine(\"Task 3\"); }\n);"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "Which of the following is NOT a characteristic of the Singleton design pattern in C#?",
      "options": {
        "A": "It ensures a class has only one instance",
        "B": "It provides a global point of access to that instance",
        "C": "It allows for inheritance and method overriding",
        "D": "It can be implemented using a private constructor"
      },
      "correct_answer": "C",
      "code_example": "public sealed class Singleton\n{\n    private static readonly Singleton _instance = new Singleton();\n    \n    // Private constructor prevents instantiation from other classes\n    private Singleton() { }\n    \n    public static Singleton Instance\n    {\n        get { return _instance; }\n    }\n    \n    public void DoSomething()\n    {\n        // Implementation here\n    }\n}"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "In a CQRS (Command Query Responsibility Segregation) architecture, what is the primary benefit of separating read and write operations?",
      "options": {
        "A": "It allows using different database technologies for reads and writes",
        "B": "It eliminates the need for a database entirely",
        "C": "It forces all operations to be synchronous",
        "D": "It prevents the use of dependency injection"
      },
      "correct_answer": "A"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What is the correct description of Apache Kafka in the context of .NET applications?",
      "options": {
        "A": "A relational database optimized for .NET",
        "B": "A distributed streaming platform for building real-time data pipelines",
        "C": "A built-in caching mechanism in ASP.NET Core",
        "D": "A testing framework for C# microservices"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code implementing the Factory Pattern?",
      "options": {
        "A": "Created ProductA",
        "B": "Created ProductB",
        "C": "The code will not compile",
        "D": "A runtime exception will be thrown"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\npublic interface IProduct\n{\n    void Display();\n}\n\npublic class ProductA : IProduct\n{\n    public ProductA()\n    {\n        Console.WriteLine(\"Created ProductA\");\n    }\n    \n    public void Display()\n    {\n        Console.WriteLine(\"Product A\");\n    }\n}\n\npublic class ProductB : IProduct\n{\n    public ProductB()\n    {\n        Console.WriteLine(\"Created ProductB\");\n    }\n    \n    public void Display()\n    {\n        Console.WriteLine(\"Product B\");\n    }\n}\n\npublic class ProductFactory\n{\n    public static IProduct CreateProduct(string type)\n    {\n        if (type == \"A\")\n            return new ProductA();\n        else\n            return new ProductB();\n    }\n}\n\n// Usage\nIProduct product = ProductFactory.CreateProduct(\"A\");"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code using Span<T>?",
      "options": {
        "A": "1, 2, 3, 4, 5",
        "B": "3, 4, 5",
        "C": "1, 2",
        "D": "The code will not compile"
      },
      "correct_answer": "B",
      "code_example": "using System;\n\nint[] array = { 1, 2, 3, 4, 5 };\nSpan<int> span = array;\nSpan<int> slice = span.Slice(2, 3);\n\nforeach (var item in slice)\n{\n    Console.Write($\"{item}, \");\n}"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "When implementing OAuth with IdentityServer4 in a .NET application, which grant type should be used for confidential clients such as server-side web applications?",
      "options": {
        "A": "Implicit Grant",
        "B": "Authorization Code Grant",
        "C": "Client Credentials Grant",
        "D": "Resource Owner Password Credentials Grant"
      },
      "correct_answer": "B"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code using MethodInfo.Invoke()?",
      "options": {
        "A": "10",
        "B": "15",
        "C": "25",
        "D": "A TargetParameterCountException will be thrown"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Reflection;\n\npublic class Calculator\n{\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n}\n\nCalculator calc = new Calculator();\nType type = calc.GetType();\nMethodInfo methodInfo = type.GetMethod(\"Add\");\n\nvar result = methodInfo.Invoke(calc, new object[] { 10, 15 });\nConsole.WriteLine(result);"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be the output of the following code demonstrating string interning?",
      "options": {
        "A": "True, False",
        "B": "True, True",
        "C": "False, False",
        "D": "False, True"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Text;\n\nstring s1 = \"Hello\";\nstring s2 = \"Hello\";\n\n// Create a string with the same content but not interned\nStringBuilder sb = new StringBuilder();\nsb.Append(\"He\");\nsb.Append(\"llo\");\nstring s3 = sb.ToString();\n\nConsole.WriteLine(Object.ReferenceEquals(s1, s2));\nConsole.WriteLine(Object.ReferenceEquals(s1, s3));"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "In JWT authentication for ASP.NET Core Web API, which middleware component is responsible for validating the JWT token in incoming requests?",
      "options": {
        "A": "app.UseJwtValidation()",
        "B": "app.UseAuthentication()",
        "C": "app.UseJwtBearerAuthentication()",
        "D": "app.UseTokenValidation()"
      },
      "correct_answer": "B"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code using CancellationToken?",
      "options": {
        "A": "Task started, Task completed",
        "B": "Task started, Task canceled",
        "C": "Task started, OperationCanceledException",
        "D": "The code will hang indefinitely"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nasync Task TestCancellationAsync()\n{\n    var cts = new CancellationTokenSource();\n    var token = cts.Token;\n    \n    var task = Task.Run(async () => {\n        Console.WriteLine(\"Task started\");\n        await Task.Delay(2000, token);\n        Console.WriteLine(\"Task completed\");\n    }, token);\n    \n    // Cancel the task before it completes\n    await Task.Delay(500);\n    cts.Cancel();\n    \n    try\n    {\n        await task;\n    }\n    catch (OperationCanceledException)\n    {\n        Console.WriteLine(\"OperationCanceledException\");\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"Exception: {ex.Message}\");\n    }\n    finally\n    {\n        Console.WriteLine(\"Task canceled\");\n    }\n}\n\n// Execute the test\nTestCancellationAsync().Wait();"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "Which HTTP Status Code should be returned when a resource has been permanently removed and the client should update its links?",
      "options": {
        "A": "204 No Content",
        "B": "410 Gone",
        "C": "404 Not Found",
        "D": "301 Moved Permanently"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code involving API versioning in ASP.NET Core?",
      "options": {
        "A": "The code will not compile",
        "B": "A runtime exception about conflicting routes",
        "C": "GetV1 will handle requests with api-version=1.0, GetV2 will handle requests with api-version=2.0",
        "D": "Both actions will handle all requests regardless of version"
      },
      "correct_answer": "C",
      "code_example": "using Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route(\"api/[controller]\")]\n[ApiVersion(\"1.0\")]\n[ApiVersion(\"2.0\")]\npublic class ValuesController : ControllerBase\n{\n    [HttpGet]\n    [MapToApiVersion(\"1.0\")]\n    public IActionResult GetV1()\n    {\n        return Ok(\"Version 1.0\");\n    }\n    \n    [HttpGet]\n    [MapToApiVersion(\"2.0\")]\n    public IActionResult GetV2()\n    {\n        return Ok(\"Version 2.0\");\n    }\n}"
    }
  ]
}
