{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What happens when a 'break' statement is encountered in a loop?",
      "options": {
        "A": "It terminates the program",
        "B": "It skips the current iteration and continues with the next one",
        "C": "It terminates the loop and continues execution after the loop",
        "D": "It throws a BreakException"
      },
      "correct_answer": "C"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "try {\n    throw new Exception(\"An error occurred\");\n}\ncatch (Exception ex) {\n    Console.WriteLine(ex.Message);\n}\nfinally {\n    Console.WriteLine(\"Cleanup code\");\n}\n",
      "options": {
        "A": "Cleanup code",
        "B": "An error occurred",
        "C": "An error occurred\nCleanup code",
        "D": "The code will crash without output"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What is the difference between 'continue' and 'break' in a loop?",
      "options": {
        "A": "There is no difference, they can be used interchangeably",
        "B": "'continue' skips the current iteration while 'break' exits the loop entirely",
        "C": "'continue' exits the loop while 'break' skips to the next iteration",
        "D": "'continue' and 'break' both exit the loop but 'continue' executes the finally block first"
      },
      "correct_answer": "B"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string text = \"Hello, World!\";\nstring modified = text.Replace(\"o\", \"X\");\nConsole.WriteLine(modified);",
      "options": {
        "A": "Hello, World!",
        "B": "HellX, WXrld!",
        "C": "Hellx, Wxrld!",
        "D": "X, World!"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What is the purpose of the 'this' keyword in C#?",
      "options": {
        "A": "It refers to the parent class",
        "B": "It refers to the current instance of the class",
        "C": "It refers to a static member of the class",
        "D": "It refers to the namespace containing the class"
      },
      "correct_answer": "B"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new List<int> { 1, 2, 3, 4, 5 };\nforeach (var number in numbers) {\n    if (number % 2 == 0) {\n        continue;\n    }\n    Console.Write(number + \" \");\n}",
      "options": {
        "A": "1 2 3 4 5",
        "B": "2 4",
        "C": "1 3 5",
        "D": "No output"
      },
      "correct_answer": "C"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string input = \"42xyz\";\ntry {\n    int number = int.Parse(input);\n    Console.WriteLine(\"Parsed: \" + number);\n}\ncatch {\n    Console.WriteLine(\"Could not parse\");\n}",
      "options": {
        "A": "Parsed: 42",
        "B": "Parsed: 42xyz",
        "C": "Could not parse",
        "D": "The code will crash with FormatException"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string input = \"42\";\nbool success = int.TryParse(input, out int result);\nConsole.WriteLine($\"Success: {success}, Result: {result}\");",
      "options": {
        "A": "Success: True, Result: 42",
        "B": "Success: False, Result: 0",
        "C": "Success: True, Result: 0",
        "D": "The code will throw an exception"
      },
      "correct_answer": "A"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What is type inference in C#?",
      "options": {
        "A": "A feature that allows classes to inherit from multiple base classes",
        "B": "A feature that allows the compiler to determine the type of a variable based on the assigned value",
        "C": "A feature that converts a value type to a reference type",
        "D": "A feature that allows a class to implement multiple interfaces"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int a = 5;\nint b = 3;\nConsole.WriteLine(a & b);\nConsole.WriteLine(a | b);\nConsole.WriteLine(a ^ b);",
      "options": {
        "A": "1\n7\n6",
        "B": "5\n3\n2",
        "C": "15\n8\n2",
        "D": "0\n8\n6"
      },
      "correct_answer": "A"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What happens when you use the null-coalescing operator (??) in C#?",
      "options": {
        "A": "It returns the left-hand operand if it's not null, otherwise it returns the right-hand operand",
        "B": "It returns the right-hand operand if it's not null, otherwise it returns the left-hand operand",
        "C": "It returns null if either operand is null",
        "D": "It throws a NullReferenceException if the left-hand operand is null"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string message = null;\nstring result = message ?? \"Default message\";\nConsole.WriteLine(result);",
      "options": {
        "A": "null",
        "B": "Default message",
        "C": "An empty string",
        "D": "NullReferenceException will be thrown"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "How would you create a custom exception class in C#?",
      "options": {
        "A": "public class MyException implements Exception { }",
        "B": "public class MyException : Exception { }",
        "C": "public class MyException extends Exception { }",
        "D": "public exception MyException { }"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string text = \"Hello, World!\";\nint index = text.IndexOf(\"o\");\nConsole.WriteLine(index);",
      "options": {
        "A": "-1",
        "B": "0",
        "C": "4",
        "D": "7"
      },
      "correct_answer": "C"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What is the difference between ArrayList and List<T> in C#?",
      "options": {
        "A": "ArrayList is faster than List<T>",
        "B": "List<T> is type-safe while ArrayList is not",
        "C": "ArrayList supports generics while List<T> does not",
        "D": "There is no difference, they are just different names for the same class"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the result of the following code?",
      "code_example": "string original = \"Hello\";\nstring modified = original;\nmodified += \" World\";\nConsole.WriteLine(original);",
      "options": {
        "A": "Hello World",
        "B": "Hello",
        "C": "World",
        "D": "An empty string"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Base {\n    public Base() {\n        Console.Write(\"Base \");\n    }\n}\n\nclass Derived : Base {\n    public Derived() : base() {\n        Console.Write(\"Derived \");\n    }\n}\n\nDerived obj = new Derived();",
      "options": {
        "A": "Derived Base",
        "B": "Base",
        "C": "Derived",
        "D": "Base Derived"
      },
      "correct_answer": "D"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What is the role of the 'virtual' keyword in C#?",
      "options": {
        "A": "It marks a method that must be implemented by all derived classes",
        "B": "It marks a method that cannot be overridden in derived classes",
        "C": "It marks a method that can be overridden in derived classes",
        "D": "It marks a method as asynchronous"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "delegate void MyDelegate(string message);\n\nMyDelegate del = delegate(string message) {\n    Console.WriteLine(\"Anonymous: \" + message);\n};\n\ndel(\"Hello\");",
      "options": {
        "A": "delegate: Hello",
        "B": "Anonymous: Hello",
        "C": "Hello",
        "D": "The code will not compile"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What is the main purpose of the 'abstract' keyword when applied to a class in C#?",
      "options": {
        "A": "It prevents the class from being inherited",
        "B": "It allows the class to be instantiated without a constructor",
        "C": "It indicates that the class cannot be instantiated directly and may contain abstract methods",
        "D": "It makes all methods in the class virtual by default"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "ConcurrentDictionary<string, int> dict = new ConcurrentDictionary<string, int>();\ndict.TryAdd(\"one\", 1);\ndict.TryAdd(\"one\", 10);\nConsole.WriteLine(dict[\"one\"]);",
      "options": {
        "A": "1",
        "B": "10",
        "C": "11",
        "D": "KeyNotFoundException will be thrown"
      },
      "correct_answer": "A"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What is Property Injection in the context of dependency injection?",
      "options": {
        "A": "Dependencies are provided through a class constructor",
        "B": "Dependencies are provided through public properties",
        "C": "Dependencies are provided through method parameters",
        "D": "Dependencies are resolved automatically at runtime"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Parent {\n    public virtual void Display() {\n        Console.WriteLine(\"Parent\");\n    }\n}\n\nclass Child : Parent {\n    public sealed override void Display() {\n        Console.WriteLine(\"Child\");\n    }\n}\n\nParent obj = new Child();\nobj.Display();",
      "options": {
        "A": "Parent",
        "B": "Child",
        "C": "Both Parent and Child",
        "D": "Compilation error"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What is the purpose of the EventArgs pattern in C#?",
      "options": {
        "A": "To provide a standard way to pass data to event handlers",
        "B": "To prevent event handlers from being garbage collected",
        "C": "To ensure events are thread-safe",
        "D": "To limit the number of subscribers to an event"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Program {\n    public delegate void MyDelegate();\n    \n    static void Method1() { Console.Write(\"A\"); }\n    static void Method2() { Console.Write(\"B\"); }\n    \n    static void Main() {\n        MyDelegate del = Method1;\n        del += Method2;\n        del += Method1;\n        del();\n    }\n}",
      "options": {
        "A": "A",
        "B": "ABA",
        "C": "AB",
        "D": "BA"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What is the difference between Dispose() and Finalize() methods?",
      "options": {
        "A": "Dispose() is called automatically by the garbage collector while Finalize() must be called explicitly",
        "B": "Dispose() must be called explicitly while Finalize() is called automatically by the garbage collector",
        "C": "Dispose() releases managed resources while Finalize() releases unmanaged resources",
        "D": "There is no difference, they are aliases for the same method"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Program {\n    class Resource : IDisposable {\n        public Resource() { Console.Write(\"Create \"); }\n        public void Dispose() { Console.Write(\"Dispose \"); }\n    }\n    \n    static void Main() {\n        using (var resource = new Resource()) {\n            Console.Write(\"Use \");\n        }\n    }\n}",
      "options": {
        "A": "Create Dispose Use",
        "B": "Create Use",
        "C": "Create Use Dispose",
        "D": "Use Dispose"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "In Test-Driven Development (TDD), what is the correct order of steps?",
      "options": {
        "A": "Write code, Write test, Refactor",
        "B": "Write test, Write code, Refactor",
        "C": "Refactor, Write test, Write code",
        "D": "Write code, Refactor, Write test"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What does the following code do?",
      "code_example": "var mock = new Mock<IUserService>();\nmock.Setup(m => m.GetUserById(It.IsAny<int>()))\n    .Returns(new User { Id = 1, Name = \"John\" });",
      "options": {
        "A": "Creates a real instance of IUserService",
        "B": "Sets up a mock object that will return a User object when GetUserById is called with any integer parameter",
        "C": "Verifies that GetUserById was called with parameter 1",
        "D": "Creates a mock that throws an exception when GetUserById is called"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following LINQ query?",
      "code_example": "var numbers = new[] { 1, 2, 3, 4, 5 };\nvar result = numbers.Where(n => n > 2)\n                  .Select(n => n * n)\n                  .OrderByDescending(n => n);\n\nforeach (var item in result) {\n    Console.Write(item + \" \");\n}",
      "options": {
        "A": "1 4 9 16 25",
        "B": "25 16 9",
        "C": "9 16 25",
        "D": "3 4 5"
      },
      "correct_answer": "C"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What is the purpose of the GC.Collect() method in C#?",
      "options": {
        "A": "It forces the garbage collector to perform an immediate collection of unused objects",
        "B": "It prevents the garbage collector from collecting objects",
        "C": "It registers objects to be collected by the garbage collector",
        "D": "It reports how many objects have been collected by the garbage collector"
      },
      "correct_answer": "A"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Program {\n    class User {\n        public string Name { get; private set; }\n        \n        public User(string name) {\n            Name = name;\n        }\n    }\n    \n    static void Main() {\n        var user = new User(\"John\");\n        // user.Name = \"Jane\"; // This line would cause a compilation error\n        Console.WriteLine(user.Name);\n    }\n}",
      "options": {
        "A": "John",
        "B": "Jane",
        "C": "null",
        "D": "The code will not compile"
      },
      "correct_answer": "A"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which of the following correctly describes the Command Query Responsibility Segregation (CQRS) pattern?",
      "options": {
        "A": "A pattern that combines read and write operations into a single model to simplify the application architecture",
        "B": "A pattern that separates read and write operations into different models to optimize performance and scalability",
        "C": "A pattern that uses a single database for both read and write operations to ensure consistency",
        "D": "A pattern that requires event sourcing to be implemented alongside it to work effectively"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code using CancellationToken?",
      "options": {
        "A": "Starting task...\nTask was canceled\nTask completed",
        "B": "Starting task...\nTask was canceled",
        "C": "Starting task...\nOperation in progress\nTask was canceled",
        "D": "Starting task...\nOperation in progress\nTask completed"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        var cts = new CancellationTokenSource();\n        var token = cts.Token;\n\n        Console.WriteLine(\"Starting task...\");\n        var task = Task.Run(async () =>\n        {\n            try\n            {\n                Console.WriteLine(\"Operation in progress\");\n                await Task.Delay(5000, token);\n                Console.WriteLine(\"Operation completed\");\n            }\n            catch (OperationCanceledException)\n            {\n                Console.WriteLine(\"Task was canceled\");\n                throw;\n            }\n        }, token);\n\n        await Task.Delay(1000);\n        cts.Cancel();\n\n        try\n        {\n            await task;\n            Console.WriteLine(\"Task completed\");\n        }\n        catch (OperationCanceledException)\n        {\n            // We caught the exception here, so it won't be output\n        }\n    }\n}"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "In a Dockerfile for a .NET 8 application, what does the following instruction do?",
      "options": {
        "A": "Creates a new image based on the microsoft/dotnet:8.0 image",
        "B": "Copies the published files from the host to the container",
        "C": "Builds the application inside the container",
        "D": "Sets up a multi-stage build where the first stage compiles the code and the second stage runs it"
      },
      "correct_answer": "D",
      "code_example": "FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\nCOPY [\"MyApp.csproj\", \"./\"]\nRUN dotnet restore \"./MyApp.csproj\"\nCOPY . .\nRUN dotnet publish \"MyApp.csproj\" -c Release -o /app/publish\n\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final\nWORKDIR /app\nCOPY --from=build /app/publish .\nENTRYPOINT [\"dotnet\", \"MyApp.dll\"]"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following code implementing the Repository Pattern?",
      "options": {
        "A": "Saving user: John\nRetrieving user: 1\nUser not found",
        "B": "Saving user: John\nRetrieving user: 1\nUser: John",
        "C": "Adding user to database: John\nGetting user from database: 1\nUser: John",
        "D": "Adding user to database: John\nGetting user from database: 1\nUser not found"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Collections.Generic;\n\npublic class User\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic interface IUserRepository\n{\n    User GetById(int id);\n    void Save(User user);\n}\n\npublic class UserRepository : IUserRepository\n{\n    private readonly Dictionary<int, User> _users = new Dictionary<int, User>();\n\n    public User GetById(int id)\n    {\n        Console.WriteLine($\"Retrieving user: {id}\");\n        return _users.TryGetValue(id, out var user) ? user : null;\n    }\n\n    public void Save(User user)\n    {\n        Console.WriteLine($\"Saving user: {user.Name}\");\n        _users[user.Id] = user;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        IUserRepository repository = new UserRepository();\n        \n        var user = new User { Id = 1, Name = \"John\" };\n        repository.Save(user);\n        \n        var retrievedUser = repository.GetById(1);\n        Console.WriteLine(retrievedUser != null ? $\"User: {retrievedUser.Name}\" : \"User not found\");\n    }\n}"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "Which of the following statements about Apache Kafka is NOT correct?",
      "options": {
        "A": "Kafka uses a pull-based model where consumers request messages from brokers",
        "B": "Kafka topics are always partitioned and replicated across multiple brokers",
        "C": "Kafka guarantees message ordering within a single partition only",
        "D": "Kafka requires ZooKeeper for its operation in all versions, including the latest ones"
      },
      "correct_answer": "D"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code implementing the Observer Pattern?",
      "options": {
        "A": "Subject: State changed to 42\nObserver 1 received update: 42\nObserver 2 received update: 42",
        "B": "Subject: State changed to 42\nObserver 1 received update: 0\nObserver 2 received update: 0",
        "C": "Observer 1 received update: 42\nObserver 2 received update: 42\nSubject: State changed to 42",
        "D": "Observer 1 received update: 42\nObserver 2 received update: 42"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Collections.Generic;\n\npublic interface IObserver\n{\n    void Update(int state);\n}\n\npublic interface ISubject\n{\n    void Attach(IObserver observer);\n    void Detach(IObserver observer);\n    void Notify();\n}\n\npublic class ConcreteSubject : ISubject\n{\n    private List<IObserver> _observers = new List<IObserver>();\n    private int _state;\n\n    public int State\n    {\n        get => _state;\n        set\n        {\n            _state = value;\n            Console.WriteLine($\"Subject: State changed to {_state}\");\n            Notify();\n        }\n    }\n\n    public void Attach(IObserver observer)\n    {\n        _observers.Add(observer);\n    }\n\n    public void Detach(IObserver observer)\n    {\n        _observers.Remove(observer);\n    }\n\n    public void Notify()\n    {\n        foreach (var observer in _observers)\n        {\n            observer.Update(_state);\n        }\n    }\n}\n\npublic class ConcreteObserver : IObserver\n{\n    private string _name;\n\n    public ConcreteObserver(string name)\n    {\n        _name = name;\n    }\n\n    public void Update(int state)\n    {\n        Console.WriteLine($\"{_name} received update: {state}\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var subject = new ConcreteSubject();\n        \n        var observer1 = new ConcreteObserver(\"Observer 1\");\n        var observer2 = new ConcreteObserver(\"Observer 2\");\n        \n        subject.Attach(observer1);\n        subject.Attach(observer2);\n        \n        subject.State = 42;\n    }\n}"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be the output of the following code using MethodInfo.Invoke()?",
      "options": {
        "A": "Hello, Reflection!",
        "B": "Calling method with parameter: World",
        "C": "Calling method with parameter: World\nHello, World!",
        "D": "TargetParameterCountException: Parameter count mismatch"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Reflection;\n\npublic class MethodInvoker\n{\n    public void SayHello(string name)\n    {\n        Console.WriteLine($\"Hello, {name}!\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var invoker = new MethodInvoker();\n        \n        Type type = invoker.GetType();\n        MethodInfo methodInfo = type.GetMethod(\"SayHello\");\n        \n        string parameter = \"World\";\n        Console.WriteLine($\"Calling method with parameter: {parameter}\");\n        methodInfo.Invoke(invoker, new object[] { parameter });\n    }\n}"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "Which of the following correctly configures CORS in ASP.NET Core to allow requests only from a specific origin with credentials?",
      "options": {
        "A": "app.UseCors(builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader().AllowCredentials());",
        "B": "app.UseCors(builder => builder.WithOrigins(\"https://example.com\").AllowAnyMethod().AllowAnyHeader().AllowCredentials());",
        "C": "app.UseCors(builder => builder.SetIsOriginAllowed(_ => true).AllowAnyMethod().AllowAnyHeader().AllowCredentials());",
        "D": "app.UseCors(\"CorsPolicy\");"
      },
      "correct_answer": "B",
      "code_example": "public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseRouting();\n\n    // Option A\n    // app.UseCors(builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader().AllowCredentials());\n\n    // Option B\n    app.UseCors(builder => builder.WithOrigins(\"https://example.com\").AllowAnyMethod().AllowAnyHeader().AllowCredentials());\n\n    // Option C\n    // app.UseCors(builder => builder.SetIsOriginAllowed(_ => true).AllowAnyMethod().AllowAnyHeader().AllowCredentials());\n\n    // Option D\n    // app.UseCors(\"CorsPolicy\");\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllers();\n    });\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "Which of the following correctly describes an appropriate use case for a clustered index in SQL Server?",
      "options": {
        "A": "A table that is primarily used for append-only operations where the primary key is a GUID",
        "B": "A lookup table that is frequently queried by multiple different columns",
        "C": "A large table that is frequently queried based on a date range column",
        "D": "A table that requires many non-clustered indexes for optimal query performance"
      },
      "correct_answer": "C"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of the following code using readonly struct?",
      "options": {
        "A": "X: 10, Y: 20\nX: 10, Y: 20",
        "B": "X: 10, Y: 20\nX: 5, Y: 15",
        "C": "X: 10, Y: 20\nX: 5, Y: 15\nCompile error: Cannot modify readonly member",
        "D": "Compile error: Cannot assign to members of readonly struct"
      },
      "correct_answer": "D",
      "code_example": "using System;\n\npublic readonly struct Point\n{\n    public int X { get; }\n    public int Y { get; }\n\n    public Point(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n\n    public override string ToString() => $\"X: {X}, Y: {Y}\";\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var point = new Point(10, 20);\n        Console.WriteLine(point);\n        \n        // The following will cause a compile error\n        point.X = 5;\n        point.Y = 15;\n        \n        Console.WriteLine(point);\n    }\n}"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code using the dynamic type?",
      "options": {
        "A": "Adding numbers: 15\nAdding strings: 1020",
        "B": "Adding numbers: 15\nAdding strings: 10 + 20",
        "C": "Adding numbers: 15\nAdding strings: 30",
        "D": "Runtime error: Cannot perform add operation on string and int"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\npublic class Calculator\n{\n    public dynamic Add(dynamic a, dynamic b)\n    {\n        return a + b;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var calculator = new Calculator();\n        \n        // Numeric addition\n        int a = 10;\n        int b = 5;\n        dynamic result1 = calculator.Add(a, b);\n        Console.WriteLine($\"Adding numbers: {result1}\");\n        \n        // String concatenation\n        string s1 = \"10\";\n        string s2 = \"20\";\n        dynamic result2 = calculator.Add(s1, s2);\n        Console.WriteLine($\"Adding strings: {result2}\");\n    }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What is the key difference between using Span<T> and Memory<T> in .NET?",
      "options": {
        "A": "Span<T> can be stored as a field in a class while Memory<T> cannot",
        "B": "Memory<T> can be stored as a field in a class while Span<T> cannot",
        "C": "Span<T> can be used with asynchronous code while Memory<T> cannot",
        "D": "Memory<T> always allocates heap memory while Span<T> is always stack-allocated"
      },
      "correct_answer": "B"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which of the following code examples correctly uses ArrayPool<T> to improve memory allocation efficiency?",
      "options": {
        "A": "var bytes = ArrayPool<byte>.Shared.Rent(1024); try { ProcessData(bytes); } finally { ArrayPool<byte>.Shared.Return(bytes); }",
        "B": "var bytes = ArrayPool<byte>.Shared.Rent(1024); ProcessData(bytes); ArrayPool<byte>.Shared.Return(bytes);",
        "C": "var bytes = ArrayPool<byte>.Get(1024); try { ProcessData(bytes); } finally { ArrayPool<byte>.Return(bytes); }",
        "D": "var bytes = new byte[1024]; ArrayPool<byte>.Shared.Add(bytes); ProcessData(bytes); ArrayPool<byte>.Shared.Remove(bytes);"
      },
      "correct_answer": "A"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "When implementing a distributed cache using Redis in ASP.NET Core, which of the following statements is NOT correct?",
      "options": {
        "A": "Redis can be used for both caching and as a message broker in the same application",
        "B": "Redis distributed cache is thread-safe and can be accessed from multiple threads simultaneously",
        "C": "Redis always guarantees strong consistency regardless of the deployment topology",
        "D": "Redis can store complex objects by serializing them to either JSON or binary formats"
      },
      "correct_answer": "C"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code using SignalR?",
      "options": {
        "A": "Connected!\nMessage from server: Hello, client!",
        "B": "Connected!\nReceived message: Hello, server!",
        "C": "Connection successful\nReceived message: Hello, client!",
        "D": "Error: Cannot connect to SignalR hub"
      },
      "correct_answer": "C",
      "code_example": "// Server-side HubClass:\npublic class ChatHub : Hub\n{\n    public override async Task OnConnectedAsync()\n    {\n        await Clients.Caller.SendAsync(\"ReceiveMessage\", \"Connection successful\");\n        await base.OnConnectedAsync();\n    }\n\n    public async Task SendMessage(string message)\n    {\n        await Clients.Caller.SendAsync(\"ReceiveMessage\", \"Hello, client!\");\n    }\n}\n\n// Client-side JavaScript:\n/*\nconst connection = new signalR.HubConnectionBuilder()\n    .withUrl(\"/chatHub\")\n    .build();\n\nconnection.on(\"ReceiveMessage\", (message) => {\n    console.log(\"Received message: \" + message);\n});\n\nconnection.start().then(() => {\n    connection.invoke(\"SendMessage\", \"Hello, server!\");\n}).catch(err => console.error(err));\n*/"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code using P/Invoke (DllImport)?",
      "options": {
        "A": "Current tick count: [some positive integer]",
        "B": "Exception: EntryPointNotFoundException",
        "C": "Exception: DllNotFoundException",
        "D": "Exception: AccessViolationException"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Runtime.InteropServices;\n\npublic class Program\n{\n    [DllImport(\"kernel32.dll\")]\n    private static extern uint GetTickCount();\n\n    public static void Main()\n    {\n        uint tickCount = GetTickCount();\n        Console.WriteLine($\"Current tick count: {tickCount}\");\n    }\n}"
    }
  ]
}
