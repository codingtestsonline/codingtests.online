{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "topic": "Logical operators (&&, ||, !)",
      "question": "What will be the output of the following code?",
      "code_example": "bool a = true, b = false;\nConsole.WriteLine(a && b || !b);",
      "options": {
        "A": "True",
        "B": "False",
        "C": "Compiler error",
        "D": "Runtime exception"
      },
      "correct_answer": "A"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "topic": "var vs dynamic",
      "question": "What is the key difference between 'var' and 'dynamic' in C#?",
      "options": {
        "A": "They are identical in functionality",
        "B": "'var' is resolved at compile time, 'dynamic' at runtime",
        "C": "'dynamic' is faster than 'var'",
        "D": "'var' can only be used with primitive types"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "topic": "Arithmetic operators (+, -, *, /, %)",
      "question": "What will be the output of the following code?",
      "code_example": "int x = 10;\nint y = 3;\nConsole.WriteLine($\"{x / y} {x % y}\");",
      "options": {
        "A": "3 1",
        "B": "3.33 1",
        "C": "3 0",
        "D": "3.33 0"
      },
      "correct_answer": "A"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "topic": "Immutable nature of string",
      "question": "What will be the output of the following code?",
      "code_example": "string str = \"Hello\";\nstr.Replace('H', 'J');\nConsole.WriteLine(str);",
      "options": {
        "A": "Hello",
        "B": "Jello",
        "C": "Compiler error",
        "D": "Runtime exception"
      },
      "correct_answer": "A"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "topic": "Implicit vs. explicit casting",
      "question": "What will be the output of the following code?",
      "code_example": "double d = 9.78;\nint i = (int)d;\nConsole.WriteLine(i);",
      "options": {
        "A": "9.78",
        "B": "10",
        "C": "9",
        "D": "Compiler error"
      },
      "correct_answer": "C"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "topic": "ref vs. out parameters",
      "question": "What is the main difference between 'ref' and 'out' parameters in C#?",
      "options": {
        "A": "There is no difference, they are synonyms",
        "B": "'ref' parameters must be initialized before being passed, 'out' parameters don't need initialization",
        "C": "'out' parameters are read-only inside the method",
        "D": "'ref' parameters can't be modified inside the method"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "topic": "ArrayList, List<T>",
      "question": "What will be the output of the following code?",
      "code_example": "List<int> numbers = new List<int> { 1, 2, 3 };\nnumbers.Add(4);\nnumbers.RemoveAt(0);\nConsole.WriteLine(numbers.Count);",
      "options": {
        "A": "4",
        "B": "3",
        "C": "2",
        "D": "1"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "topic": "if-else",
      "question": "What will be the output of the following code?",
      "code_example": "int x = 10;\nif (x > 5)\n    Console.Write(\"A\");\nelse if (x > 7)\n    Console.Write(\"B\");\nelse\n    Console.Write(\"C\");\nConsole.Write(\"D\");",
      "options": {
        "A": "AD",
        "B": "BD",
        "C": "CD",
        "D": "ABC"
      },
      "correct_answer": "A"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "topic": "Access Modifiers (private, protected, public, internal)",
      "question": "Which access modifier allows a class member to be accessed from any class in the same assembly but not from another assembly?",
      "options": {
        "A": "public",
        "B": "private",
        "C": "protected",
        "D": "internal"
      },
      "correct_answer": "D"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "topic": "try-catch-finally",
      "question": "What will be the output of the following code?",
      "code_example": "try {\n    Console.Write(\"A\");\n    throw new Exception();\n    Console.Write(\"B\");\n} catch {\n    Console.Write(\"C\");\n} finally {\n    Console.Write(\"D\");\n}\nConsole.Write(\"E\");",
      "options": {
        "A": "ABCDE",
        "B": "ACDE",
        "C": "ADE",
        "D": "ABE"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "topic": "String Interpolation ($\"Hello {name}\")",
      "question": "What will be the output of the following code?",
      "code_example": "int a = 5, b = 7;\nConsole.WriteLine($\"The sum of {a} and {b} is {a + b}\");",
      "options": {
        "A": "The sum of 5 and 7 is 12",
        "B": "The sum of a and b is a + b",
        "C": "The sum of 5 and 7 is 57",
        "D": "Compiler error"
      },
      "correct_answer": "A"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "topic": "StringBuilder vs string",
      "question": "When is it more efficient to use StringBuilder instead of string concatenation?",
      "options": {
        "A": "StringBuilder is always more efficient",
        "B": "When performing a small number of string operations",
        "C": "When concatenating strings in a loop or performing many string operations",
        "D": "StringBuilder is only for formatting, not concatenation"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "topic": "Local functions (inside another method)",
      "question": "What will be the output of the following code?",
      "code_example": "void MainMethod() {\n    int x = 5;\n    int DoubleValue(int value) {\n        return value * 2;\n    }\n    Console.WriteLine(DoubleValue(x));\n}\nMainMethod();",
      "options": {
        "A": "5",
        "B": "10",
        "C": "Compiler error",
        "D": "Runtime exception"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "topic": "Substring(), IndexOf(), Replace(), Split(), Trim()",
      "question": "What will be the output of the following code?",
      "code_example": "string text = \" Hello, World! \";\nstring result = text.Trim().Substring(0, 5).Replace(\"H\", \"J\");\nConsole.WriteLine(result);",
      "options": {
        "A": "Hello",
        "B": "Jello",
        "C": "Jello,",
        "D": " Jello"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "topic": "Where(), Select(), OrderBy(), GroupBy()",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new List<int> { 3, 1, 4, 1, 5 };\nvar result = numbers.Where(n => n > 2).OrderBy(n => n).ToList();\nConsole.WriteLine(string.Join(\", \", result));",
      "options": {
        "A": "3, 1, 4, 1, 5",
        "B": "3, 4, 5",
        "C": "5, 4, 3",
        "D": "1, 1, 3, 4, 5"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "topic": "Nullable types (int?, bool?)",
      "question": "What will be the output of the following code?",
      "code_example": "int? x = null;\nint y = x ?? 10;\nConsole.WriteLine(y);",
      "options": {
        "A": "null",
        "B": "0",
        "C": "10",
        "D": "Compiler error"
      },
      "correct_answer": "C"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "topic": "Declaring events (event EventHandler MyEvent)",
      "question": "What is the correct way to declare an event in C#?",
      "options": {
        "A": "event void ButtonClicked();",
        "B": "event Action<object, EventArgs> ButtonClicked;",
        "C": "event EventHandler ButtonClicked;",
        "D": "event delegate ButtonClicked;"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "topic": "virtual, override, sealed, abstract",
      "question": "What will be the output of the following code?",
      "code_example": "abstract class Base {\n    public virtual void Method() {\n        Console.Write(\"Base\");\n    }\n}\n\nclass Derived : Base {\n    public sealed override void Method() {\n        Console.Write(\"Derived\");\n    }\n}\n\nBase obj = new Derived();\nobj.Method();",
      "options": {
        "A": "Base",
        "B": "Derived",
        "C": "BaseDerived",
        "D": "Compiler error"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "topic": "using statement",
      "question": "What is the primary purpose of the 'using' statement in C#?",
      "options": {
        "A": "To include namespaces in the code",
        "B": "To automatically call Dispose() on an object that implements IDisposable",
        "C": "To create thread-safe code blocks",
        "D": "To define a scope for variables"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "topic": "ConfigureAwait(false)",
      "question": "What is the purpose of ConfigureAwait(false) in async/await operations?",
      "options": {
        "A": "It makes the async operation run faster",
        "B": "It prevents the code from continuing execution",
        "C": "It allows the awaited task to resume on any thread rather than the original context",
        "D": "It configures the await operation to never time out"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "topic": "Join(), GroupJoin()",
      "question": "What will be the output of the following code?",
      "code_example": "var students = new[] {\n    new { Id = 1, Name = \"Alice\" },\n    new { Id = 2, Name = \"Bob\" }\n};\n\nvar grades = new[] {\n    new { StudentId = 1, Subject = \"Math\", Score = 90 },\n    new { StudentId = 1, Subject = \"Science\", Score = 85 },\n    new { StudentId = 2, Subject = \"Math\", Score = 80 }\n};\n\nvar query = students.Join(\n    grades,\n    student => student.Id,\n    grade => grade.StudentId,\n    (student, grade) => $\"{student.Name}: {grade.Score}\"\n);\n\nConsole.WriteLine(string.Join(\", \", query));",
      "options": {
        "A": "Alice: 90, Alice: 85, Bob: 80",
        "B": "Alice: 87.5, Bob: 80",
        "C": "Alice, Bob",
        "D": "1: 90, 1: 85, 2: 80"
      },
      "correct_answer": "A"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "topic": "Dependency Injection in Testing",
      "question": "Which pattern is commonly used to implement Dependency Injection in C# applications?",
      "options": {
        "A": "Observer Pattern",
        "B": "Factory Pattern",
        "C": "Constructor Injection",
        "D": "Singleton Pattern"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "topic": "Constraints (where T : class, where T : new())",
      "question": "What will be the output of the following code?",
      "code_example": "class Program {\n    static void Main() {\n        var result = CreateAndCount<string>();\n        Console.WriteLine(result);\n    }\n    \n    static int CreateAndCount<T>() where T : class, new() {\n        var obj = new T();\n        return obj.ToString().Length;\n    }\n}",
      "options": {
        "A": "0",
        "B": "6",
        "C": "Compiler error",
        "D": "Runtime exception"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "topic": "Model binding",
      "question": "In ASP.NET Core, which attribute is used to bind form data to a model property?",
      "options": {
        "A": "[BindProperty]",
        "B": "[FromForm]",
        "C": "[ModelBind]",
        "D": "[FormData]"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "topic": "EventArgs pattern",
      "question": "What will be the output of the following code?",
      "code_example": "class CustomEventArgs : EventArgs {\n    public string Message { get; }\n    \n    public CustomEventArgs(string message) {\n        Message = message;\n    }\n}\n\nclass Publisher {\n    public event EventHandler<CustomEventArgs> OnCustomEvent;\n    \n    public void RaiseEvent() {\n        OnCustomEvent?.Invoke(this, new CustomEventArgs(\"Hello\"));\n    }\n}\n\nclass Subscriber {\n    public void Subscribe(Publisher publisher) {\n        publisher.OnCustomEvent += HandleEvent;\n    }\n    \n    private void HandleEvent(object sender, CustomEventArgs e) {\n        Console.WriteLine(e.Message);\n    }\n}\n\nvar publisher = new Publisher();\nvar subscriber = new Subscriber();\nsubscriber.Subscribe(publisher);\npublisher.RaiseEvent();",
      "options": {
        "A": "Hello",
        "B": "CustomEventArgs",
        "C": "System.EventArgs",
        "D": "Nothing (no output)"
      },
      "correct_answer": "A"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "topic": "Property Injection",
      "question": "Which statement about Property Injection in dependency injection is correct?",
      "options": {
        "A": "It's more testable than Constructor Injection",
        "B": "It allows for optional dependencies",
        "C": "It's the recommended primary approach over Constructor Injection",
        "D": "It can't be used with interface-based dependencies"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "topic": "Task<T> vs void",
      "question": "What will be the output of the following code?",
      "code_example": "async Task<string> GetMessageAsync() {\n    await Task.Delay(100);\n    return \"Hello\";\n}\n\nasync void PrintMessage() {\n    string message = await GetMessageAsync();\n    Console.WriteLine(message);\n}\n\nTask.Run(() => PrintMessage());\nConsole.WriteLine(\"World\");\nThread.Sleep(200);",
      "options": {
        "A": "Hello World",
        "B": "World Hello",
        "C": "Hello",
        "D": "World"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "topic": "HashSet<T> vs. Dictionary<TKey, TValue>",
      "question": "What will be the output of the following code?",
      "code_example": "var hashSet = new HashSet<string> { \"apple\", \"banana\", \"cherry\" };\nvar dictionary = new Dictionary<string, int> {\n    { \"apple\", 1 },\n    { \"banana\", 2 },\n    { \"cherry\", 3 }\n};\n\nhashSet.Remove(\"banana\");\ndictionary.Remove(\"banana\");\n\nConsole.WriteLine($\"{hashSet.Count} {dictionary.Count}\");",
      "options": {
        "A": "2 2",
        "B": "3 3",
        "C": "2 3",
        "D": "3 2"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "topic": "Dispose() vs. Finalize()",
      "question": "What is the key difference between Dispose() and Finalize() methods in C#?",
      "options": {
        "A": "Dispose() is called automatically by the garbage collector",
        "B": "Finalize() must be explicitly called by the developer",
        "C": "Dispose() is explicitly called to release resources, Finalize() is called by the garbage collector",
        "D": "They are identical but Dispose() is the newer recommended approach"
      },
      "correct_answer": "C"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "topic": "Generic classes (class MyClass<T>)",
      "question": "What will be the output of the following code?",
      "code_example": "class Container<T> {\n    public T Item { get; }\n    \n    public Container(T item) {\n        Item = item;\n    }\n    \n    public string GetItemTypeName() {\n        return typeof(T).Name;\n    }\n}\n\nvar container1 = new Container<int>(42);\nvar container2 = new Container<string>(\"Hello\");\n\nConsole.WriteLine($\"{container1.GetItemTypeName()} {container2.GetItemTypeName()}\");",
      "options": {
        "A": "int string",
        "B": "Int32 String",
        "C": "System.Int32 System.String",
        "D": "42 Hello"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "topic": "Interface segregation principle",
      "question": "Which of the following best describes the Interface Segregation Principle?",
      "options": {
        "A": "A class should have only one reason to change",
        "B": "Classes should be open for extension but closed for modification",
        "C": "Clients should not be forced to depend on interfaces they do not use",
        "D": "High-level modules should not depend on low-level modules"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "topic": "Method hiding using new",
      "question": "What will be the output of the following code?",
      "code_example": "class Base {\n    public void Display() {\n        Console.Write(\"Base\");\n    }\n}\n\nclass Derived : Base {\n    public new void Display() {\n        Console.Write(\"Derived\");\n    }\n}\n\nBase b = new Derived();\nb.Display();\n\nDerived d = new Derived();\nd.Display();",
      "options": {
        "A": "Base Base",
        "B": "Derived Derived",
        "C": "Base Derived",
        "D": "Derived Base"
      },
      "correct_answer": "C"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Completed processing in 2000ms",
        "B": "Completed processing in approximately 3000ms",
        "C": "Completed processing in approximately 1000ms",
        "D": "The code will throw a TaskCanceledException"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static void Main()\n    {\n        var stopwatch = Stopwatch.StartNew();\n        \n        Parallel.Invoke(\n            () => { Thread.Sleep(1000); Console.WriteLine(\"Task 1 completed\"); },\n            () => { Thread.Sleep(2000); Console.WriteLine(\"Task 2 completed\"); },\n            () => { Thread.Sleep(3000); Console.WriteLine(\"Task 3 completed\"); }\n        );\n        \n        stopwatch.Stop();\n        Console.WriteLine($\"Completed processing in approximately {stopwatch.ElapsedMilliseconds}ms\");\n    }\n}"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "When configuring CORS in ASP.NET Core, what is the purpose of the UseCors middleware?",
      "options": {
        "A": "It validates JWT tokens from cross-origin requests",
        "B": "It adds the necessary CORS headers to the HTTP response",
        "C": "It blocks all requests from origins not specified in the allowed origins list",
        "D": "It compresses HTTP responses for cross-origin requests to improve performance"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "100 400",
        "B": "200 400",
        "C": "100 500",
        "D": "Compilation error: Cannot modify readonly fields"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\nreadonly struct Point\n{\n    public readonly int X;\n    public int Y;\n    \n    public Point(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n    \n    public void UpdateY(int newY)\n    {\n        Y = newY; // This is allowed\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var p = new Point(100, 200);\n        p.UpdateY(400);\n        Console.WriteLine($\"{p.X} {p.Y}\");\n    }\n}"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which of the following is NOT a characteristic of Span<T> in C#?",
      "options": {
        "A": "It provides a type-safe view over contiguous memory",
        "B": "It can be stored as a field in a class",
        "C": "It avoids memory allocations when working with arrays",
        "D": "It can wrap managed arrays, strings, and unmanaged memory"
      },
      "correct_answer": "B"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What is the primary purpose of using ArrayPool<T> in .NET?",
      "options": {
        "A": "To create arrays that can be shared across multiple threads safely",
        "B": "To reduce memory fragmentation by reusing array instances",
        "C": "To automatically resize arrays when they exceed capacity",
        "D": "To enable LINQ operations on arrays with better performance"
      },
      "correct_answer": "B"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Thread 1: 10\nThread 2: 10",
        "B": "Thread 1: 5\nThread 2: 10",
        "C": "Thread 1: 5\nThread 2: 5",
        "D": "The output varies and is unpredictable due to race conditions"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static int counter = 0;\n    static readonly object lockObj = new object();\n    \n    static void Main()\n    {\n        Task task1 = Task.Run(() => IncrementCounter(\"Thread 1\"));\n        Task task2 = Task.Run(() => IncrementCounter(\"Thread 2\"));\n        \n        Task.WaitAll(task1, task2);\n    }\n    \n    static void IncrementCounter(string threadName)\n    {\n        for (int i = 0; i < 5; i++)\n        {\n            lock (lockObj)\n            {\n                counter++;\n            }\n        }\n        \n        Console.WriteLine($\"{threadName}: {counter}\");\n    }\n}"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "When using JWT for authentication in ASP.NET Core, which of the following claims is typically used to specify the expiration time of the token?",
      "options": {
        "A": "iat (Issued At)",
        "B": "sub (Subject)",
        "C": "exp (Expiration Time)",
        "D": "aud (Audience)"
      },
      "correct_answer": "C"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Original array: 1, 2, 3, 4, 5\nModified span: 10, 20, 30, 4, 5\nModified array: 10, 20, 30, 4, 5",
        "B": "Original array: 1, 2, 3, 4, 5\nModified span: 10, 20, 30, 4, 5\nModified array: 1, 2, 3, 4, 5",
        "C": "Original array: 1, 2, 3, 4, 5\nModified span: 1, 2, 3, 4, 5\nModified array: 1, 2, 3, 4, 5",
        "D": "Compilation error: Cannot create a Span<T> from an array"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] array = { 1, 2, 3, 4, 5 };\n        Console.WriteLine($\"Original array: {string.Join(\", \", array)}\");\n        \n        Span<int> span = array.AsSpan(0, 3);\n        for (int i = 0; i < span.Length; i++)\n        {\n            span[i] *= 10;\n        }\n        \n        Console.WriteLine($\"Modified span: {string.Join(\", \", array)}\");\n        Console.WriteLine($\"Modified array: {string.Join(\", \", array)}\");\n    }\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "In the context of deploying .NET applications in Kubernetes, what is the primary purpose of a Readiness Probe?",
      "options": {
        "A": "To monitor the memory usage of the application",
        "B": "To check if the application has started successfully",
        "C": "To determine if the application is ready to accept traffic",
        "D": "To automatically scale the application based on CPU usage"
      },
      "correct_answer": "C"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1",
        "B": "1\n2\n3",
        "C": "1\n2",
        "D": "Runtime exception: System.InvalidOperationException"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        var queue = new Queue<int>();\n        queue.Enqueue(1);\n        queue.Enqueue(2);\n        queue.Enqueue(3);\n        \n        try\n        {\n            while (true)\n            {\n                var item = queue.Dequeue();\n                Console.WriteLine(item);\n                if (item == 2) break;\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Exception: {ex.GetType().Name}\");\n        }\n    }\n}"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What is the key difference between stack and heap allocation in .NET?",
      "options": {
        "A": "Stack allocations are always faster than heap allocations",
        "B": "Stack memory is used for value types, while heap memory is used for reference types",
        "C": "Stack memory is garbage collected, while heap memory is released when a method completes",
        "D": "Stack allocations are thread-safe, while heap allocations require explicit locking"
      },
      "correct_answer": "B"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates the Factory Pattern?",
      "options": {
        "A": "Created SQLRepository\nConnecting to SQL Server...",
        "B": "Created MongoRepository\nConnecting to MongoDB...",
        "C": "Created Repository\nConnecting to database...",
        "D": "ArgumentException: Unknown repository type"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\npublic interface IRepository\n{\n    void Connect();\n}\n\npublic class SQLRepository : IRepository\n{\n    public SQLRepository()\n    {\n        Console.WriteLine(\"Created SQLRepository\");\n    }\n    \n    public void Connect()\n    {\n        Console.WriteLine(\"Connecting to SQL Server...\");\n    }\n}\n\npublic class MongoRepository : IRepository\n{\n    public MongoRepository()\n    {\n        Console.WriteLine(\"Created MongoRepository\");\n    }\n    \n    public void Connect()\n    {\n        Console.WriteLine(\"Connecting to MongoDB...\");\n    }\n}\n\npublic class RepositoryFactory\n{\n    public static IRepository CreateRepository(string type)\n    {\n        switch (type.ToLower())\n        {\n            case \"sql\":\n                return new SQLRepository();\n            case \"mongo\":\n                return new MongoRepository();\n            default:\n                throw new ArgumentException(\"Unknown repository type\");\n        }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        IRepository repo = RepositoryFactory.CreateRepository(\"sql\");\n        repo.Connect();\n    }\n}"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "In OAuth 2.0, which grant type is most appropriate for a public single-page application (SPA) that cannot securely store client secrets?",
      "options": {
        "A": "Authorization Code Grant with PKCE",
        "B": "Resource Owner Password Credentials Grant",
        "C": "Client Credentials Grant",
        "D": "Implicit Grant"
      },
      "correct_answer": "A"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code using ExpandoObject?",
      "options": {
        "A": "Name: John\nAge: 30\nLanguages: C#,Python,JavaScript",
        "B": "Name: John\nAge: 30\nCompilation error: Cannot add properties dynamically",
        "C": "Name: John\nAge: 30\nRuntime error: 'Languages' property not found",
        "D": "Name: John\nAge: 30\nLanguages: System.Collections.Generic.List`1[System.String]"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Collections.Generic;\nusing System.Dynamic;\n\nclass Program\n{\n    static void Main()\n    {\n        dynamic developer = new ExpandoObject();\n        \n        developer.Name = \"John\";\n        developer.Age = 30;\n        developer.Languages = new List<string> { \"C#\", \"Python\", \"JavaScript\" };\n        \n        Console.WriteLine($\"Name: {developer.Name}\");\n        Console.WriteLine($\"Age: {developer.Age}\");\n        Console.WriteLine($\"Languages: {string.Join(\",\", developer.Languages)}\");\n    }\n}"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "Which of the following HTTP status codes would be most appropriate to return when an API client attempts to access a resource without proper authentication?",
      "options": {
        "A": "400 Bad Request",
        "B": "401 Unauthorized",
        "C": "403 Forbidden",
        "D": "404 Not Found"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates API versioning?",
      "options": {
        "A": "Using API v1.0\nProduct: Laptop\nPrice: 999.99",
        "B": "Using API v2.0\nProduct: Laptop\nPrice: 999.99\nStock: 50",
        "C": "Using API v1.0\nUnsupported version",
        "D": "Compilation error: Cannot convert ApiVersion to string"
      },
      "correct_answer": "B",
      "code_example": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Simulate API version from request header\n        string requestedVersion = \"2.0\";\n        \n        // Product data\n        var product = new { Name = \"Laptop\", Price = 999.99m, Stock = 50 };\n        \n        // API controller logic\n        switch (requestedVersion)\n        {\n            case \"1.0\":\n                Console.WriteLine(\"Using API v1.0\");\n                Console.WriteLine($\"Product: {product.Name}\");\n                Console.WriteLine($\"Price: {product.Price}\");\n                break;\n                \n            case \"2.0\":\n                Console.WriteLine(\"Using API v2.0\");\n                Console.WriteLine($\"Product: {product.Name}\");\n                Console.WriteLine($\"Price: {product.Price}\");\n                Console.WriteLine($\"Stock: {product.Stock}\");\n                break;\n                \n            default:\n                Console.WriteLine($\"Using API v1.0\");\n                Console.WriteLine(\"Unsupported version\");\n                break;\n        }\n    }\n}"
    }
  ]
}
