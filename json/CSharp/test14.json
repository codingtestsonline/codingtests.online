{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string message = \"Hello World\";\nConsole.WriteLine(message.Substring(6));",
      "options": {
        "A": "Hello",
        "B": "World",
        "C": "llo World",
        "D": "o World"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What is the primary purpose of 'FirstOrDefault()' in LINQ?",
      "options": {
        "A": "Returns the first element of a sequence, or the default value if no element is found",
        "B": "Returns the first element of a sequence, or throws an exception if no element is found",
        "C": "Returns the first element of a sequence that satisfies a condition, or throws an exception if none is found",
        "D": "Returns all elements of a sequence in the first position"
      },
      "correct_answer": "A"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int? nullableInt = null;\nConsole.WriteLine(nullableInt.HasValue ? nullableInt.Value : -1);",
      "options": {
        "A": "null",
        "B": "0",
        "C": "-1",
        "D": "NullReferenceException will be thrown"
      },
      "correct_answer": "C"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar result = numbers.SingleOrDefault(n => n > 5);\nConsole.WriteLine(result);",
      "options": {
        "A": "5",
        "B": "0",
        "C": "null",
        "D": "InvalidOperationException will be thrown"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "Dictionary<string, int> scores = new Dictionary<string, int>\n{\n    {\"Alice\", 95},\n    {\"Bob\", 80},\n    {\"Charlie\", 85}\n};\n\nif (scores.TryGetValue(\"David\", out int score))\n{\n    Console.WriteLine(score);\n}\nelse\n{\n    Console.WriteLine(\"Not found\");\n}",
      "options": {
        "A": "0",
        "B": "null",
        "C": "Not found",
        "D": "KeyNotFoundException will be thrown"
      },
      "correct_answer": "C"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "Which of the following value types in C# is stored on the heap?",
      "options": {
        "A": "int",
        "B": "double",
        "C": "struct",
        "D": "None of the above"
      },
      "correct_answer": "D"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string original = \"Hello\";\nstring modified = original;\nmodified = \"World\";\nConsole.WriteLine(original);",
      "options": {
        "A": "Hello",
        "B": "World",
        "C": "HelloWorld",
        "D": "null"
      },
      "correct_answer": "A"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "public class Person\n{\n    public string Name { get; set; }\n    \n    public Person()\n    {\n        Name = \"Unknown\";\n    }\n    \n    public Person(string name)\n    {\n        Name = name;\n    }\n}\n\nPerson p = new Person();\nConsole.WriteLine(p.Name);",
      "options": {
        "A": "\"\"",
        "B": "null",
        "C": "Unknown",
        "D": "Compilation error"
      },
      "correct_answer": "C"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What is the main benefit of using the 'this' keyword in C#?",
      "options": {
        "A": "It increases performance",
        "B": "It allows access to instance members from within constructors or instance methods",
        "C": "It makes code more secure",
        "D": "It is required for all class methods"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "try\n{\n    throw new Exception(\"An error occurred\");\n    Console.WriteLine(\"After exception\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(ex.Message);\n}",
      "options": {
        "A": "An error occurred",
        "B": "After exception",
        "C": "An error occurred\nAfter exception",
        "D": "No output"
      },
      "correct_answer": "A"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "public class CustomException : Exception\n{\n    public CustomException(string message) : base(message)\n    {\n    }\n}\n\ntry\n{\n    throw new CustomException(\"Custom error\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(ex.GetType().Name + \": \" + ex.Message);\n}",
      "options": {
        "A": "Exception: Custom error",
        "B": "CustomException: Custom error",
        "C": "CustomException",
        "D": "Custom error"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What is the output of the following code?",
      "code_example": "string input = \" Hello, World! \";\nstring result = input.Trim().Replace(\"World\", \"C#\");\nConsole.WriteLine(result);",
      "options": {
        "A": " Hello, C#! ",
        "B": "Hello, C#!",
        "C": "Hello,C#!",
        "D": "HelloC#!"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new HashSet<int> { 1, 2, 3, 2, 1 };\nforeach (var num in numbers)\n{\n    Console.Write(num + \" \");\n}",
      "options": {
        "A": "1 2 3 2 1",
        "B": "1 2 3",
        "C": "1 1 2 2 3",
        "D": "3 2 1"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "var input = \"The quick brown fox\";\nvar words = input.Split(' ');\nConsole.WriteLine(words.Length);",
      "options": {
        "A": "3",
        "B": "4",
        "C": "5",
        "D": "19"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What is the primary advantage of using type inference (var keyword) in C#?",
      "options": {
        "A": "It makes the code execute faster",
        "B": "It reduces the amount of typing while maintaining strong typing",
        "C": "It allows variables to change types at runtime",
        "D": "It automatically handles null values"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int GetValue(int value) => value switch\n{\n    0 => 10,\n    1 => 20,\n    2 => 30,\n    _ => 0\n};\n\nConsole.WriteLine(GetValue(1));",
      "options": {
        "A": "0",
        "B": "10",
        "C": "20",
        "D": "30"
      },
      "correct_answer": "C"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "void Method(int x, int y)\n{\n    Console.WriteLine($\"x: {x}, y: {y}\");\n}\n\nMethod(y: 20, x: 10);",
      "options": {
        "A": "x: 10, y: 20",
        "B": "x: 20, y: 10",
        "C": "x: y: 20, y: x: 10",
        "D": "Compilation error"
      },
      "correct_answer": "A"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "What is the primary purpose of calling GC.Collect() explicitly?",
      "options": {
        "A": "To improve application performance in all scenarios",
        "B": "To force immediate garbage collection, typically for specific testing or benchmarking scenarios",
        "C": "To prevent memory leaks in all applications",
        "D": "It is required after creating large objects"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar result = numbers.FirstOrDefault(n => n > 10) + numbers.SingleOrDefault(n => n > 3 && n < 5);\nConsole.WriteLine(result);",
      "options": {
        "A": "0",
        "B": "4",
        "C": "5",
        "D": "InvalidOperationException will be thrown"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "Which statement about Test-Driven Development (TDD) is NOT correct?",
      "options": {
        "A": "Tests are written before the implementation code",
        "B": "It follows a Red-Green-Refactor cycle",
        "C": "It helps ensure code reliability through comprehensive test coverage",
        "D": "It eliminates the need for manual testing entirely"
      },
      "correct_answer": "D"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class Parent\n{\n    public Parent()\n    {\n        Console.Write(\"A\");\n    }\n}\n\npublic class Child : Parent\n{\n    public Child() : base()\n    {\n        Console.Write(\"B\");\n    }\n}\n\nvar obj = new Child();",
      "options": {
        "A": "A",
        "B": "B",
        "C": "AB",
        "D": "BA"
      },
      "correct_answer": "C"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "Which statement about the Interface Segregation Principle is true?",
      "options": {
        "A": "A class should have only one reason to change",
        "B": "Objects should be replaceable with instances of their subtypes",
        "C": "Clients should not be forced to depend on interfaces they do not use",
        "D": "High-level modules should not depend on low-level modules"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "In the context of Entity Framework, what is the Code-First approach?",
      "options": {
        "A": "Creating database tables first, then generating C# classes",
        "B": "Writing C# classes first, then generating the database schema",
        "C": "Writing stored procedures in SQL, then calling them from C#",
        "D": "Creating an edmx model first, then generating C# classes"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public interface ILogger\n{\n    void Log(string message);\n}\n\npublic interface IFormatter\n{\n    void Log(string message);\n}\n\npublic class ConsoleLogger : ILogger, IFormatter\n{\n    void ILogger.Log(string message)\n    {\n        Console.WriteLine($\"Logger: {message}\");\n    }\n    \n    void IFormatter.Log(string message)\n    {\n        Console.WriteLine($\"Formatter: {message}\");\n    }\n}\n\nvar logger = new ConsoleLogger();\n((ILogger)logger).Log(\"Hello\");",
      "options": {
        "A": "Logger: Hello",
        "B": "Formatter: Hello",
        "C": "Hello",
        "D": "Compilation error"
      },
      "correct_answer": "A"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class GenericExample<T> where T : class, new()\n{\n    public T CreateInstance()\n    {\n        return new T();\n    }\n}\n\npublic class MyClass\n{\n    public MyClass()\n    {\n        Console.WriteLine(\"MyClass created\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var example = new GenericExample<MyClass>();\n        example.CreateInstance();\n    }\n}",
      "options": {
        "A": "No output",
        "B": "MyClass created",
        "C": "Compilation error",
        "D": "Runtime error"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "var list1 = new[] { 1, 2, 3 };\nvar list2 = new[] { \"A\", \"B\", \"C\", \"D\" };\n\nvar result = list1.Join(\n    list2,\n    x => 0,\n    y => 0,\n    (x, y) => $\"{x}-{y}\"\n);\n\nforeach (var item in result)\n{\n    Console.Write(item + \" \");\n}",
      "options": {
        "A": "1-A 2-B 3-C",
        "B": "1-A 1-B 1-C 1-D 2-A 2-B 2-C 2-D 3-A 3-B 3-C 3-D",
        "C": "No output",
        "D": "Runtime error"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "In ASP.NET Core, what is the main difference between Conventional Routing and Attribute Routing?",
      "options": {
        "A": "Attribute Routing is more performant than Conventional Routing",
        "B": "Conventional Routing is defined centrally in Startup.cs, while Attribute Routing is defined with attributes on controller classes and methods",
        "C": "Conventional Routing supports RESTful APIs, while Attribute Routing does not",
        "D": "Attribute Routing is only available in ASP.NET Core, not in the traditional ASP.NET framework"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "delegate int Calculate(int x, int y);\n\nCalculate add = (a, b) => a + b;\nCalculate multiply = (a, b) => a * b;\n\nvar operations = add + multiply;\nint result = operations(3, 4);\n\nConsole.WriteLine(result);",
      "options": {
        "A": "7",
        "B": "12",
        "C": "19",
        "D": "Compilation error"
      },
      "correct_answer": "D"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "Which statement about Property Injection in dependency injection is true?",
      "options": {
        "A": "Dependencies are injected through the constructor",
        "B": "Dependencies are injected through public properties",
        "C": "Dependencies are injected through private fields",
        "D": "Dependencies are injected through method parameters"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class ButtonClickEventArgs : EventArgs\n{\n    public int ClickCount { get; set; }\n}\n\npublic class Button\n{\n    public event EventHandler<ButtonClickEventArgs> Click;\n    \n    public void PerformClick()\n    {\n        var args = new ButtonClickEventArgs { ClickCount = 1 };\n        Click?.Invoke(this, args);\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var button = new Button();\n        button.Click += (sender, e) => Console.WriteLine($\"Clicked {e.ClickCount} time(s)\");\n        button.PerformClick();\n    }\n}",
      "options": {
        "A": "Clicked",
        "B": "Clicked 1 time(s)",
        "C": "No output",
        "D": "NullReferenceException will be thrown"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "delegate void Notify(string message);\n\npublic class Program\n{\n    public static void Main()\n    {\n        Notify notify = LogToConsole;\n        notify += LogToDebug;\n        \n        notify(\"Hello\");\n    }\n    \n    static void LogToConsole(string message)\n    {\n        Console.WriteLine($\"Console: {message}\");\n    }\n    \n    static void LogToDebug(string message)\n    {\n        Console.WriteLine($\"Debug: {message}\");\n    }\n}",
      "options": {
        "A": "Console: Hello",
        "B": "Debug: Hello",
        "C": "Console: Hello\nDebug: Hello",
        "D": "No output"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class Base\n{\n    public virtual void Display()\n    {\n        Console.WriteLine(\"Base\");\n    }\n}\n\npublic class Derived : Base\n{\n    public new void Display()\n    {\n        Console.WriteLine(\"Derived\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        Base baseRef = new Derived();\n        baseRef.Display();\n        \n        Derived derived = new Derived();\n        derived.Display();\n    }\n}",
      "options": {
        "A": "Base\nBase",
        "B": "Derived\nDerived",
        "C": "Base\nDerived",
        "D": "Derived\nBase"
      },
      "correct_answer": "C"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Which of the following correctly configures CORS in ASP.NET Core to allow only specific origins?",
      "options": {
        "A": "app.UseCors(options => options.WithOrigins(\"https://example.com\").AllowAnyMethod().AllowAnyHeader());",
        "B": "app.UseCors(options => options.AllowAnyOrigin().WithMethods(\"GET\").WithHeaders(\"Authorization\"));",
        "C": "app.AddCors(options => options.AddPolicy(\"MyPolicy\", builder => builder.WithOrigins(\"https://example.com\")));",
        "D": "services.AddCors(options => { options.AddDefaultPolicy(builder => builder.AllowAnyOrigin()); });"
      },
      "correct_answer": "A",
      "code_example": null
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "1 2 3 Task completed",
        "B": "1 2 3 Task cancelled",
        "C": "1 2 Task cancelled",
        "D": "1 Task cancelled"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        var cancellationTokenSource = new CancellationTokenSource();\n        var token = cancellationTokenSource.Token;\n        \n        var task = CountToFiveAsync(token);\n        \n        await Task.Delay(200); // Wait 200ms\n        cancellationTokenSource.Cancel();\n        \n        try\n        {\n            await task;\n            Console.Write(\"Task completed\");\n        }\n        catch (OperationCanceledException)\n        {\n            Console.Write(\"Task cancelled\");\n        }\n    }\n    \n    static async Task CountToFiveAsync(CancellationToken token)\n    {\n        for (int i = 1; i <= 5; i++)\n        {\n            token.ThrowIfCancellationRequested();\n            Console.Write($\"{i} \");\n            await Task.Delay(100, token);\n        }\n    }\n}"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "In a Kubernetes deployment for a .NET application, which of the following is the correct way to include health checks in the Kubernetes manifest?",
      "options": {
        "A": "spec: { healthCheck: { httpGet: { path: \"/healthz\", port: 80 }, initialDelaySeconds: 5, periodSeconds: 10 } }",
        "B": "spec: { template: { spec: { containers: [{ livenessProbe: { httpGet: { path: \"/healthz\", port: 80 }, initialDelaySeconds: 5, periodSeconds: 10 } }] } } }",
        "C": "metadata: { annotations: { \"health.check.path\": \"/healthz\", \"health.check.port\": \"80\" } }",
        "D": "spec: { containers: [{ health: { httpGet: \"/healthz:80\", delay: \"5s\", period: \"10s\" } }] }"
      },
      "correct_answer": "B",
      "code_example": null
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following code which uses ArrayPool<T>?",
      "options": {
        "A": "Array length: 16",
        "B": "Array length: 32",
        "C": "Array length: 64",
        "D": "Array length: 8"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Buffers;\n\npublic class Program\n{\n    public static void Main()\n    {\n        int requestedSize = 33;\n        var pool = ArrayPool<byte>.Shared;\n        \n        byte[] rentedArray = pool.Rent(requestedSize);\n        try\n        {\n            Console.Write($\"Array length: {rentedArray.Length}\");\n        }\n        finally\n        {\n            pool.Return(rentedArray);\n        }\n    }\n}"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following code which uses MemoryCache?",
      "options": {
        "A": "Cache hit: Value1\nCache miss",
        "B": "Cache hit: Value1\nCache hit: Value1",
        "C": "Cache miss\nCache miss",
        "D": "Cache hit: Value1\nCache hit: Value2"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Threading;\nusing Microsoft.Extensions.Caching.Memory;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var cacheOptions = new MemoryCacheOptions();\n        var memoryCache = new MemoryCache(cacheOptions);\n        \n        var cacheEntryOptions = new MemoryCacheEntryOptions()\n            .SetAbsoluteExpiration(TimeSpan.FromSeconds(1));\n        \n        memoryCache.Set(\"key1\", \"Value1\", cacheEntryOptions);\n        \n        if (memoryCache.TryGetValue(\"key1\", out string value1))\n        {\n            Console.WriteLine($\"Cache hit: {value1}\");\n        }\n        \n        Thread.Sleep(1500); // Wait 1.5 seconds\n        \n        if (memoryCache.TryGetValue(\"key1\", out string value2))\n        {\n            Console.Write($\"Cache hit: {value2}\");\n        }\n        else\n        {\n            Console.Write(\"Cache miss\");\n        }\n    }\n}"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code which uses Activator.CreateInstance()?",
      "options": {
        "A": "CustomType",
        "B": "System.NotSupportedException",
        "C": "System.MissingMethodException",
        "D": "System.ArgumentException"
      },
      "correct_answer": "C",
      "code_example": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try\n        {\n            var instance = Activator.CreateInstance(typeof(CustomType), \"parameter\");\n            Console.Write(instance.GetType().Name);\n        }\n        catch (Exception ex)\n        {\n            Console.Write(ex.GetType().FullName);\n        }\n    }\n}\n\npublic class CustomType\n{\n    // No public constructor that takes a string parameter\n    public CustomType()\n    {\n    }\n    \n    private CustomType(string parameter)\n    {\n    }\n}"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which of the following correctly implements the Observer Pattern in C#?",
      "options": {
        "A": "public class Subject { public event Action<string> OnUpdate; public void Update(string data) { OnUpdate?.Invoke(data); } }",
        "B": "public class Observer { public void Subscribe(Subject subject) { subject.Update += OnUpdate; } private void OnUpdate(string data) { } }",
        "C": "public interface IObserver { void OnNext(string value); } public interface IObservable { IDisposable Subscribe(IObserver observer); }",
        "D": "public class Publisher { private List<Action<string>> _subscribers = new(); public void AddSubscriber(Action<string> action) => _subscribers.Add(action); }"
      },
      "correct_answer": "C",
      "code_example": null
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code which implements the Singleton Pattern?",
      "options": {
        "A": "Same instance\nDifferent instance",
        "B": "Different instance\nDifferent instance",
        "C": "Same instance\nSame instance",
        "D": "System.InvalidOperationException"
      },
      "correct_answer": "C",
      "code_example": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var instance1 = Singleton.Instance;\n        var instance2 = Singleton.Instance;\n        \n        Console.WriteLine(instance1 == instance2 ? \"Same instance\" : \"Different instance\");\n        \n        var instance3 = Singleton.GetInstance();\n        var instance4 = Singleton.GetInstance();\n        \n        Console.Write(instance3 == instance4 ? \"Same instance\" : \"Different instance\");\n    }\n}\n\npublic class Singleton\n{\n    private static readonly Lazy<Singleton> _lazyInstance = \n        new Lazy<Singleton>(() => new Singleton());\n    \n    private Singleton() { }\n    \n    public static Singleton Instance => _lazyInstance.Value;\n    \n    public static Singleton GetInstance() => Instance;\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code which implements the Repository Pattern?",
      "options": {
        "A": "Customer found: John",
        "B": "No customer found",
        "C": "System.ArgumentNullException",
        "D": "System.InvalidOperationException"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var repository = new CustomerRepository(new List<Customer>\n        {\n            new Customer { Id = 1, Name = \"John\" },\n            new Customer { Id = 2, Name = \"Alice\" }\n        });\n        \n        var customer = repository.GetById(1);\n        \n        if (customer != null)\n        {\n            Console.Write($\"Customer found: {customer.Name}\");\n        }\n        else\n        {\n            Console.Write(\"No customer found\");\n        }\n    }\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic interface IRepository<T>\n{\n    T GetById(int id);\n}\n\npublic class CustomerRepository : IRepository<Customer>\n{\n    private readonly List<Customer> _customers;\n    \n    public CustomerRepository(List<Customer> customers)\n    {\n        _customers = customers;\n    }\n    \n    public Customer GetById(int id)\n    {\n        return _customers.FirstOrDefault(c => c.Id == id);\n    }\n}"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following is a correct OAuth2 authorization flow for a secure server-side web application?",
      "options": {
        "A": "Implicit Flow",
        "B": "Client Credentials Flow",
        "C": "Authorization Code Flow with PKCE",
        "D": "Resource Owner Password Credentials Flow"
      },
      "correct_answer": "C",
      "code_example": null
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code which implements API Versioning?",
      "options": {
        "A": "API Version: 2.0",
        "B": "API Version: 1.0",
        "C": "API Version: 1.0-alpha",
        "D": "API Version: "
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\npublic class Program\n{\n    public static async Task Main()\n    {\n        var httpClient = new HttpClient();\n        httpClient.DefaultRequestHeaders.Add(\"api-version\", \"2.0\");\n        \n        var request = new HttpRequestMessage(HttpMethod.Get, \"https://example.com/api/values\");\n        \n        var apiVersion = \"\";\n        if (request.Headers.TryGetValues(\"api-version\", out var values))\n        {\n            apiVersion = string.Join(\",\", values);\n        }\n        \n        Console.Write($\"API Version: {apiVersion}\");\n    }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "Which of the following is the correct way to consume messages from a RabbitMQ queue in C#?",
      "options": {
        "A": "var consumer = new EventingBasicConsumer(channel); consumer.Received += (model, ea) => { var body = ea.Body.ToArray(); channel.BasicAck(ea.DeliveryTag, false); };",
        "B": "var message = channel.BasicGet(\"myQueue\", true); if (message != null) { var body = message.Body.ToArray(); }",
        "C": "channel.QueueSubscribe(\"myQueue\", (body, properties) => { var message = Encoding.UTF8.GetString(body); });",
        "D": "var consumer = channel.ConsumeMessage(\"myQueue\"); consumer.OnMessageReceived += (message) => { var body = message.GetBody<byte[]>(); };"
      },
      "correct_answer": "A",
      "code_example": null
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code which implements JWT Authentication?",
      "options": {
        "A": "Valid token: True",
        "B": "Valid token: False\nSystem.ArgumentException: IDX10503: Signature validation failed.",
        "C": "Valid token: False",
        "D": "System.ArgumentException: IDX10503: Signature validation failed."
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing Microsoft.IdentityModel.Tokens;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = new byte[32]; // Empty key\n        var securityKey = new SymmetricSecurityKey(key);\n        \n        var tokenDescriptor = new SecurityTokenDescriptor\n        {\n            Subject = new ClaimsIdentity(new[] { new Claim(\"id\", \"1\") }),\n            Expires = DateTime.UtcNow.AddMinutes(-5), // Expired token\n            SigningCredentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256Signature)\n        };\n        \n        var token = tokenHandler.CreateToken(tokenDescriptor);\n        var tokenString = tokenHandler.WriteToken(token);\n        \n        try\n        {\n            var validationParameters = new TokenValidationParameters\n            {\n                ValidateIssuerSigningKey = true,\n                IssuerSigningKey = securityKey,\n                ValidateIssuer = false,\n                ValidateAudience = false,\n                ValidateLifetime = true,\n                ClockSkew = TimeSpan.Zero\n            };\n            \n            var principal = tokenHandler.ValidateToken(tokenString, validationParameters, out _);\n            Console.Write($\"Valid token: {principal != null}\");\n        }\n        catch (SecurityTokenExpiredException)\n        {\n            Console.Write(\"Valid token: False\");\n        }\n        catch (Exception ex)\n        {\n            Console.Write($\"Valid token: False\\n{ex}\");\n        }\n    }\n}"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code which implements the Adapter Pattern?",
      "options": {
        "A": "Legacy logger: Debug message\nModern logger: [DEBUG] Debug message",
        "B": "Modern logger: [DEBUG] Debug message",
        "C": "Legacy logger: Debug message",
        "D": "System.NotImplementedException"
      },
      "correct_answer": "B",
      "code_example": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Modern logger interface\n        ILogger modernLogger = new LoggerAdapter(new LegacyLogger());\n        modernLogger.LogDebug(\"Debug message\");\n    }\n}\n\n// Target interface\npublic interface ILogger\n{\n    void LogDebug(string message);\n    void LogInfo(string message);\n    void LogError(string message);\n}\n\n// Adaptee (legacy code)\npublic class LegacyLogger\n{\n    public void WriteDebug(string message)\n    {\n        Console.Write($\"Legacy logger: {message}\");\n    }\n    \n    public void WriteInfo(string message)\n    {\n        Console.Write($\"Legacy logger: {message}\");\n    }\n    \n    public void WriteError(string message)\n    {\n        Console.Write($\"Legacy logger: ERROR - {message}\");\n    }\n}\n\n// Adapter\npublic class LoggerAdapter : ILogger\n{\n    private readonly LegacyLogger _legacyLogger;\n    \n    public LoggerAdapter(LegacyLogger legacyLogger)\n    {\n        _legacyLogger = legacyLogger;\n    }\n    \n    public void LogDebug(string message)\n    {\n        // Instead of using the legacy logger, we format it ourselves\n        Console.Write($\"Modern logger: [DEBUG] {message}\");\n    }\n    \n    public void LogInfo(string message)\n    {\n        _legacyLogger.WriteInfo(message);\n    }\n    \n    public void LogError(string message)\n    {\n        _legacyLogger.WriteError(message);\n    }\n}"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code which demonstrates Semaphore and Mutex usage?",
      "options": {
        "A": "Thread 0 entering...\nThread 0 exiting...\nThread 1 entering...\nThread 1 exiting...",
        "B": "Thread 0 entering...\nThread 1 entering...\nThread 0 exiting...\nThread 1 exiting...",
        "C": "Thread 0 entering...\nThread 1 entering...\nThread 1 exiting...\nThread 0 exiting...",
        "D": "Thread 1 entering...\nThread 0 entering...\nThread 1 exiting...\nThread 0 exiting..."
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Threading;\n\npublic class Program\n{\n    private static Mutex _mutex = new Mutex();\n    \n    public static void Main()\n    {\n        Thread[] threads = new Thread[2];\n        \n        for (int i = 0; i < threads.Length; i++)\n        {\n            threads[i] = new Thread(DoWork);\n            threads[i].Name = i.ToString();\n        }\n        \n        foreach (Thread t in threads)\n        {\n            t.Start();\n        }\n        \n        foreach (Thread t in threads)\n        {\n            t.Join();\n        }\n    }\n    \n    private static void DoWork()\n    {\n        _mutex.WaitOne();\n        try\n        {\n            Console.WriteLine($\"Thread {Thread.CurrentThread.Name} entering...\");\n            Thread.Sleep(100);\n            Console.Write($\"Thread {Thread.CurrentThread.Name} exiting...\");\n        }\n        finally\n        {\n            _mutex.ReleaseMutex();\n        }\n    }\n}"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "Which of the following is the correct way to create a Kafka producer in C# using Confluent.Kafka?",
      "options": {
        "A": "var producer = new KafkaProducer(new ProducerConfig { BootstrapServers = \"localhost:9092\" }); producer.Produce(\"my-topic\", new Message<string, string> { Key = \"key\", Value = \"value\" });",
        "B": "var producerConfig = new ProducerConfig { BootstrapServers = \"localhost:9092\" }; using var producer = new ProducerBuilder<string, string>(producerConfig).Build(); producer.Produce(\"my-topic\", new Message<string, string> { Key = \"key\", Value = \"value\" });",
        "C": "var producer = KafkaClient.CreateProducer(\"localhost:9092\"); producer.Send(new KafkaMessage(\"my-topic\", \"key\", \"value\"));",
        "D": "var producer = new Producer(\"localhost:9092\"); producer.Send(new TopicMessage(\"my-topic\", \"key\", \"value\"));"
      },
      "correct_answer": "B",
      "code_example": null
    }
  ]
}
