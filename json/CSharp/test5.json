{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string path = \"example.txt\";\nif (File.Exists(path))\n{\n    Console.WriteLine(\"File exists\");\n}\nelse\n{\n    Console.WriteLine(\"File does not exist\");\n}",
      "options": {
        "A": "File exists",
        "B": "File does not exist",
        "C": "A FileNotFoundException is thrown",
        "D": "The code won't compile due to missing using directive"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What does the following code do?",
      "code_example": "string content = \"Hello, World!\";\nFile.WriteAllText(\"greeting.txt\", content);",
      "options": {
        "A": "Appends \"Hello, World!\" to the existing content in greeting.txt",
        "B": "Creates a new file named greeting.txt with the content \"Hello, World!\" or overwrites it if it already exists",
        "C": "Throws an exception if greeting.txt already exists",
        "D": "Reads the content of greeting.txt and stores it in the content variable"
      },
      "correct_answer": "B"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "Queue<int> numbers = new Queue<int>();\nnumbers.Enqueue(1);\nnumbers.Enqueue(2);\nnumbers.Enqueue(3);\nConsole.WriteLine(numbers.Dequeue());\nConsole.WriteLine(numbers.Peek());",
      "options": {
        "A": "1 followed by 1",
        "B": "1 followed by 2",
        "C": "3 followed by 2",
        "D": "3 followed by 3"
      },
      "correct_answer": "B"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "Stack<string> books = new Stack<string>();\nbooks.Push(\"Book1\");\nbooks.Push(\"Book2\");\nbooks.Push(\"Book3\");\nConsole.WriteLine(books.Pop());\nConsole.WriteLine(books.Peek());",
      "options": {
        "A": "Book1 followed by Book2",
        "B": "Book3 followed by Book2",
        "C": "Book3 followed by Book3",
        "D": "Book1 followed by Book1"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "ArrayList fruits = new ArrayList();\nfruits.Add(\"Apple\");\nfruits.Add(\"Banana\");\nfruits.Add(\"Cherry\");\nfruits.Remove(\"Banana\");\nConsole.WriteLine(fruits.Count);",
      "options": {
        "A": "0",
        "B": "1",
        "C": "2",
        "D": "3"
      },
      "correct_answer": "C"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "What's the primary difference between ArrayList and List<T>?",
      "options": {
        "A": "ArrayList is faster than List<T> for all operations",
        "B": "List<T> is type-safe while ArrayList can store objects of any type",
        "C": "ArrayList supports more methods than List<T>",
        "D": "List<T> cannot be resized while ArrayList can"
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int[] numbers = new int[5] {1, 2, 3, 4, 5};\nnumbers[2] = 10;\nConsole.WriteLine(numbers[2]);",
      "options": {
        "A": "2",
        "B": "3",
        "C": "5",
        "D": "10"
      },
      "correct_answer": "D"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int a = 5; // 101 in binary\nint b = 3; // 011 in binary\nint c = a & b;\nConsole.WriteLine(c);",
      "options": {
        "A": "0",
        "B": "1",
        "C": "7",
        "D": "8"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int x = 4; // 100 in binary\nConsole.WriteLine(x << 1);",
      "options": {
        "A": "2",
        "B": "5",
        "C": "8",
        "D": "16"
      },
      "correct_answer": "C"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What is the primary purpose of the 'using' statement in C#?",
      "options": {
        "A": "To import namespaces",
        "B": "To ensure proper disposal of resources that implement IDisposable",
        "C": "To create thread-safe code blocks",
        "D": "To define regions of code that will be compiled conditionally"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What is an auto-implemented property in C#?",
      "options": {
        "A": "A property that automatically increments its value",
        "B": "A property where the compiler generates the backing field and basic accessor implementations",
        "C": "A property that can only be set during object initialization",
        "D": "A property that automatically updates when related properties change"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "for (int i = 0; i < 5; i++)\n{\n    if (i == 2)\n    {\n        continue;\n    }\n    Console.Write(i + \" \");\n}",
      "options": {
        "A": "0 1 3 4",
        "B": "0 1 2 3 4",
        "C": "0 1 2",
        "D": "0 1 3"
      },
      "correct_answer": "A"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "try\n{\n    int result = 10 / 0;\n    Console.WriteLine(\"After division\");\n}\ncatch (DivideByZeroException)\n{\n    Console.WriteLine(\"Division by zero\");\n}\nfinally\n{\n    Console.WriteLine(\"Finally block\");\n}",
      "options": {
        "A": "After division Finally block",
        "B": "Division by zero",
        "C": "Division by zero Finally block",
        "D": "Finally block"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string numberStr = \"123\";\nint number1 = Convert.ToInt32(numberStr);\nint number2 = int.Parse(numberStr);\nConsole.WriteLine(number1 == number2);",
      "options": {
        "A": "True",
        "B": "False",
        "C": "The code will throw an exception",
        "D": "123123"
      },
      "correct_answer": "A"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string invalidNumber = \"abc\";\nif (int.TryParse(invalidNumber, out int result))\n{\n    Console.WriteLine(\"Parsed: \" + result);\n}\nelse\n{\n    Console.WriteLine(\"Failed to parse\");\n}",
      "options": {
        "A": "Parsed: 0",
        "B": "Failed to parse",
        "C": "The code will throw a FormatException",
        "D": "The code will not compile"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What is the difference between 'var' and 'dynamic' in C#?",
      "options": {
        "A": "var is compiled at runtime, dynamic is compiled at compile time",
        "B": "var requires explicit type casting, dynamic does not",
        "C": "var is statically typed and resolved at compile time, dynamic is resolved at runtime",
        "D": "There is no difference, they can be used interchangeably"
      },
      "correct_answer": "C"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "In Entity Framework, what does the Code-First approach mean?",
      "options": {
        "A": "Writing your database schema first, then generating C# entity classes",
        "B": "Writing C# entity classes first, then letting EF generate the database schema",
        "C": "Writing stored procedures first, then mapping them to C# methods",
        "D": "Writing database views first, then mapping them to C# interfaces"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "In Entity Framework, what is the difference between Lazy Loading and Eager Loading?",
      "options": {
        "A": "Lazy Loading loads all related entities immediately, Eager Loading loads them only when accessed",
        "B": "Lazy Loading loads related entities only when accessed, Eager Loading loads them immediately",
        "C": "Lazy Loading only works with stored procedures, Eager Loading works with LINQ queries",
        "D": "Lazy Loading is more efficient for all types of queries than Eager Loading"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "In ASP.NET Web API, what's the difference between Conventional Routing and Attribute Routing?",
      "options": {
        "A": "Conventional Routing uses regular expressions, Attribute Routing uses simple string patterns",
        "B": "Conventional Routing uses a central route configuration, Attribute Routing uses annotations on controller methods",
        "C": "Conventional Routing only works with GET requests, Attribute Routing works with all HTTP methods",
        "D": "Conventional Routing is deprecated and shouldn't be used in new applications"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "Which of the following statements about the .NET Garbage Collector generations is TRUE?",
      "options": {
        "A": "Objects in Generation 2 are collected more frequently than those in Generation 0",
        "B": "New objects are created in Generation 2 and moved to Generation 0 if they survive garbage collection",
        "C": "Objects that survive collections in Generation 0 are promoted to Generation 1",
        "D": "The Large Object Heap (LOH) is part of Generation 0"
      },
      "correct_answer": "C"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "Which of the following best describes the Interface Segregation Principle?",
      "options": {
        "A": "Classes should depend on abstractions, not concrete implementations",
        "B": "A class should have only one reason to change",
        "C": "Clients should not be forced to depend on interfaces they do not use",
        "D": "Derived classes must be substitutable for their base classes"
      },
      "correct_answer": "C"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following code in a multi-threaded environment?",
      "code_example": "using System.Collections.Concurrent;\n\nConcurrentDictionary<string, int> scores = new ConcurrentDictionary<string, int>();\nscores.TryAdd(\"Alice\", 95);\nscores.TryAdd(\"Bob\", 80);\n\nbool updated = scores.TryUpdate(\"Alice\", 97, 95);\nConsole.WriteLine($\"Alice's score: {scores[\"Alice\"]}, Update successful: {updated}\");",
      "options": {
        "A": "Alice's score: 95, Update successful: false",
        "B": "Alice's score: 97, Update successful: true",
        "C": "The code will throw a KeyNotFoundException",
        "D": "The code will throw a ConcurrencyException"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "In ASP.NET Core dependency injection, what is the difference between Transient, Scoped, and Singleton service lifetimes?",
      "options": {
        "A": "Transient services are created once per application, Scoped services once per request, and Singleton services for each use",
        "B": "Transient services are created for each use, Scoped services once per request, and Singleton services once per application",
        "C": "Transient services are created once per session, Scoped services once per day, and Singleton services once per application",
        "D": "There is no difference; these are just alternative names for the same behavior"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "using (StreamReader reader = new StreamReader(\"example.txt\"))\n{\n    Console.WriteLine(\"File opened\");\n    throw new Exception(\"An error occurred\");\n}\nConsole.WriteLine(\"After using block\");",
      "options": {
        "A": "File opened",
        "B": "File opened After using block",
        "C": "An unhandled exception will occur, but the StreamReader will be properly disposed",
        "D": "An unhandled exception will occur and the StreamReader will not be disposed"
      },
      "correct_answer": "C"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class Person\n{\n    public string Name { get; private set; }\n    \n    public Person(string name)\n    {\n        Name = name;\n    }\n}\n\nPerson person = new Person(\"John\");\n// person.Name = \"Jane\"; // This line is commented out\nConsole.WriteLine(person.Name);",
      "options": {
        "A": "The code won't compile because Name is private",
        "B": "John",
        "C": "Jane",
        "D": "null"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class ButtonClickEventArgs : EventArgs\n{\n    public string ButtonName { get; }\n    \n    public ButtonClickEventArgs(string buttonName)\n    {\n        ButtonName = buttonName;\n    }\n}\n\npublic class Button\n{\n    public event EventHandler<ButtonClickEventArgs> Click;\n    \n    public void PerformClick(string buttonName)\n    {\n        Click?.Invoke(this, new ButtonClickEventArgs(buttonName));\n    }\n}\n\nButton button = new Button();\nbutton.Click += (sender, e) => Console.WriteLine($\"Button {e.ButtonName} was clicked\");\nbutton.PerformClick(\"Submit\");",
      "options": {
        "A": "Button Submit was clicked",
        "B": "Button was clicked",
        "C": "Submit was clicked",
        "D": "Nothing will be printed"
      },
      "correct_answer": "A"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar result = numbers.FirstOrDefault(x => x > 10);\nConsole.WriteLine(result);",
      "options": {
        "A": "null",
        "B": "0",
        "C": "An exception will be thrown",
        "D": "5"
      },
      "correct_answer": "B"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar result = numbers.SingleOrDefault(x => x > 4);\nConsole.WriteLine(result);",
      "options": {
        "A": "5",
        "B": "0",
        "C": "An InvalidOperationException will be thrown",
        "D": "null"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What is the main difference between SortedList<TKey, TValue> and SortedDictionary<TKey, TValue>?",
      "options": {
        "A": "SortedList uses less memory, while SortedDictionary has better insertion and removal performance",
        "B": "SortedDictionary uses less memory, while SortedList has better insertion and removal performance",
        "C": "SortedList only stores keys, while SortedDictionary stores key-value pairs",
        "D": "SortedDictionary can only use strings as keys, while SortedList can use any comparable type"
      },
      "correct_answer": "A"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public class Car\n{\n    public string Model { get; init; }\n    public int Year { get; init; }\n}\n\nCar car = new Car { Model = \"Tesla\", Year = 2023 };\n// car.Year = 2024; // This line is commented out\nConsole.WriteLine(car.Year);",
      "options": {
        "A": "2024",
        "B": "2023",
        "C": "0",
        "D": "The code won't compile"
      },
      "correct_answer": "B"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "var people = new List<(string Name, int Age)>\n{\n    (\"Alice\", 25),\n    (\"Bob\", 30),\n    (\"Charlie\", 20),\n    (\"David\", 35)\n};\n\nvar result = people\n    .Where(p => p.Age > 25)\n    .OrderBy(p => p.Name)\n    .Select(p => p.Name);\n\nforeach (var name in result)\n{\n    Console.Write(name + \" \");\n}",
      "options": {
        "A": "Alice Bob Charlie David",
        "B": "Bob David",
        "C": "David Bob",
        "D": "No output"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "var students = new List<(string Name, string Course)>\n{\n    (\"Alice\", \"Math\"),\n    (\"Bob\", \"Physics\"),\n    (\"Charlie\", \"Math\"),\n    (\"David\", \"Chemistry\")\n};\n\nvar courses = new List<(string CourseName, string Department)>\n{\n    (\"Math\", \"Science\"),\n    (\"Physics\", \"Science\"),\n    (\"Literature\", \"Arts\")\n};\n\nvar result = students.Join(\n    courses,\n    student => student.Course,\n    course => course.CourseName,\n    (student, course) => $\"{student.Name} - {course.Department}\"\n);\n\nforeach (var item in result)\n{\n    Console.WriteLine(item);\n}",
      "options": {
        "A": "Alice - Science Charlie - Science Bob - Science",
        "B": "Alice - Math Charlie - Math Bob - Physics David - Chemistry",
        "C": "Alice - Science Bob - Science Charlie - Science",
        "D": "No output"
      },
      "correct_answer": "C"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the output of the following code using the Singleton pattern?",
      "options": {
        "A": "Instance ID: 12345, Instance ID: 12345",
        "B": "Instance ID: [random number], Instance ID: [different random number]",
        "C": "Instance ID: [random number], Instance ID: [same random number]",
        "D": "Compilation error: Cannot access private constructor"
      },
      "correct_answer": "C",
      "code_example": "public class Singleton\n{\n    private static Singleton _instance;\n    private static readonly object _lock = new object();\n    private readonly int _instanceId;\n    private static readonly Random _random = new Random();\n\n    private Singleton()\n    {\n        _instanceId = _random.Next(10000, 99999);\n    }\n\n    public static Singleton GetInstance()\n    {\n        if (_instance == null)\n        {\n            lock (_lock)\n            {\n                if (_instance == null)\n                {\n                    _instance = new Singleton();\n                }\n            }\n        }\n        return _instance;\n    }\n\n    public void DisplayInstanceId()\n    {\n        Console.Write($\"Instance ID: {_instanceId}\");\n    }\n\n    public static void Main()\n    {\n        var instance1 = Singleton.GetInstance();\n        var instance2 = Singleton.GetInstance();\n        \n        instance1.DisplayInstanceId();\n        Console.Write(\", \");\n        instance2.DisplayInstanceId();\n    }\n}"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will happen when the following code with lock and Monitor is executed?",
      "options": {
        "A": "The code will print 'Task 1' followed by 'Task 2'",
        "B": "The code will print 'Task 2' followed by 'Task 1'",
        "C": "The code will deadlock and never complete",
        "D": "The code will throw a SynchronizationLockException"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class DeadlockExample\n{\n    private static readonly object _lock1 = new object();\n    private static readonly object _lock2 = new object();\n\n    public static void Main()\n    {\n        var task1 = Task.Run(() =>\n        {\n            lock (_lock1)\n            {\n                Thread.Sleep(100);\n                lock (_lock2)\n                {\n                    Console.WriteLine(\"Task 1\");\n                }\n            }\n        });\n\n        var task2 = Task.Run(() =>\n        {\n            lock (_lock2)\n            {\n                Thread.Sleep(100);\n                lock (_lock1)\n                {\n                    Console.WriteLine(\"Task 2\");\n                }\n            }\n        });\n\n        Task.WaitAll(task1, task2);\n    }\n}"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Which of the following statements about Semaphore and Mutex is true?",
      "options": {
        "A": "A Mutex can be released by any thread, while a Semaphore can only be released by the thread that acquired it",
        "B": "A Semaphore can be released by any thread, while a Mutex can only be released by the thread that acquired it",
        "C": "Both Semaphore and Mutex can be released by any thread",
        "D": "Both Semaphore and Mutex can only be released by the thread that acquired them"
      },
      "correct_answer": "B"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "What will be the output of the following code using ArrayPool<T>?",
      "options": {
        "A": "10, 0, 0",
        "B": "10, 20, 30",
        "C": "10, 20, 0",
        "D": "ArrayPoolException: Array has been returned to the pool"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Buffers;\n\nclass Program\n{\n    static void Main()\n    {\n        // Get array from the pool\n        int[] pooledArray = ArrayPool<int>.Shared.Rent(3);\n        \n        try\n        {\n            // Set values\n            pooledArray[0] = 10;\n            pooledArray[1] = 20;\n            pooledArray[2] = 30;\n            \n            // Return the array to the pool\n            ArrayPool<int>.Shared.Return(pooledArray, clearArray: true);\n            \n            // Try to access the array after returning it\n            Console.Write($\"{pooledArray[0]}, {pooledArray[1]}, {pooledArray[2]}\");\n        }\n        catch (Exception ex)\n        {\n            Console.Write(ex.GetType().Name + \": \" + ex.Message);\n        }\n    }\n}"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "In the Mediator Pattern implementation below, what will be output to the console?",
      "options": {
        "A": "Colleague1 sends message: Hello\nColleague2 receives message: Hello",
        "B": "Colleague1 sends message: Hello\nColleague1 receives message: Hello\nColleague2 receives message: Hello",
        "C": "Colleague1 sends message: Hello\nColleague2 receives message: Hello\nColleague3 receives message: Hello",
        "D": "Colleague1 sends message: Hello"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Collections.Generic;\n\npublic interface IMediator\n{\n    void Register(Colleague colleague);\n    void Send(string message, Colleague sender);\n}\n\npublic abstract class Colleague\n{\n    protected IMediator _mediator;\n\n    public Colleague(IMediator mediator)\n    {\n        _mediator = mediator;\n    }\n\n    public abstract void Send(string message);\n    public abstract void Receive(string message);\n}\n\npublic class ConcreteMediator : IMediator\n{\n    private List<Colleague> _colleagues = new List<Colleague>();\n\n    public void Register(Colleague colleague)\n    {\n        _colleagues.Add(colleague);\n    }\n\n    public void Send(string message, Colleague sender)\n    {\n        foreach (var colleague in _colleagues)\n        {\n            if (colleague != sender)\n            {\n                colleague.Receive(message);\n            }\n        }\n    }\n}\n\npublic class Colleague1 : Colleague\n{\n    public Colleague1(IMediator mediator) : base(mediator) { }\n\n    public override void Send(string message)\n    {\n        Console.WriteLine($\"Colleague1 sends message: {message}\");\n        _mediator.Send(message, this);\n    }\n\n    public override void Receive(string message)\n    {\n        Console.WriteLine($\"Colleague1 receives message: {message}\");\n    }\n}\n\npublic class Colleague2 : Colleague\n{\n    public Colleague2(IMediator mediator) : base(mediator) { }\n\n    public override void Send(string message)\n    {\n        Console.WriteLine($\"Colleague2 sends message: {message}\");\n        _mediator.Send(message, this);\n    }\n\n    public override void Receive(string message)\n    {\n        Console.WriteLine($\"Colleague2 receives message: {message}\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var mediator = new ConcreteMediator();\n        \n        var colleague1 = new Colleague1(mediator);\n        var colleague2 = new Colleague2(mediator);\n        \n        mediator.Register(colleague1);\n        mediator.Register(colleague2);\n        \n        colleague1.Send(\"Hello\");\n    }\n}"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What is the correct description of a readonly struct in C#?",
      "options": {
        "A": "A struct where all fields must be marked as readonly",
        "B": "A struct that cannot be modified after construction and implicitly makes all its fields readonly",
        "C": "A struct that can only be used within the assembly where it is defined",
        "D": "A struct that can only be used as a return type for methods"
      },
      "correct_answer": "B"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "Which statement about SignalR is NOT true?",
      "options": {
        "A": "SignalR automatically handles connection management and can reconnect clients when connections are lost",
        "B": "SignalR uses WebSockets as the only transport mechanism and falls back to other techniques when WebSockets isn't available",
        "C": "SignalR can broadcast messages to all connected clients or send messages to specific clients",
        "D": "SignalR supports server-to-client and client-to-server communication"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code using the dynamic type?",
      "options": {
        "A": "10\n10",
        "B": "10\nSystem.InvalidOperationException",
        "C": "10\nMicrosoft.CSharp.RuntimeBinder.RuntimeBinderException",
        "D": "System.InvalidCastException\nSystem.InvalidCastException"
      },
      "correct_answer": "C",
      "code_example": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try\n        {\n            dynamic value = 10;\n            Console.WriteLine(value);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.GetType().FullName);\n        }\n        \n        try\n        {\n            dynamic value = 10;\n            string result = value.ToString(\"X2\"); // Valid for int but called dynamically\n            Console.WriteLine(result);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.GetType().FullName);\n        }\n    }\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code using Span<T> and Memory<T>?",
      "options": {
        "A": "Original array: 1,2,3,4,5\nChanged span: 1,99,3,4,5\nChanged memory: 1,99,3,4,5",
        "B": "Original array: 1,2,3,4,5\nChanged span: 1,99,3,4,5\nChanged memory: 1,2,3,4,5",
        "C": "System.InvalidOperationException: Cannot use Span in async methods",
        "D": "Original array: 1,2,3,4,5\nChanged span: 1,2,3,4,5\nChanged memory: 1,99,3,4,5"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        int[] array = { 1, 2, 3, 4, 5 };\n        \n        Span<int> span = array;\n        Memory<int> memory = array;\n        \n        Console.WriteLine($\"Original array: {string.Join(\",\", array)}\");\n        \n        span[1] = 99;\n        Console.WriteLine($\"Changed span: {string.Join(\",\", array)}\");\n        \n        Memory<int> slicedMemory = memory.Slice(0, 5);\n        Span<int> spanFromMemory = slicedMemory.Span;\n        spanFromMemory[1] = 99; // This is already 99 from above, no change\n        \n        Console.WriteLine($\"Changed memory: {string.Join(\",\", array)}\");\n    }\n}"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following statements about Apache Kafka is correct?",
      "options": {
        "A": "Kafka uses a pull-based model where producers pull messages from brokers",
        "B": "Kafka messages are automatically deleted after they are consumed by a consumer",
        "C": "Kafka topics are divided into partitions, and messages within a partition are ordered",
        "D": "Kafka consumers must acknowledge message reception before the message is sent by the producer"
      },
      "correct_answer": "C"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code using MethodInfo.Invoke()?",
      "options": {
        "A": "Hello, World!",
        "B": "System.Reflection.TargetParameterCountException",
        "C": "System.MissingMethodException",
        "D": "System.ArgumentException: Method not found"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Reflection;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try\n        {\n            // Get type information\n            Type type = typeof(MessagePrinter);\n            \n            // Create instance\n            object instance = Activator.CreateInstance(type);\n            \n            // Get method info\n            MethodInfo methodInfo = type.GetMethod(\"PrintMessage\");\n            \n            // Invoke the method\n            methodInfo.Invoke(instance, null); // Should be passing parameters here\n            \n            Console.WriteLine(\"Method invoked successfully\");\n        }\n        catch (Exception ex)\n        {\n            // Unwrap the TargetInvocationException to get the actual exception\n            if (ex is TargetInvocationException)\n            {\n                Console.WriteLine(ex.InnerException.GetType().Name);\n            }\n            else\n            {\n                Console.WriteLine(ex.GetType().Name);\n            }\n        }\n    }\n}\n\npublic class MessagePrinter\n{\n    public void PrintMessage(string message)\n    {\n        Console.WriteLine(message);\n    }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "When implementing OAuth with IdentityServer4, which of the following grant types is most appropriate for a single-page application (SPA) that needs to authenticate users?",
      "options": {
        "A": "Client Credentials Grant",
        "B": "Resource Owner Password Credentials Grant",
        "C": "Authorization Code Grant with PKCE",
        "D": "Implicit Grant"
      },
      "correct_answer": "C"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code implementing role-based authentication?",
      "options": {
        "A": "Access granted to Admin area",
        "B": "Access denied",
        "C": "System.Security.Authentication.AuthenticationException",
        "D": "System.UnauthorizedAccessException"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Collections.Generic;\nusing System.Security.Claims;\nusing System.Security.Principal;\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Create a claims identity with User role\n        var claims = new List<Claim>\n        {\n            new Claim(ClaimTypes.Name, \"testuser\"),\n            new Claim(ClaimTypes.Role, \"User\")\n        };\n        \n        var identity = new ClaimsIdentity(claims, \"Custom\");\n        var principal = new ClaimsPrincipal(identity);\n        \n        // Check if user has Admin role\n        if (principal.IsInRole(\"Admin\"))\n        {\n            Console.Write(\"Access granted to Admin area\");\n        }\n        else\n        {\n            Console.Write(\"Access denied\");\n        }\n    }\n}"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code using CancellationToken?",
      "options": {
        "A": "Operation started\nOperation completed successfully",
        "B": "Operation started\nOperation was canceled",
        "C": "Operation started\nSystem.OperationCanceledException: The operation was canceled",
        "D": "Operation started\nTask 2 has been completed"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        var cts = new CancellationTokenSource();\n        var token = cts.Token;\n        \n        var task = Task.Run(async () =>\n        {\n            try\n            {\n                Console.WriteLine(\"Operation started\");\n                \n                // Simulate some work\n                await Task.Delay(5000, token);\n                \n                Console.WriteLine(\"Operation completed successfully\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"{ex.GetType().Name}: {ex.Message}\");\n            }\n        });\n        \n        // Cancel the operation after 1 second\n        await Task.Delay(1000);\n        cts.Cancel();\n        \n        // Wait for the task to complete\n        await task;\n    }\n}"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "Which of the following statements about JWT Authentication is NOT correct?",
      "options": {
        "A": "JWTs can contain claims about the authenticated user, such as roles and permissions",
        "B": "JWTs are stateless, meaning the server does not need to store session information",
        "C": "JWTs can be encrypted to prevent the client from reading the token content",
        "D": "Once a JWT is issued, it cannot be revoked before its expiration time unless a database of invalid tokens is maintained on the server"
      },
      "correct_answer": "C"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "Which Kubernetes resource should be used to deploy a .NET application with a fixed number of replicas that can be updated without downtime?",
      "options": {
        "A": "StatefulSet",
        "B": "DaemonSet",
        "C": "Deployment",
        "D": "CronJob"
      },
      "correct_answer": "C"
    }
  ]
}
