{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "topic": "Named Parameters",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    PrintCoordinates(y: 20, x: 10);\n}\n\nvoid PrintCoordinates(int x, int y)\n{\n    Console.WriteLine($\"X: {x}, Y: {y}\");\n}",
      "options": {
        "A": "X: 20, Y: 10",
        "B": "X: 10, Y: 20",
        "C": "y: 20, x: 10",
        "D": "Compilation error: Parameters must be provided in order"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "topic": "Custom Exceptions",
      "question": "Which of the following correctly defines a custom exception class in C#?",
      "options": {
        "A": "class MyException : Exception { }",
        "B": "class MyException extends Exception { }",
        "C": "exception MyException : Exception { }",
        "D": "public void MyException() : base(Exception) { }"
      },
      "correct_answer": "A"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "topic": "Immutable nature of string",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    string text = \"Hello\";\n    ModifyString(text);\n    Console.WriteLine(text);\n}\n\nvoid ModifyString(string str)\n{\n    str = str + \" World\";\n}",
      "options": {
        "A": "Hello World",
        "B": "Hello",
        "C": "World",
        "D": "HelloHello World"
      },
      "correct_answer": "B"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "topic": "File operations",
      "question": "Which method would you use to read the entire content of a text file into a single string?",
      "options": {
        "A": "File.OpenText()",
        "B": "File.ReadAllLines()",
        "C": "File.ReadAllText()",
        "D": "File.ReadBytes()"
      },
      "correct_answer": "C"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "topic": "Properties",
      "question": "What will be the output of the following code?",
      "code_example": "class Person\n{\n    private string name;\n    \n    public string Name\n    {\n        get { return name; }\n        set { name = value; }\n    }\n}\n\nvoid Main()\n{\n    Person person = new Person();\n    person.Name = \"Alice\";\n    Console.WriteLine(person.Name);\n}",
      "options": {
        "A": "Alice",
        "B": "null",
        "C": "\"\"",
        "D": "Compilation error: Cannot access private field"
      },
      "correct_answer": "A"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "topic": "String Interpolation",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    string name = \"John\";\n    int age = 25;\n    Console.WriteLine($\"{name} is {age} years old.\");\n}",
      "options": {
        "A": "{name} is {age} years old.",
        "B": "John is 25 years old.",
        "C": "\"John\" is \"25\" years old.",
        "D": "name is age years old."
      },
      "correct_answer": "B"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "topic": "if-else",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    int x = 10;\n    \n    if (x > 5)\n        Console.Write(\"A\");\n    else if (x > 8)\n        Console.Write(\"B\");\n    \n    if (x > 9)\n        Console.Write(\"C\");\n}",
      "options": {
        "A": "A",
        "B": "AC",
        "C": "B",
        "D": "BC"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "topic": "Arithmetic operators",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    int a = 15;\n    int b = 4;\n    Console.WriteLine(a / b + \" \" + a % b);\n}",
      "options": {
        "A": "3.75",
        "B": "3 3",
        "C": "3.75 0",
        "D": "3 3.0"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "topic": "LINQ",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    List<int> numbers = new List<int>() { 1, 2, 3, 4, 5 };\n    var result = numbers.Where(n => n > 2).Select(n => n * 2);\n    Console.WriteLine(string.Join(\", \", result));\n}",
      "options": {
        "A": "3, 4, 5",
        "B": "6, 8, 10",
        "C": "1, 2, 3, 4, 5",
        "D": "2, 4, 6, 8, 10"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "topic": "Object creation",
      "question": "Which of the following correctly instantiates a new object of class Customer?",
      "options": {
        "A": "Customer c = Customer();",
        "B": "Customer c = new();",
        "C": "var c = new Customer();",
        "D": "Customer c = make Customer();"
      },
      "correct_answer": "C"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "topic": "Reference types",
      "question": "Which of the following is NOT a reference type in C#?",
      "options": {
        "A": "string",
        "B": "int",
        "C": "class",
        "D": "interface"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "topic": "Exception handling",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    try\n    {\n        Console.Write(\"A\");\n        throw new Exception();\n        Console.Write(\"B\");\n    }\n    catch\n    {\n        Console.Write(\"C\");\n    }\n    finally\n    {\n        Console.Write(\"D\");\n    }\n}",
      "options": {
        "A": "ABCD",
        "B": "ACD",
        "C": "ABD",
        "D": "AD"
      },
      "correct_answer": "B"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "topic": "Jagged arrays",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    int[][] jaggedArray = new int[3][];\n    jaggedArray[0] = new int[] { 1, 2 };\n    jaggedArray[1] = new int[] { 3, 4, 5 };\n    jaggedArray[2] = new int[] { 6 };\n    \n    Console.WriteLine(jaggedArray[1][2]);\n}",
      "options": {
        "A": "3",
        "B": "4",
        "C": "5",
        "D": "IndexOutOfRangeException"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "topic": "Multi-dimensional arrays",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    int[,] matrix = new int[2, 3];\n    matrix[0, 0] = 1;\n    matrix[0, 1] = 2;\n    matrix[0, 2] = 3;\n    matrix[1, 0] = 4;\n    matrix[1, 1] = 5;\n    matrix[1, 2] = 6;\n    \n    Console.WriteLine(matrix.Length);\n}",
      "options": {
        "A": "2",
        "B": "3",
        "C": "5",
        "D": "6"
      },
      "correct_answer": "D"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "topic": "StringBuilder vs string",
      "question": "Which of the following statements about StringBuilder vs string is correct?",
      "options": {
        "A": "StringBuilder is immutable while string is mutable",
        "B": "StringBuilder is more efficient for a small number of string operations",
        "C": "StringBuilder is more efficient when performing many string concatenations",
        "D": "StringBuilder can only append strings, not insert or remove characters"
      },
      "correct_answer": "C"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "topic": "var vs dynamic",
      "question": "What is the key difference between var and dynamic in C#?",
      "options": {
        "A": "var is resolved at compile-time, dynamic is resolved at runtime",
        "B": "var can only be used for primitive types, dynamic for complex types",
        "C": "var requires explicit type conversion, dynamic does not",
        "D": "var is for value types, dynamic is for reference types"
      },
      "correct_answer": "A"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "topic": "using statement",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    string result = \"\";\n    \n    using (Resource resource1 = new Resource(\"A\"))\n    {\n        result += resource1.Name;\n        using (Resource resource2 = new Resource(\"B\"))\n        {\n            result += resource2.Name;\n        }\n        result += \"C\";\n    }\n    \n    Console.WriteLine(result);\n}\n\nclass Resource : IDisposable\n{\n    public string Name { get; }\n    \n    public Resource(string name)\n    {\n        Name = name;\n    }\n    \n    public void Dispose()\n    {\n        // Resource cleanup logic\n    }\n}",
      "options": {
        "A": "A",
        "B": "AB",
        "C": "ABC",
        "D": "ACB"
      },
      "correct_answer": "C"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "topic": "Auto-implemented properties",
      "question": "What will be the output of the following code?",
      "code_example": "class Product\n{\n    public string Name { get; set; } = \"Default\";\n    public decimal Price { get; set; }\n}\n\nvoid Main()\n{\n    Product p = new Product();\n    Console.WriteLine($\"{p.Name}, {p.Price}\");\n}",
      "options": {
        "A": "null, 0",
        "B": "Default, 0",
        "C": "\"\", 0",
        "D": "Default, null"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "topic": "LINQ",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    var students = new List<Student>\n    {\n        new Student { Name = \"Alice\", Grade = 80 },\n        new Student { Name = \"Bob\", Grade = 90 },\n        new Student { Name = \"Charlie\", Grade = 80 },\n        new Student { Name = \"Dave\", Grade = 75 }\n    };\n    \n    var groups = students\n        .GroupBy(s => s.Grade)\n        .Select(g => new { Grade = g.Key, Count = g.Count() })\n        .OrderByDescending(x => x.Count)\n        .ThenBy(x => x.Grade);\n    \n    foreach (var group in groups)\n    {\n        Console.WriteLine($\"Grade: {group.Grade}, Count: {group.Count}\");\n    }\n}\n\nclass Student\n{\n    public string Name { get; set; }\n    public int Grade { get; set; }\n}",
      "options": {
        "A": "Grade: 80, Count: 2\nGrade: 75, Count: 1\nGrade: 90, Count: 1",
        "B": "Grade: 90, Count: 1\nGrade: 80, Count: 2\nGrade: 75, Count: 1",
        "C": "Grade: 75, Count: 1\nGrade: 80, Count: 2\nGrade: 90, Count: 1",
        "D": "Grade: 80, Count: 2\nGrade: 90, Count: 1\nGrade: 75, Count: 1"
      },
      "correct_answer": "A"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "topic": "Code-first approach",
      "question": "In Entity Framework's Code-First approach, which of the following is NOT a way to configure a property as a primary key?",
      "options": {
        "A": "Adding the [Key] attribute to the property",
        "B": "Using Fluent API: modelBuilder.Entity<T>().HasKey(e => e.PropertyName)",
        "C": "Naming the property as 'Id' or 'ClassNameId'",
        "D": "Using the [PrimaryKey] attribute on the property"
      },
      "correct_answer": "D"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "topic": "LINQ methods",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    List<int> numbers = new List<int>();\n    \n    var result1 = numbers.FirstOrDefault();\n    var result2 = numbers.SingleOrDefault();\n    var result3 = numbers.FirstOrDefault(n => n > 10);\n    \n    Console.WriteLine($\"{result1}, {result2}, {result3}\");\n}",
      "options": {
        "A": "null, null, null",
        "B": "0, 0, 0",
        "C": "InvalidOperationException",
        "D": "Exception: Sequence contains no elements"
      },
      "correct_answer": "B"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "topic": "Lambda expressions",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    Func<int, int, int> add = (x, y) => x + y;\n    Func<int, int, int> multiply = (x, y) => x * y;\n    \n    Func<Func<int, int, int>, int, int, int> calculate = (operation, a, b) => operation(a, b);\n    \n    Console.WriteLine(calculate(add, 5, 3));\n    Console.WriteLine(calculate(multiply, 5, 3));\n}",
      "options": {
        "A": "8\n15",
        "B": "8\n8",
        "C": "5\n15",
        "D": "3\n15"
      },
      "correct_answer": "A"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "topic": "HashSet vs Dictionary",
      "question": "Which statement about HashSet<T> compared to Dictionary<TKey, TValue> is correct?",
      "options": {
        "A": "HashSet<T> allows duplicate elements while Dictionary<TKey, TValue> requires unique keys",
        "B": "HashSet<T> stores key-value pairs while Dictionary<TKey, TValue> stores only values",
        "C": "HashSet<T> stores unique elements without associated values, while Dictionary<TKey, TValue> stores unique keys with associated values",
        "D": "HashSet<T> has O(n) lookup complexity while Dictionary<TKey, TValue> has O(1) lookup complexity"
      },
      "correct_answer": "C"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "topic": "Parallel processing",
      "question": "What is the primary purpose of Parallel.ForEach() in C#?",
      "options": {
        "A": "To execute each iteration of a loop on a different thread in a sequential manner",
        "B": "To execute loop iterations in parallel using multiple threads from the thread pool",
        "C": "To create a new process for each iteration of the loop",
        "D": "To ensure that loop iterations are executed in reverse order"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "topic": "Dependency Injection lifetimes",
      "question": "In ASP.NET Core dependency injection, what is the key difference between Scoped and Singleton service lifetimes?",
      "options": {
        "A": "Scoped services are shared across all HTTP requests, while Singleton services are created per request",
        "B": "Scoped services are created once per client request, while Singleton services exist for the entire application lifetime",
        "C": "Scoped services are created for each object that requires it, while Singleton services are created per HTTP request",
        "D": "Scoped services are recreated on each method call, while Singleton services are created once per object"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "topic": "Garbage Collection",
      "question": "What does calling GC.Collect() explicitly do in a C# application?",
      "options": {
        "A": "It forces immediate garbage collection of all generations",
        "B": "It prevents garbage collection from occurring for a specified period",
        "C": "It efficiently optimizes memory allocation for all new objects",
        "D": "It disables garbage collection for the remainder of the application's lifecycle"
      },
      "correct_answer": "A"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "topic": "Read-only properties",
      "question": "What will be the output of the following code?",
      "code_example": "class Configuration\n{\n    public string ConnectionString { get; private set; }\n    \n    public Configuration(string connectionString)\n    {\n        ConnectionString = connectionString;\n    }\n    \n    public void Reset()\n    {\n        ConnectionString = string.Empty;\n    }\n}\n\nvoid Main()\n{\n    var config = new Configuration(\"Server=myserver;Database=mydb\");\n    Console.WriteLine(config.ConnectionString.Length > 0);\n    config.Reset();\n    Console.WriteLine(config.ConnectionString.Length > 0);\n}",
      "options": {
        "A": "true\nfalse",
        "B": "true\ntrue",
        "C": "false\nfalse",
        "D": "Compilation error: Cannot assign to ConnectionString outside of constructor"
      },
      "correct_answer": "A"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "topic": "LINQ Join methods",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    var departments = new List<Department>\n    {\n        new Department { Id = 1, Name = \"HR\" },\n        new Department { Id = 2, Name = \"IT\" }\n    };\n    \n    var employees = new List<Employee>\n    {\n        new Employee { Id = 1, Name = \"Alice\", DepartmentId = 1 },\n        new Employee { Id = 2, Name = \"Bob\", DepartmentId = 2 },\n        new Employee { Id = 3, Name = \"Charlie\", DepartmentId = 2 },\n        new Employee { Id = 4, Name = \"Dave\", DepartmentId = 3 }\n    };\n    \n    var query = departments.GroupJoin(\n        employees,\n        d => d.Id,\n        e => e.DepartmentId,\n        (dept, emps) => new { DeptName = dept.Name, EmpCount = emps.Count() }\n    );\n    \n    foreach (var item in query)\n    {\n        Console.WriteLine($\"{item.DeptName}: {item.EmpCount}\");\n    }\n}\n\nclass Department\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\nclass Employee\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int DepartmentId { get; set; }\n}",
      "options": {
        "A": "HR: 1\nIT: 2",
        "B": "HR: 1\nIT: 2\nUnknown: 1",
        "C": "HR: 1\nIT: 2\nDepartment 3: 1",
        "D": "HR: Alice\nIT: Bob, Charlie"
      },
      "correct_answer": "A"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "topic": "HTTP Attributes",
      "question": "Which of the following statements about [HttpGet] and [HttpPost] attributes in ASP.NET Core is correct?",
      "options": {
        "A": "[HttpGet] is used for actions that create resources, while [HttpPost] is used for retrieving data",
        "B": "[HttpGet] actions can receive data only through the URL, while [HttpPost] actions can receive data through the request body",
        "C": "[HttpGet] requires authentication, while [HttpPost] doesn't",
        "D": "[HttpGet] can handle complex objects in the request, while [HttpPost] can only handle primitive types"
      },
      "correct_answer": "B"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "topic": "Interface segregation principle",
      "question": "Which of the following best describes the Interface Segregation Principle in C#?",
      "options": {
        "A": "Classes should depend on abstractions, not on concrete implementations",
        "B": "A class should have only one reason to change",
        "C": "Clients should not be forced to depend on interfaces they do not use",
        "D": "You should be able to substitute a base class with its derived class without affecting the program"
      },
      "correct_answer": "C"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "topic": "Deferred Execution",
      "question": "What will be the output of the following code?",
      "code_example": "void Main()\n{\n    List<int> numbers = new List<int> { 1, 2, 3, 4 };\n    \n    var query = numbers.Where(n => n > 2);\n    Console.Write(string.Join(\", \", query) + \" | \");\n    \n    numbers.Add(5);\n    Console.Write(string.Join(\", \", query));\n}",
      "options": {
        "A": "3, 4 | 3, 4",
        "B": "3, 4 | 3, 4, 5",
        "C": "3, 4, 5 | 3, 4, 5",
        "D": "The query will be evaluated only once with the result: 3, 4"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "topic": "Model binding",
      "question": "Which of the following is NOT a valid way to bind data to controller action parameters in ASP.NET Core?",
      "code_example": "public class UserController : Controller\n{\n    // Option A\n    [HttpPost]\n    public IActionResult Create([FromBody] User user)\n    {\n        // Implementation\n    }\n    \n    // Option B\n    [HttpGet]\n    public IActionResult Details([FromRoute] int id)\n    {\n        // Implementation\n    }\n    \n    // Option C\n    [HttpGet]\n    public IActionResult Search([FromQuery] string term)\n    {\n        // Implementation\n    }\n    \n    // Option D\n    [HttpPost]\n    public IActionResult Update([FromDatabase] User user)\n    {\n        // Implementation\n    }\n}",
      "options": {
        "A": "[FromBody]",
        "B": "[FromRoute]",
        "C": "[FromQuery]",
        "D": "[FromDatabase]"
      },
      "correct_answer": "D"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "Consider the following code using ArrayPool<T>. What will be the output?",
      "options": {
        "A": "Length: 8, Capacity: 8",
        "B": "Length: 5, Capacity: 8",
        "C": "Length: 5, Capacity: 5",
        "D": "Length: 8, Capacity: 16"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Buffers;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numbers = { 1, 2, 3, 4, 5 };\n        \n        // Rent an array from the shared pool\n        int[] rentedArray = ArrayPool<int>.Shared.Rent(numbers.Length);\n        \n        // Copy the data to the rented array\n        Array.Copy(numbers, rentedArray, numbers.Length);\n        \n        // Print the actual length of data and the capacity of the rented array\n        Console.WriteLine($\"Length: {numbers.Length}, Capacity: {rentedArray.Length}\");\n        \n        // Return the array to the pool\n        ArrayPool<int>.Shared.Return(rentedArray);\n    }\n}"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "When configuring CORS in ASP.NET Core, which of the following statements is INCORRECT?",
      "options": {
        "A": "The AllowAnyOrigin() method can be used together with AllowCredentials() to allow all origins with credentials",
        "B": "The AddCors() method must be called before AddControllers() in the ConfigureServices method",
        "C": "The UseCors() middleware must be called before UseRouting() in the Configure method",
        "D": "Multiple named CORS policies can be defined and applied to different controllers or actions"
      },
      "correct_answer": "A",
      "code_example": ""
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code using Span<T>?",
      "options": {
        "A": "10, 20, 30",
        "B": "10, 20, 30, 40, 50",
        "C": "10, 20, 30, 0, 0",
        "D": "Compilation error: Cannot create a Span from a string"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numbers = { 10, 20, 30, 40, 50 };\n        \n        Span<int> span = numbers;\n        Span<int> slice = span.Slice(0, 3);\n        \n        foreach (var item in slice)\n        {\n            Console.Write($\"{item}, \");\n        }\n    }\n}"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "In the Observer pattern implementation below, what will be printed to the console?",
      "options": {
        "A": "Weather update: 28°C\nDisplay: 28°C\nLogger: 28°C",
        "B": "Display: 28°C\nLogger: 28°C\nWeather update: 28°C",
        "C": "Weather update: 28°C\nLogger: 28°C\nDisplay: 28°C",
        "D": "Weather update: 28°C"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Collections.Generic;\n\n// Observer interface\npublic interface IObserver\n{\n    void Update(float temperature);\n}\n\n// Subject\npublic class WeatherStation\n{\n    private float _temperature;\n    private List<IObserver> _observers = new List<IObserver>();\n\n    public void RegisterObserver(IObserver observer)\n    {\n        _observers.Add(observer);\n    }\n\n    public void SetTemperature(float temperature)\n    {\n        _temperature = temperature;\n        Console.WriteLine($\"Weather update: {_temperature}°C\");\n        NotifyObservers();\n    }\n\n    private void NotifyObservers()\n    {\n        foreach (var observer in _observers)\n        {\n            observer.Update(_temperature);\n        }\n    }\n}\n\n// Concrete observers\npublic class TemperatureDisplay : IObserver\n{\n    public void Update(float temperature)\n    {\n        Console.WriteLine($\"Display: {temperature}°C\");\n    }\n}\n\npublic class TemperatureLogger : IObserver\n{\n    public void Update(float temperature)\n    {\n        Console.WriteLine($\"Logger: {temperature}°C\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        WeatherStation weatherStation = new WeatherStation();\n        TemperatureDisplay display = new TemperatureDisplay();\n        TemperatureLogger logger = new TemperatureLogger();\n\n        weatherStation.RegisterObserver(display);\n        weatherStation.RegisterObserver(logger);\n\n        weatherStation.SetTemperature(28);\n    }\n}"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "Which of the following is NOT a characteristic of the Factory Pattern in C#?",
      "options": {
        "A": "It provides an interface for creating objects without specifying their concrete classes",
        "B": "It reduces coupling between the client code and the concrete classes",
        "C": "It enforces singleton behavior for all created objects",
        "D": "It allows for extension by adding new product types without modifying existing factory code"
      },
      "correct_answer": "C",
      "code_example": ""
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses COM Interop to interact with Excel?",
      "options": {
        "A": "Exception: Unable to cast COM object",
        "B": "Compilation error: Missing PIA reference",
        "C": "Value at A1: 100",
        "D": "Value at A1: System.__ComObject"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Runtime.InteropServices;\n\nclass Program\n{\n    static void Main()\n    {\n        // Create a new Excel Application\n        Type excelType = Type.GetTypeFromProgID(\"Excel.Application\");\n        dynamic excel = Activator.CreateInstance(excelType);\n        \n        try\n        {\n            // Make Excel visible (for demo purposes)\n            excel.Visible = true;\n            \n            // Add a new workbook\n            var workbooks = excel.Workbooks;\n            var workbook = workbooks.Add();\n            var worksheet = workbook.Worksheets[1];\n            \n            // Set a value in cell A1\n            worksheet.Range[\"A1\"].Value = 100;\n            \n            // Read the value from A1\n            var value = worksheet.Range[\"A1\"].Value;\n            Console.WriteLine($\"Value at A1: {value}\");\n            \n            // For the purpose of the example, we'll simulate the output\n            // without actually requiring Excel to be installed\n            Console.WriteLine(\"Value at A1: 100\");\n        }\n        finally\n        {\n            // Clean up COM objects\n            if (excel != null)\n            {\n                excel.Quit();\n                Marshal.ReleaseComObject(excel);\n            }\n        }\n    }\n}"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What is the security vulnerability in the following JWT authentication implementation?",
      "options": {
        "A": "The token expiration is set too far in the future",
        "B": "The validation parameters don't validate the issuer",
        "C": "The audience parameter is missing in the token generation",
        "D": "The signing key is hardcoded and not securely stored"
      },
      "correct_answer": "D",
      "code_example": "using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Text;\nusing Microsoft.IdentityModel.Tokens;\n\npublic class JwtAuthenticationService\n{\n    private readonly string _secretKey = \"MySuperSecretKeyForJwtAuthentication123456789\";\n    \n    public string GenerateToken(string username, string[] roles)\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = Encoding.ASCII.GetBytes(_secretKey);\n        \n        var claims = new List<Claim>\n        {\n            new Claim(ClaimTypes.Name, username)\n        };\n        \n        foreach (var role in roles)\n        {\n            claims.Add(new Claim(ClaimTypes.Role, role));\n        }\n        \n        var tokenDescriptor = new SecurityTokenDescriptor\n        {\n            Subject = new ClaimsIdentity(claims),\n            Expires = DateTime.UtcNow.AddDays(7),\n            SigningCredentials = new SigningCredentials(\n                new SymmetricSecurityKey(key),\n                SecurityAlgorithms.HmacSha256Signature)\n        };\n        \n        var token = tokenHandler.CreateToken(tokenDescriptor);\n        return tokenHandler.WriteToken(token);\n    }\n    \n    public ClaimsPrincipal ValidateToken(string token)\n    {\n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = Encoding.ASCII.GetBytes(_secretKey);\n        \n        var validationParameters = new TokenValidationParameters\n        {\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(key),\n            ValidateIssuer = false,\n            ValidateAudience = false,\n            ClockSkew = TimeSpan.Zero\n        };\n        \n        return tokenHandler.ValidateToken(token, validationParameters, out _);\n    }\n}"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates the use of lock and Monitor?",
      "options": {
        "A": "Thread1: Acquired lock\nThread1: Released lock\nThread2: Acquired lock\nThread2: Released lock",
        "B": "Thread2: Acquired lock\nThread2: Released lock\nThread1: Acquired lock\nThread1: Released lock",
        "C": "Either option A or B, depending on which thread acquires the lock first",
        "D": "Deadlock will occur and no output will be produced"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Threading;\n\nclass Program\n{\n    private static readonly object _lockObject = new object();\n    \n    static void Main()\n    {\n        Thread thread1 = new Thread(() => DoWork(\"Thread1\"));\n        Thread thread2 = new Thread(() => DoWork(\"Thread2\"));\n        \n        thread1.Start();\n        thread2.Start();\n        \n        thread1.Join();\n        thread2.Join();\n    }\n    \n    static void DoWork(string threadName)\n    {\n        // Using lock statement\n        lock (_lockObject)\n        {\n            Console.WriteLine($\"{threadName}: Acquired lock\");\n            Thread.Sleep(100); // Simulate work\n            Console.WriteLine($\"{threadName}: Released lock\");\n        }\n        \n        // Equivalent Monitor usage\n        /*\n        bool lockTaken = false;\n        try\n        {\n            Monitor.Enter(_lockObject, ref lockTaken);\n            Console.WriteLine($\"{threadName}: Acquired lock\");\n            Thread.Sleep(100); // Simulate work\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Console.WriteLine($\"{threadName}: Released lock\");\n                Monitor.Exit(_lockObject);\n            }\n        }\n        */\n    }\n}"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "Which statement about the Repository Pattern implementation below is INCORRECT?",
      "options": {
        "A": "The Repository Pattern abstracts the data access layer from the business logic",
        "B": "The IProductRepository interface follows the Dependency Inversion Principle",
        "C": "The ProductRepository class encapsulates the logic for retrieving and persisting products",
        "D": "The ProductRepository.GetById method will throw an exception if the product is not found"
      },
      "correct_answer": "D",
      "code_example": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\n// Entity\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n\n// Repository interface\npublic interface IProductRepository\n{\n    Product GetById(int id);\n    IEnumerable<Product> GetAll();\n    void Add(Product product);\n    void Update(Product product);\n    void Delete(int id);\n}\n\n// Repository implementation\npublic class ProductRepository : IProductRepository\n{\n    private readonly List<Product> _products;\n    \n    public ProductRepository()\n    {\n        // In a real implementation, this would be database access\n        _products = new List<Product>\n        {\n            new Product { Id = 1, Name = \"Laptop\", Price = 1200 },\n            new Product { Id = 2, Name = \"Phone\", Price = 800 },\n            new Product { Id = 3, Name = \"Tablet\", Price = 500 }\n        };\n    }\n    \n    public Product GetById(int id)\n    {\n        return _products.FirstOrDefault(p => p.Id == id);\n    }\n    \n    public IEnumerable<Product> GetAll()\n    {\n        return _products;\n    }\n    \n    public void Add(Product product)\n    {\n        if (product == null)\n            throw new ArgumentNullException(nameof(product));\n            \n        _products.Add(product);\n    }\n    \n    public void Update(Product product)\n    {\n        if (product == null)\n            throw new ArgumentNullException(nameof(product));\n            \n        var existingProduct = GetById(product.Id);\n        if (existingProduct != null)\n        {\n            // Update the existing product\n            existingProduct.Name = product.Name;\n            existingProduct.Price = product.Price;\n        }\n    }\n    \n    public void Delete(int id)\n    {\n        var product = GetById(id);\n        if (product != null)\n        {\n            _products.Remove(product);\n        }\n    }\n}"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates string interning in C#?",
      "options": {
        "A": "References equal: True\nContents equal: True\nReference after intern: Same\nCompare interned with literal: Same",
        "B": "References equal: False\nContents equal: True\nReference after intern: Same\nCompare interned with literal: Same",
        "C": "References equal: False\nContents equal: True\nReference after intern: Different\nCompare interned with literal: Same",
        "D": "References equal: False\nContents equal: True\nReference after intern: Same\nCompare interned with literal: Different"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        // String literal is automatically interned by the compiler\n        string s1 = \"Hello, World!\";\n        \n        // Dynamically created string (not interned)\n        StringBuilder sb = new StringBuilder();\n        sb.Append(\"Hello, \");\n        sb.Append(\"World!\");\n        string s2 = sb.ToString();\n        \n        // Compare references\n        Console.WriteLine($\"References equal: {ReferenceEquals(s1, s2)}\");\n        \n        // Compare contents\n        Console.WriteLine($\"Contents equal: {s1.Equals(s2)}\");\n        \n        // Intern the dynamically created string\n        string s3 = string.Intern(s2);\n        \n        // Check if the interned string reference matches the original\n        Console.WriteLine($\"Reference after intern: {(ReferenceEquals(s2, s3) ? \"Same\" : \"Different\")}\");\n        \n        // Compare the interned string with the string literal\n        Console.WriteLine($\"Compare interned with literal: {(ReferenceEquals(s1, s3) ? \"Same\" : \"Different\")}\");\n    }\n}"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses Assembly.Load() and Type.GetType() for dynamic type loading?",
      "options": {
        "A": "Full name: System.String\nMethod count: 0",
        "B": "Full name: System.String\nMethod count: [correct number of methods in String class]",
        "C": "Full name: System.Collections.Generic.List`1[System.Int32]\nMethod count: 0",
        "D": "Full name: null\nMethod count: 0"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Reflection;\n\nclass Program\n{\n    static void Main()\n    {\n        try\n        {\n            // Load the core library assembly\n            Assembly assembly = Assembly.Load(\"System.Runtime\");\n            \n            // Get the type by its name\n            Type stringType = Type.GetType(\"System.String\");\n            \n            // Get public methods of the type\n            MethodInfo[] methods = stringType?.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);\n            \n            // Display information\n            Console.WriteLine($\"Full name: {stringType?.FullName}\");\n            Console.WriteLine($\"Method count: {methods?.Length ?? 0}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n        }\n    }\n}"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "In the role-based authentication implementation below, what will be the result when the GetSecretData method is called by a user who has the 'User' role but not the 'Admin' role?",
      "options": {
        "A": "The method will execute and return the secret data string",
        "B": "A SecurityException will be thrown",
        "C": "An UnauthorizedAccessException will be thrown",
        "D": "The method will return null"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Security;\nusing System.Security.Claims;\nusing System.Security.Principal;\n\npublic class RoleBasedSecurityExample\n{\n    public static void Main()\n    {\n        // Create a user with role 'User' but not 'Admin'\n        var identity = new ClaimsIdentity(new Claim[]\n        {\n            new Claim(ClaimTypes.Name, \"John\"),\n            new Claim(ClaimTypes.Role, \"User\")\n        }, \"Custom\");\n        \n        var principal = new ClaimsPrincipal(identity);\n        Thread.CurrentPrincipal = principal;\n        \n        try\n        {\n            string data = GetSecretData();\n            Console.WriteLine($\"Secret data: {data}\");\n        }\n        catch (UnauthorizedAccessException)\n        {\n            Console.WriteLine(\"Unauthorized access: Admin role required\");\n            throw new UnauthorizedAccessException(\"Admin role required\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n        }\n    }\n    \n    [System.Security.Permissions.PrincipalPermission(SecurityAction.Demand, Role = \"Admin\")]\n    public static string GetSecretData()\n    {\n        // This method requires 'Admin' role\n        return \"This is secret data for admins only\";\n    }\n}"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which of the following statements about SQL Server indexing is INCORRECT?",
      "options": {
        "A": "Clustered indexes determine the physical order of data in a table",
        "B": "A table can have multiple clustered indexes",
        "C": "Non-clustered indexes contain a pointer to the actual data rows",
        "D": "Covered queries can improve performance by including all required columns in the index"
      },
      "correct_answer": "B",
      "code_example": ""
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements the Singleton pattern?",
      "options": {
        "A": "Instance A: Singleton.Instance\nInstance B: Singleton.Instance\nSame instance: True",
        "B": "Instance A: Singleton.Instance\nInstance B: Singleton.Instance\nSame instance: False",
        "C": "Instance A: MyApp.Singleton\nInstance B: MyApp.Singleton\nSame instance: True",
        "D": "Instance A: MyApp.Singleton\nInstance B: MyApp.Singleton\nSame instance: False"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\npublic sealed class Singleton\n{\n    private static readonly Lazy<Singleton> _instance = \n        new Lazy<Singleton>(() => new Singleton());\n    \n    // Private constructor prevents external instantiation\n    private Singleton()\n    {\n    }\n    \n    public static Singleton Instance => _instance.Value;\n    \n    public void DoSomething()\n    {\n        Console.WriteLine(\"Singleton instance is doing something\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // Get the singleton instance twice\n        var instanceA = Singleton.Instance;\n        var instanceB = Singleton.Instance;\n        \n        // Print the instance types\n        Console.WriteLine($\"Instance A: {instanceA}\");\n        Console.WriteLine($\"Instance B: {instanceB}\");\n        \n        // Check if they are the same instance\n        Console.WriteLine($\"Same instance: {ReferenceEquals(instanceA, instanceB)}\");\n    }\n}"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "Which statement about SignalR in ASP.NET Core is INCORRECT?",
      "options": {
        "A": "SignalR automatically handles connection management and reconnection",
        "B": "SignalR always uses WebSockets as its transport protocol",
        "C": "SignalR can be used to broadcast messages to all connected clients",
        "D": "SignalR supports client-to-server and server-to-client communication"
      },
      "correct_answer": "B",
      "code_example": ""
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code that demonstrates Semaphore and Mutex?",
      "options": {
        "A": "Worker 0 entered\nWorker 0 exited\nWorker 1 entered\nWorker 1 exited\nWorker 2 entered\nWorker 2 exited",
        "B": "Worker 0 entered\nWorker 1 entered\nWorker 0 exited\nWorker 1 exited\nWorker 2 entered\nWorker 2 exited",
        "C": "Worker 0 entered\nWorker 1 entered\nWorker 2 entered\nWorker 0 exited\nWorker 1 exited\nWorker 2 exited",
        "D": "The output order will vary, but only one worker will enter at a time"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Threading;\n\nclass Program\n{\n    // Semaphore allowing 2 concurrent threads\n    private static Semaphore _semaphore = new Semaphore(2, 2);\n    \n    // Mutex allowing exclusive access\n    private static Mutex _mutex = new Mutex();\n    \n    static void Main()\n    {\n        for (int i = 0; i < 3; i++)\n        {\n            Thread thread = new Thread(Worker);\n            thread.Name = i.ToString();\n            thread.Start();\n        }\n        \n        // For the demonstration purpose, we wait all threads to finish\n        Thread.Sleep(1000);\n    }\n    \n    static void Worker(object state)\n    {\n        // Wait for semaphore (up to 2 threads allowed)\n        _semaphore.WaitOne();\n        \n        try\n        {\n            Console.WriteLine($\"Worker {Thread.CurrentThread.Name} entered\");\n            \n            // Simulate work\n            Thread.Sleep(100);\n            \n            Console.WriteLine($\"Worker {Thread.CurrentThread.Name} exited\");\n        }\n        finally\n        {\n            // Release the semaphore\n            _semaphore.Release();\n        }\n    }\n}"
    }
  ]
}
