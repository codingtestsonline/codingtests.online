{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int sum = 0;\nfor (int i = 1; i <= 5; i += 2)\n{\n    sum += i;\n}\nConsole.WriteLine(sum);",
      "options": {
        "A": "0",
        "B": "9",
        "C": "15",
        "D": "6"
      },
      "correct_answer": "B"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "Which of the following correctly demonstrates constructor overloading in C#?",
      "options": {
        "A": "Creating multiple classes with the same name",
        "B": "Defining multiple methods with the same name but different return types",
        "C": "Declaring multiple constructors in a class with different parameter lists",
        "D": "Creating a single constructor that accepts optional parameters"
      },
      "correct_answer": "C"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int x = 5;\nint y = 3;\nConsole.WriteLine(x & y);",
      "options": {
        "A": "1",
        "B": "2",
        "C": "7",
        "D": "8"
      },
      "correct_answer": "A"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nPerson person = new Person { Name = \"John\", Age = 30 };\nConsole.WriteLine($\"{person.Name} is {person.Age} years old.\");",
      "options": {
        "A": "Person is 30 years old.",
        "B": "John is 30 years old.",
        "C": "Name is Age years old.",
        "D": "Compilation error: cannot use object initializer syntax"
      },
      "correct_answer": "B"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int number = 15;\nif (number % 3 == 0 && number % 5 == 0)\n{\n    Console.WriteLine(\"FizzBuzz\");\n}\nelse if (number % 3 == 0)\n{\n    Console.WriteLine(\"Fizz\");\n}\nelse if (number % 5 == 0)\n{\n    Console.WriteLine(\"Buzz\");\n}\nelse\n{\n    Console.WriteLine(number);\n}",
      "options": {
        "A": "15",
        "B": "Fizz",
        "C": "Buzz",
        "D": "FizzBuzz"
      },
      "correct_answer": "D"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "Which of the following is the correct way to write a string to a text file in C#?",
      "options": {
        "A": "using (var file = new StreamWriter(\"file.txt\")) { file.Write(\"Hello World\"); }",
        "B": "using (var file = new StreamReader(\"file.txt\")) { file.Write(\"Hello World\"); }",
        "C": "StreamWriter.Write(\"file.txt\", \"Hello World\");",
        "D": "StreamReader file = new StreamReader(\"file.txt\"); file.WriteLine(\"Hello World\");"
      },
      "correct_answer": "A"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "List<int> numbers = new List<int>();\nint result = numbers.FirstOrDefault();\nConsole.WriteLine(result);",
      "options": {
        "A": "null",
        "B": "0",
        "C": "An exception will be thrown",
        "D": "An empty list will be printed"
      },
      "correct_answer": "B"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "What is function overloading in C#?",
      "options": {
        "A": "Defining multiple functions with the same name but different parameter types or counts",
        "B": "Defining a function that can return multiple different types",
        "C": "Creating a function that calls other functions",
        "D": "Writing a function that takes more parameters than it needs"
      },
      "correct_answer": "A"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string text = \"The quick brown fox\";\nstring result = text.Substring(4, 5);\nConsole.WriteLine(result);",
      "options": {
        "A": "The qu",
        "B": "quick",
        "C": "The quick",
        "D": "quick brown"
      },
      "correct_answer": "B"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "try\n{\n    int x = 10;\n    int y = 0;\n    if (y == 0)\n    {\n        throw new DivideByZeroException(\"Cannot divide by zero\");\n    }\n    Console.WriteLine(x / y);\n}\ncatch (DivideByZeroException ex)\n{\n    Console.WriteLine(ex.Message);\n}",
      "options": {
        "A": "Infinity",
        "B": "Cannot divide by zero",
        "C": "An unhandled exception will be thrown",
        "D": "0"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "class Counter\n{\n    private int count = 0;\n    \n    public void Increment()\n    {\n        this.count++;\n    }\n    \n    public int GetCount()\n    {\n        return this.count;\n    }\n}\n\nCounter c = new Counter();\nc.Increment();\nc.Increment();\nConsole.WriteLine(c.GetCount());",
      "options": {
        "A": "0",
        "B": "1",
        "C": "2",
        "D": "3"
      },
      "correct_answer": "C"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string content = \"Line 1\\nLine 2\\nLine 3\";\nFile.WriteAllText(\"test.txt\", content);\nstring readContent = File.ReadAllText(\"test.txt\");\nConsole.WriteLine(readContent.Split('\\n').Length);",
      "options": {
        "A": "1",
        "B": "2",
        "C": "3",
        "D": "4"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What is the correct way to define a custom exception in C#?",
      "options": {
        "A": "public class MyException { public string Message { get; set; } }",
        "B": "public static class MyException : SystemException {}",
        "C": "public class MyException : Exception { public MyException(string message) : base(message) {} }",
        "D": "public struct MyException : IException { public string ErrorMessage; }"
      },
      "correct_answer": "C"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int[][] jaggedArray = new int[3][];\njaggedArray[0] = new int[] { 1, 2, 3 };\njaggedArray[1] = new int[] { 4, 5 };\njaggedArray[2] = new int[] { 6 };\n\nint sum = 0;\nfor (int i = 0; i < jaggedArray.Length; i++)\n{\n    for (int j = 0; j < jaggedArray[i].Length; j++)\n    {\n        sum += jaggedArray[i][j];\n    }\n}\nConsole.WriteLine(sum);",
      "options": {
        "A": "15",
        "B": "21",
        "C": "6",
        "D": "10"
      },
      "correct_answer": "B"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int[] numbers = new int[5];\nfor (int i = 0; i < numbers.Length; i++)\n{\n    numbers[i] = i * 2;\n}\nConsole.WriteLine(numbers[3]);",
      "options": {
        "A": "3",
        "B": "6",
        "C": "8",
        "D": "5"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "var numbers = new List<int> { 1, 2, 3 };\nvar firstNumber = numbers[0];\nvar firstElement = numbers.FirstOrDefault();\nConsole.WriteLine($\"{firstNumber} {firstElement}\");",
      "options": {
        "A": "System.Collections.Generic.List`1[System.Int32] System.Collections.Generic.List`1[System.Int32]",
        "B": "1 1",
        "C": "System.Int32 System.Int32",
        "D": "1 0"
      },
      "correct_answer": "B"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Publisher\n{\n    public event EventHandler<string> OnMessage;\n    \n    public void SendMessage(string message)\n    {\n        OnMessage?.Invoke(this, message);\n    }\n}\n\nclass Subscriber\n{\n    public void Initialize(Publisher publisher)\n    {\n        publisher.OnMessage += HandleMessage;\n    }\n    \n    private void HandleMessage(object sender, string message)\n    {\n        Console.WriteLine(\"Received: \" + message);\n    }\n}\n\nPublisher pub = new Publisher();\nSubscriber sub = new Subscriber();\nsub.Initialize(pub);\npub.SendMessage(\"Hello World\");",
      "options": {
        "A": "Hello World",
        "B": "Received: Hello World",
        "C": "No output (the event isn't fired)",
        "D": "Compilation error: cannot use string as event argument"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "In ASP.NET Core, which of the following is NOT part of the standard request processing pipeline?",
      "options": {
        "A": "Authentication",
        "B": "Authorization",
        "C": "Serialization",
        "D": "Exception Handling"
      },
      "correct_answer": "C"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What is the correct way to declare an event in C#?",
      "options": {
        "A": "public void EventHandler MyEvent;",
        "B": "public event EventHandler MyEvent;",
        "C": "public event void MyEvent(object sender, EventArgs e);",
        "D": "public delegate EventHandler MyEvent;"
      },
      "correct_answer": "B"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "What will be the output of the following EF Core LINQ query?",
      "code_example": "using (var context = new AppDbContext())\n{\n    var result = context.Products\n        .Where(p => p.Price > 50)\n        .OrderBy(p => p.Name)\n        .Select(p => new { p.Name, p.Price })\n        .FirstOrDefault();\n        \n    Console.WriteLine(result != null ? result.Name : \"No products found\");\n}",
      "options": {
        "A": "All products with price greater than 50",
        "B": "The first product with price greater than 50, in alphabetical order",
        "C": "All product names sorted alphabetically",
        "D": "A SQL query will be printed"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What is the key difference between Dispose() and Finalize() in C#?",
      "options": {
        "A": "Dispose() is called explicitly by the developer, while Finalize() is called by the garbage collector",
        "B": "Dispose() releases managed resources, while Finalize() only releases unmanaged resources",
        "C": "Dispose() is part of the IDisposable interface, while Finalize() is a method that all C# classes inherit",
        "D": "Dispose() can only be called once, while Finalize() can be called multiple times"
      },
      "correct_answer": "A"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Box<T>\n{\n    private T item;\n    \n    public Box(T item)\n    {\n        this.item = item;\n    }\n    \n    public T GetItem()\n    {\n        return item;\n    }\n    \n    public void SetItem(T item)\n    {\n        this.item = item;\n    }\n}\n\nBox<int> intBox = new Box<int>(10);\nBox<string> stringBox = new Box<string>(\"Hello\");\nstringBox.SetItem(\"World\");\n\nConsole.WriteLine($\"{intBox.GetItem()} {stringBox.GetItem()}\");",
      "options": {
        "A": "10 Hello",
        "B": "10 World",
        "C": "System.Int32 System.String",
        "D": "10 Hello World"
      },
      "correct_answer": "B"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "Which of the following best describes Property Injection in dependency injection?",
      "options": {
        "A": "Dependencies are provided through the constructor",
        "B": "Dependencies are provided through public properties",
        "C": "Dependencies are provided through method parameters",
        "D": "Dependencies are resolved at runtime by a service locator"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "HashSet<int> set = new HashSet<int> { 1, 2, 3, 1, 2 };\nDictionary<int, string> dict = new Dictionary<int, string>\n{\n    { 1, \"One\" },\n    { 2, \"Two\" },\n    { 3, \"Three\" }\n};\n\nConsole.WriteLine($\"Set count: {set.Count}, Dictionary count: {dict.Count}\");",
      "options": {
        "A": "Set count: 5, Dictionary count: 3",
        "B": "Set count: 3, Dictionary count: 3",
        "C": "Set count: 3, Dictionary count: 5",
        "D": "Compilation error: duplicate keys in HashSet"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "async Task<int> GetValueAsync()\n{\n    await Task.Delay(100);\n    return 42;\n}\n\nasync void PrintValueAsync()\n{\n    int result = await GetValueAsync();\n    Console.WriteLine(result);\n}\n\nPrintValueAsync();\nConsole.WriteLine(\"Waiting...\");",
      "options": {
        "A": "42\nWaiting...",
        "B": "Waiting...\n42",
        "C": "Waiting... (and 42 might or might not be printed depending on timing)",
        "D": "42 (and Waiting... will never be printed)"
      },
      "correct_answer": "C"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "SortedList<int, string> sortedList = new SortedList<int, string>();\nsortedList.Add(3, \"Three\");\nsortedList.Add(1, \"One\");\nsortedList.Add(2, \"Two\");\n\nforeach (var item in sortedList)\n{\n    Console.Write(item.Value + \" \");\n}",
      "options": {
        "A": "Three One Two ",
        "B": "One Two Three ",
        "C": "3 1 2 ",
        "D": "The code will throw an exception"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "In Entity Framework Core, what command is used to create a new migration after making changes to your model classes?",
      "options": {
        "A": "Update-Database",
        "B": "Create-Migration",
        "C": "Add-Migration",
        "D": "New-Migration"
      },
      "correct_answer": "C"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Calculator\n{\n    public T Add<T>(T a, T b) where T : struct\n    {\n        dynamic da = a;\n        dynamic db = b;\n        return da + db;\n    }\n}\n\nCalculator calc = new Calculator();\nint sum = calc.Add(5, 10);\nConsole.WriteLine(sum);",
      "options": {
        "A": "5",
        "B": "10",
        "C": "15",
        "D": "Compilation error: cannot add generic types"
      },
      "correct_answer": "C"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "using (FileStream fs = File.OpenRead(\"test.txt\"))\n{\n    Console.WriteLine(\"File opened.\");\n}\nConsole.WriteLine(\"File closed.\");",
      "options": {
        "A": "File opened. (and File closed. will never be printed)",
        "B": "File opened.\nFile closed.",
        "C": "Compilation error: cannot use using statement with FileStream",
        "D": "The code will throw an exception if test.txt doesn't exist"
      },
      "correct_answer": "D"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Animal\n{\n    public Animal(string name)\n    {\n        Console.WriteLine($\"Animal {name} created\");\n    }\n}\n\nclass Dog : Animal\n{\n    public Dog(string name) : base(name)\n    {\n        Console.WriteLine($\"Dog {name} created\");\n    }\n}\n\nDog dog = new Dog(\"Rex\");",
      "options": {
        "A": "Animal Rex created",
        "B": "Dog Rex created",
        "C": "Animal Rex created\nDog Rex created",
        "D": "Compilation error: base constructor not found"
      },
      "correct_answer": "C"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "Which of the following best describes the Interface Segregation Principle in C#?",
      "options": {
        "A": "A class should have only one reason to change",
        "B": "Classes should be open for extension but closed for modification",
        "C": "Clients should not be forced to depend on interfaces they do not use",
        "D": "High-level modules should not depend on low-level modules"
      },
      "correct_answer": "C"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "In ASP.NET Core, what is model binding primarily used for?",
      "options": {
        "A": "Converting view models to domain models",
        "B": "Converting HTTP request data to action method parameters",
        "C": "Validating form input data before processing",
        "D": "Creating database entities from JSON objects"
      },
      "correct_answer": "B"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What is the primary purpose of the Adapter Pattern in C#?",
      "options": {
        "A": "To create multiple instances of a class",
        "B": "To convert the interface of a class into another interface clients expect",
        "C": "To implement cross-cutting concerns like logging",
        "D": "To manage database connections efficiently"
      },
      "correct_answer": "B"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "What will be the output of the following code using readonly struct?",
      "code_example": "using System;\n\nreadonly struct Point\n{\n    public readonly int X;\n    public readonly int Y;\n    \n    public Point(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n    \n    public void Deconstruct(out int x, out int y)\n    {\n        x = X;\n        y = Y;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var point = new Point(10, 20);\n        var (x, y) = point;\n        \n        Console.WriteLine($\"{x}, {y}\");\n    }\n}",
      "options": {
        "A": "Compilation error: Cannot deconstruct readonly struct",
        "B": "10, 20",
        "C": "0, 0",
        "D": "Runtime error: Cannot modify readonly struct"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "Which statement about distributed caching with Redis in .NET is FALSE?",
      "options": {
        "A": "Redis can be used for both caching and as a message broker",
        "B": "The Microsoft.Extensions.Caching.Redis package is used to integrate Redis with ASP.NET Core",
        "C": "Redis supports atomic operations for counters and semaphores",
        "D": "Redis requires Windows Server to run in production environments"
      },
      "correct_answer": "D"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "In a CQRS architecture, what is the primary responsibility of a Command Handler?",
      "options": {
        "A": "To validate user input before processing",
        "B": "To retrieve and format data for display purposes",
        "C": "To modify state and persist changes to the data store",
        "D": "To notify clients about domain events via SignalR"
      },
      "correct_answer": "C"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following SignalR code when a client connects?",
      "code_example": "using Microsoft.AspNetCore.SignalR;\nusing System.Threading.Tasks;\n\npublic class NotificationHub : Hub\n{\n    public override async Task OnConnectedAsync()\n    {\n        await Groups.AddToGroupAsync(Context.ConnectionId, \"Observers\");\n        await Clients.Caller.SendAsync(\"Notify\", \"Connected\");\n        await Clients.Others.SendAsync(\"Notify\", \"Someone joined\");\n        await Clients.Group(\"Observers\").SendAsync(\"Notify\", \"Group message\");\n    }\n}",
      "options": {
        "A": "The connecting client receives only 'Connected'",
        "B": "The connecting client receives 'Connected' and 'Group message'",
        "C": "The connecting client receives 'Connected', while other clients receive 'Someone joined'",
        "D": "The connecting client receives 'Connected' and 'Group message', while other clients receive 'Someone joined' and 'Group message'"
      },
      "correct_answer": "D"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "What is the output of the following JWT validation code?",
      "code_example": "using System;\nusing System.IdentityModel.Tokens.Jwt;\nusing Microsoft.IdentityModel.Tokens;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        var token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n        \n        var tokenHandler = new JwtSecurityTokenHandler();\n        var key = Encoding.ASCII.GetBytes(\"invalid-secret-key\");\n        \n        try\n        {\n            tokenHandler.ValidateToken(token, new TokenValidationParameters\n            {\n                ValidateIssuerSigningKey = true,\n                IssuerSigningKey = new SymmetricSecurityKey(key),\n                ValidateIssuer = false,\n                ValidateAudience = false,\n                ClockSkew = TimeSpan.Zero\n            }, out var validatedToken);\n            \n            Console.WriteLine(\"Token is valid\");\n        }\n        catch (SecurityTokenException)\n        {\n            Console.WriteLine(\"Invalid signature\");\n        }\n        catch (Exception)\n        {\n            Console.WriteLine(\"Other error\");\n        }\n    }\n}",
      "options": {
        "A": "Token is valid",
        "B": "Invalid signature",
        "C": "Other error",
        "D": "Compilation error: Cannot validate JWT tokens this way"
      },
      "correct_answer": "B"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What is the output of the following Parallel.Invoke code?",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static int counter = 0;\n    \n    static void Main()\n    {\n        Parallel.Invoke(\n            () => { Thread.Sleep(1000); Interlocked.Add(ref counter, 5); },\n            () => { Thread.Sleep(500); Interlocked.Add(ref counter, 3); },\n            () => { Thread.Sleep(100); Interlocked.Add(ref counter, 2); }\n        );\n        \n        Console.WriteLine(counter);\n    }\n}",
      "options": {
        "A": "5",
        "B": "10",
        "C": "The result is non-deterministic",
        "D": "5 + 3 + 2 = 10, but the order of execution varies"
      },
      "correct_answer": "B"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "What is the output of the following code using Span<T>?",
      "code_example": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        var array = new int[] { 1, 2, 3, 4, 5 };\n        \n        Span<int> span = array;\n        span[0] = 10;\n        \n        ReadOnlySpan<int> readOnlySpan = array;\n        \n        Memory<int> memory = array;\n        memory.Span[1] = 20;\n        \n        Console.WriteLine($\"{array[0]}, {array[1]}, {readOnlySpan[0]}\");\n    }\n}",
      "options": {
        "A": "1, 2, 1",
        "B": "10, 2, 10",
        "C": "10, 20, 1",
        "D": "10, 20, 10"
      },
      "correct_answer": "D"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following ExpandoObject code?",
      "code_example": "using System;\nusing System.Dynamic;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        dynamic person = new ExpandoObject();\n        person.Name = \"John\";\n        person.Age = 30;\n        \n        var dict = (IDictionary<string, object>)person;\n        dict.Add(\"Salary\", 50000);\n        dict[\"Age\"] = 31;\n        \n        Console.WriteLine($\"{person.Name}, {person.Age}, {person.Salary}, {dict.Keys.Count}\");\n    }\n}",
      "options": {
        "A": "John, 30, 50000, 3",
        "B": "John, 31, 50000, 3",
        "C": "Compilation error: Cannot cast ExpandoObject to IDictionary",
        "D": "Runtime error: Cannot access dynamic members"
      },
      "correct_answer": "B"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "When using P/Invoke with DllImport in C#, which attribute is NOT required for proper marshaling of string parameters?",
      "options": {
        "A": "[MarshalAs(UnmanagedType.LPStr)]",
        "B": "[MarshalAs(UnmanagedType.BStr)]",
        "C": "[Out]",
        "D": "[DllImport]"
      },
      "correct_answer": "C"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What HTTP status code should be returned when a resource cannot be accessed due to insufficient permissions?",
      "options": {
        "A": "401 Unauthorized",
        "B": "403 Forbidden",
        "C": "404 Not Found",
        "D": "400 Bad Request"
      },
      "correct_answer": "B"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "What will be the output of the following Singleton implementation?",
      "code_example": "using System;\n\npublic sealed class Singleton\n{\n    private static readonly Lazy<Singleton> _lazy = new Lazy<Singleton>(() => new Singleton());\n    \n    public static Singleton Instance { get { return _lazy.Value; } }\n    \n    private Singleton()\n    {\n        Console.WriteLine(\"Constructor called\");\n    }\n    \n    public void DoSomething()\n    {\n        Console.WriteLine(\"Method called\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Program started\");\n        Console.WriteLine(\"Getting instance\");\n        var instance1 = Singleton.Instance;\n        Console.WriteLine(\"Calling method\");\n        instance1.DoSomething();\n        Console.WriteLine(\"Getting instance again\");\n        var instance2 = Singleton.Instance;\n        Console.WriteLine($\"Same instance: {ReferenceEquals(instance1, instance2)}\");\n    }\n}",
      "options": {
        "A": "Program started\nGetting instance\nConstructor called\nCalling method\nMethod called\nGetting instance again\nConstructor called\nSame instance: False",
        "B": "Program started\nGetting instance\nCalling method\nMethod called\nGetting instance again\nSame instance: True",
        "C": "Program started\nGetting instance\nConstructor called\nCalling method\nMethod called\nGetting instance again\nSame instance: True",
        "D": "Compilation error: Lazy<T> cannot be used with private constructors"
      },
      "correct_answer": "C"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "Which statement about Apache Kafka in .NET is FALSE?",
      "options": {
        "A": "Confluent.Kafka is the official .NET client library for Kafka",
        "B": "Kafka consumers within the same consumer group automatically load balance partitions",
        "C": "Kafka guarantees message ordering within a single partition",
        "D": "Kafka messages are automatically deleted after 24 hours regardless of configuration"
      },
      "correct_answer": "D"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What is the output of the following code that demonstrates string interning?",
      "code_example": "using System;\nusing System.Text;\n\nclass Program\n{\n    static void Main()\n    {\n        string a = \"Hello\";\n        string b = \"Hello\";\n        string c = new StringBuilder().Append(\"Hel\").Append(\"lo\").ToString();\n        string d = string.Intern(c);\n        \n        Console.WriteLine($\"a == b: {ReferenceEquals(a, b)}\");\n        Console.WriteLine($\"a == c: {ReferenceEquals(a, c)}\");\n        Console.WriteLine($\"a == d: {ReferenceEquals(a, d)}\");\n    }\n}",
      "options": {
        "A": "a == b: True\na == c: True\na == d: True",
        "B": "a == b: True\na == c: False\na == d: True",
        "C": "a == b: False\na == c: False\na == d: False",
        "D": "a == b: True\na == c: False\na == d: False"
      },
      "correct_answer": "B"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code using lock and Monitor?",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    private static readonly object _lock = new object();\n    private static int _counter = 0;\n    \n    static void Main()\n    {\n        Task t1 = Task.Run(() => IncrementWithLock());\n        Task t2 = Task.Run(() => IncrementWithMonitor());\n        \n        Task.WaitAll(t1, t2);\n        Console.WriteLine(_counter);\n    }\n    \n    static void IncrementWithLock()\n    {\n        for (int i = 0; i < 5; i++)\n        {\n            lock (_lock)\n            {\n                _counter++;\n            }\n        }\n    }\n    \n    static void IncrementWithMonitor()\n    {\n        for (int i = 0; i < 5; i++)\n        {\n            bool lockTaken = false;\n            try\n            {\n                Monitor.Enter(_lock, ref lockTaken);\n                _counter++;\n            }\n            finally\n            {\n                if (lockTaken)\n                    Monitor.Exit(_lock);\n            }\n        }\n    }\n}",
      "options": {
        "A": "5",
        "B": "10",
        "C": "A random number between 5 and 10",
        "D": "Deadlock occurs"
      },
      "correct_answer": "B"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What is incorrect about the following Dockerfile for a .NET 8 application?",
      "code_example": "FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nWORKDIR /src\nCOPY [\"MyApp.csproj\", \"./\"]\nRUN dotnet restore \"MyApp.csproj\"\nCOPY . .\nRUN dotnet build \"MyApp.csproj\" -c Release -o /app/build\n\nFROM build AS publish\nRUN dotnet publish \"MyApp.csproj\" -c Release -o /app/publish\n\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nEXPOSE 80\nENV ASPNETCORE_URLS=http://+:80\nENTRYPOINT [\"dotnet\", \"MyApp.dll\"]",
      "options": {
        "A": "It uses the same build image for both build and publish stages",
        "B": "It doesn't include a HEALTHCHECK instruction",
        "C": "The COPY command for the source code should come before the restore",
        "D": "The ENTRYPOINT should be CMD instead for ASP.NET applications"
      },
      "correct_answer": "C"
    }
  ]
}
