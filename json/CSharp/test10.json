{
  "questions": [
    {
      "id": 1,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int x = 10;\nif (x > 5)\n    Console.WriteLine(\"Greater\");\nelse if (x < 5)\n    Console.WriteLine(\"Lesser\");\nelse\n    Console.WriteLine(\"Equal\");",
      "options": {
        "A": "Lesser",
        "B": "Equal",
        "C": "Greater",
        "D": "No output"
      },
      "correct_answer": "C"
    },
    {
      "id": 2,
      "difficulty": "easy",
      "question": "What is the correct way to instantiate an object of the Person class?",
      "code_example": "public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}",
      "options": {
        "A": "Person person = Person();",
        "B": "var person = Person;",
        "C": "Person person = new();",
        "D": "var person = new Person();"
      },
      "correct_answer": "D"
    },
    {
      "id": 3,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int[][] jaggedArray = new int[3][];\njaggedArray[0] = new int[] { 1, 2, 3 };\njaggedArray[1] = new int[] { 4, 5 };\njaggedArray[2] = new int[] { 6 };\nConsole.WriteLine(jaggedArray[1][1]);",
      "options": {
        "A": "4",
        "B": "5",
        "C": "1",
        "D": "IndexOutOfRangeException will be thrown"
      },
      "correct_answer": "B"
    },
    {
      "id": 4,
      "difficulty": "easy",
      "question": "Which of the following is an example of an implicit cast?",
      "options": {
        "A": "double d = (double)5;",
        "B": "int i = (int)5.0;",
        "C": "long l = 5;",
        "D": "float f = (float)5.0;"
      },
      "correct_answer": "C"
    },
    {
      "id": 5,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "bool a = true;\nbool b = false;\nbool c = true;\nConsole.WriteLine(a && b || c);",
      "options": {
        "A": "True",
        "B": "False",
        "C": "Compile error",
        "D": "Runtime error"
      },
      "correct_answer": "A"
    },
    {
      "id": 6,
      "difficulty": "easy",
      "question": "Which of the following correctly defines an auto-implemented property?",
      "options": {
        "A": "public int Age { get; }",
        "B": "public int Age { private get; set; }",
        "C": "public int Age => 25;",
        "D": "public int Age { get; set; }"
      },
      "correct_answer": "D"
    },
    {
      "id": 7,
      "difficulty": "easy",
      "question": "What is the correct way to define a custom exception class?",
      "options": {
        "A": "public class DatabaseException : CustomException { }",
        "B": "public class DatabaseException extends Exception { }",
        "C": "public class DatabaseException : Exception { }",
        "D": "public DatabaseException implements Exception { }"
      },
      "correct_answer": "C"
    },
    {
      "id": 8,
      "difficulty": "easy",
      "question": "Which of the following is NOT a reference type in C#?",
      "options": {
        "A": "string",
        "B": "int",
        "C": "interface",
        "D": "delegate"
      },
      "correct_answer": "B"
    },
    {
      "id": 9,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "public class Calculator\n{\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n    \n    public double Add(double a, double b)\n    {\n        return a + b;\n    }\n}\n\nCalculator calc = new Calculator();\nConsole.WriteLine(calc.Add(5, 3));",
      "options": {
        "A": "8",
        "B": "8.0",
        "C": "Compile error: ambiguous call",
        "D": "Runtime error"
      },
      "correct_answer": "A"
    },
    {
      "id": 10,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int a = 5;\nint b = 3;\nConsole.WriteLine(a & b);",
      "options": {
        "A": "0",
        "B": "1",
        "C": "2",
        "D": "8"
      },
      "correct_answer": "B"
    },
    {
      "id": 11,
      "difficulty": "easy",
      "question": "What is the correct way to write the contents of a string to a file?",
      "options": {
        "A": "File.AppendAllText(\"path\", content);",
        "B": "File.WriteAllText(\"path\", content);",
        "C": "File.Create(\"path\", content);",
        "D": "File.Save(\"path\", content);"
      },
      "correct_answer": "B"
    },
    {
      "id": 12,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "string result = \"\";\nfor (int i = 0; i < 3; i++)\n{\n    result += i;\n}\nConsole.WriteLine(result);",
      "options": {
        "A": "0123",
        "B": "123",
        "C": "012",
        "D": "0, 1, 2"
      },
      "correct_answer": "C"
    },
    {
      "id": 13,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "int a = 10;\nint b = 3;\nConsole.WriteLine(a % b);",
      "options": {
        "A": "3",
        "B": "1",
        "C": "0",
        "D": "3.33333"
      },
      "correct_answer": "B"
    },
    {
      "id": 14,
      "difficulty": "easy",
      "question": "Which method is the safest way to convert a string to an integer?",
      "options": {
        "A": "Convert.ToInt32(string)",
        "B": "int.Parse(string)",
        "C": "int.TryParse(string, out int result)",
        "D": "(int)string"
      },
      "correct_answer": "C"
    },
    {
      "id": 15,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "Dictionary<string, int> ages = new Dictionary<string, int>();\nages.Add(\"Alice\", 30);\nages.Add(\"Bob\", 25);\nages.Add(\"Charlie\", 35);\nConsole.WriteLine(ages.ContainsKey(\"David\"));",
      "options": {
        "A": "True",
        "B": "False",
        "C": "Null",
        "D": "KeyNotFoundException will be thrown"
      },
      "correct_answer": "B"
    },
    {
      "id": 16,
      "difficulty": "easy",
      "question": "What will be the output of the following code?",
      "code_example": "void PrintCoordinates(int x, int y)\n{\n    Console.WriteLine($\"X: {x}, Y: {y}\");\n}\n\nPrintCoordinates(y: 20, x: 10);",
      "options": {
        "A": "X: 10, Y: 20",
        "B": "X: 20, Y: 10",
        "C": "Compile error: invalid parameter order",
        "D": "Runtime error: parameter mismatch"
      },
      "correct_answer": "A"
    },
    {
      "id": 17,
      "difficulty": "medium",
      "question": "Which of the following is an example of Attribute Routing in ASP.NET Core?",
      "options": {
        "A": "app.MapControllerRoute(name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\");",
        "B": "[Route(\"api/[controller]\")]",
        "C": "endpoints.MapGet(\"/api/users\", async context => { });",
        "D": "app.UseEndpoints(endpoints => { endpoints.MapControllers(); });"
      },
      "correct_answer": "B"
    },
    {
      "id": 18,
      "difficulty": "medium",
      "question": "Which middleware runs first in the ASP.NET Core request pipeline if all the following are added in this order?",
      "code_example": "app.UseExceptionHandler(\"/Error\");\napp.UseHsts();\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseAuthorization();\napp.UseEndpoints();",
      "options": {
        "A": "UseRouting",
        "B": "UseExceptionHandler",
        "C": "UseEndpoints",
        "D": "UseStaticFiles"
      },
      "correct_answer": "B"
    },
    {
      "id": 19,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "class Box<T>\n{\n    private T item;\n    \n    public void Add(T item)\n    {\n        this.item = item;\n    }\n    \n    public T Get()\n    {\n        return item;\n    }\n}\n\nBox<int> intBox = new Box<int>();\nintBox.Add(10);\nBox<string> strBox = new Box<string>();\nstrBox.Add(\"Hello\");\n\nConsole.WriteLine($\"{intBox.Get()} {strBox.Get()}\");",
      "options": {
        "A": "10 Hello",
        "B": "System.Int32 System.String",
        "C": "10.ToString() Hello.ToString()",
        "D": "Compile error: cannot mix generic types"
      },
      "correct_answer": "A"
    },
    {
      "id": 20,
      "difficulty": "medium",
      "question": "Which of the following correctly defines a custom middleware in ASP.NET Core?",
      "code_example": "app.Use(async (context, next) =>\n{\n    // Logic before the request is processed\n    await next.Invoke();\n    // Logic after the request is processed\n});",
      "options": {
        "A": "The middleware will never invoke the next middleware in the pipeline",
        "B": "This is correctly defining custom middleware inline",
        "C": "The middleware should use app.Run instead of app.Use",
        "D": "The middleware requires a separate class that implements IMiddleware"
      },
      "correct_answer": "B"
    },
    {
      "id": 21,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\nint sum = 0;\n\nParallel.ForEach(numbers, num =>\n{\n    sum += num;\n});\n\nConsole.WriteLine(sum);",
      "options": {
        "A": "15",
        "B": "A number between 0 and 15",
        "C": "The result is unpredictable due to race conditions",
        "D": "0"
      },
      "correct_answer": "C"
    },
    {
      "id": 22,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "public delegate void MyDelegate(string message);\n\nclass Program\n{\n    static void Main()\n    {\n        MyDelegate del = Method1;\n        del += Method2;\n        del -= Method1;\n        del(\"Hello\");\n    }\n    \n    static void Method1(string message)\n    {\n        Console.WriteLine($\"Method1: {message}\");\n    }\n    \n    static void Method2(string message)\n    {\n        Console.WriteLine($\"Method2: {message}\");\n    }\n}",
      "options": {
        "A": "Method1: Hello\nMethod2: Hello",
        "B": "Method1: Hello",
        "C": "Method2: Hello",
        "D": "No output"
      },
      "correct_answer": "C"
    },
    {
      "id": 23,
      "difficulty": "medium",
      "question": "What is the main difference between HashSet<T> and Dictionary<TKey, TValue>?",
      "options": {
        "A": "HashSet<T> allows duplicate values while Dictionary<TKey, TValue> doesn't",
        "B": "HashSet<T> is a collection of unique values while Dictionary<TKey, TValue> is a collection of key-value pairs",
        "C": "HashSet<T> is slower than Dictionary<TKey, TValue> for lookups",
        "D": "HashSet<T> is part of System.Collections namespace while Dictionary<TKey, TValue> is part of System.Collections.Generic"
      },
      "correct_answer": "B"
    },
    {
      "id": 24,
      "difficulty": "medium",
      "question": "Which of the following is used to bind form data to a model in ASP.NET Core MVC?",
      "code_example": "[HttpPost]\npublic IActionResult Create(Product product)\n{\n    if (ModelState.IsValid)\n    {\n        // Save product to database\n        return RedirectToAction(nameof(Index));\n    }\n    return View(product);\n}",
      "options": {
        "A": "The [HttpPost] attribute binds form data to the model",
        "B": "ASP.NET Core automatically binds form data to the model parameter",
        "C": "The ModelState.IsValid property binds form data to the model",
        "D": "A separate [Bind] attribute is required for model binding"
      },
      "correct_answer": "B"
    },
    {
      "id": 25,
      "difficulty": "medium",
      "question": "In the code-first approach to Entity Framework Core, what is the correct sequence of commands to create a database from your model?",
      "options": {
        "A": "Update-Database, Add-Migration",
        "B": "Add-Migration, Update-Database",
        "C": "Create-Database, Add-Migration",
        "D": "Generate-Model, Update-Database"
      },
      "correct_answer": "B"
    },
    {
      "id": 26,
      "difficulty": "medium",
      "question": "What is the purpose of using ConfigureAwait(false) in async methods?",
      "code_example": "public async Task<string> GetDataAsync()\n{\n    var result = await httpClient.GetStringAsync(\"https://api.example.com/data\")\n        .ConfigureAwait(false);\n    \n    return result;\n}",
      "options": {
        "A": "It makes the method execute synchronously",
        "B": "It prevents deadlocks by allowing the continuation to run on any available thread",
        "C": "It improves performance by executing the task with higher priority",
        "D": "It ensures exceptions are not propagated to the caller"
      },
      "correct_answer": "B"
    },
    {
      "id": 27,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "List<int> numbers = new List<int> { 1, 2, 3 };\nvar result = numbers.FirstOrDefault(n => n > 5);\nConsole.WriteLine(result);",
      "options": {
        "A": "0",
        "B": "5",
        "C": "null",
        "D": "An exception will be thrown"
      },
      "correct_answer": "A"
    },
    {
      "id": 28,
      "difficulty": "medium",
      "question": "Which of the following is the correct way to mock a dependency for unit testing?",
      "code_example": "public class UserService\n{\n    private readonly IUserRepository _repository;\n    \n    public UserService(IUserRepository repository)\n    {\n        _repository = repository;\n    }\n    \n    public User GetUserById(int id)\n    {\n        return _repository.GetById(id);\n    }\n}\n\n// Test code:\npublic void GetUserById_ShouldReturnUser()\n{\n    // Arrange\n    var mockRepository = new Mock<IUserRepository>();\n    mockRepository.Setup(repo => repo.GetById(1)).Returns(new User { Id = 1, Name = \"Test User\" });\n    \n    var service = new UserService(mockRepository.Object);\n    \n    // Act\n    var result = service.GetUserById(1);\n    \n    // Assert\n    Assert.Equal(\"Test User\", result.Name);\n}",
      "options": {
        "A": "The code is incorrect because the repository should be instantiated directly",
        "B": "The code correctly mocks the repository interface for testing",
        "C": "The code is incorrect because it uses the 'new' keyword for mocking",
        "D": "The code is incorrect because Arrange-Act-Assert pattern is not followed"
      },
      "correct_answer": "B"
    },
    {
      "id": 29,
      "difficulty": "medium",
      "question": "What will happen if you run Update-Database with no parameters in the Package Manager Console?",
      "options": {
        "A": "It will apply all pending migrations to the database",
        "B": "It will create a new migration",
        "C": "It will roll back the latest migration",
        "D": "It will throw an error because a migration name is required"
      },
      "correct_answer": "A"
    },
    {
      "id": 30,
      "difficulty": "medium",
      "question": "What is the main difference between SortedList<TKey, TValue> and SortedDictionary<TKey, TValue>?",
      "options": {
        "A": "SortedList<TKey, TValue> uses less memory than SortedDictionary<TKey, TValue>",
        "B": "SortedList<TKey, TValue> is faster for lookups than SortedDictionary<TKey, TValue>",
        "C": "SortedDictionary<TKey, TValue> is faster for insertions and removals than SortedList<TKey, TValue>",
        "D": "SortedDictionary<TKey, TValue> allows duplicate keys while SortedList<TKey, TValue> doesn't"
      },
      "correct_answer": "C"
    },
    {
      "id": 31,
      "difficulty": "medium",
      "question": "What will be the output of the following code?",
      "code_example": "interface ILogger\n{\n    void Log(string message);\n    void LogError(string error);\n}\n\nclass FileLogger : ILogger\n{\n    public void Log(string message)\n    {\n        Console.WriteLine($\"Logging to file: {message}\");\n    }\n    \n    void ILogger.LogError(string error)\n    {\n        Console.WriteLine($\"Error logging to file: {error}\");\n    }\n}\n\nFileLogger logger = new FileLogger();\nlogger.Log(\"Test message\");\nlogger.LogError(\"Test error\"); // Will this compile?",
      "options": {
        "A": "Logging to file: Test message\nError logging to file: Test error",
        "B": "Compile error: 'FileLogger' does not contain a definition for 'LogError'",
        "C": "Runtime error: method not found",
        "D": "Logging to file: Test message\nLogging to file: Test error"
      },
      "correct_answer": "B"
    },
    {
      "id": 32,
      "difficulty": "medium",
      "question": "What will be the output of the following LINQ query with EF Core?",
      "code_example": "var result = dbContext.Products\n    .Where(p => p.Price > 100)\n    .Select(p => new { p.Name, p.Price })\n    .ToList();\n\nConsole.WriteLine(result.GetType().Name);",
      "options": {
        "A": "List<Product>",
        "B": "IQueryable<Product>",
        "C": "List<Object>",
        "D": "List<>"
      },
      "correct_answer": "D"
    },
{
      "id": 33,
      "difficulty": "hard",
      "question": "What will be the output of the following code?",
      "options": {
        "A": "Hello, World",
        "B": "H,e,l,l,o,,, ,W,o,r,l,d",
        "C": "H e l l o ,   W o r l d",
        "D": "HelloWorld"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        ReadOnlySpan<char> message = \"Hello, World\";\n        Span<char> output = stackalloc char[message.Length * 2 - 1];\n        \n        for (int i = 0; i < message.Length; i++)\n        {\n            output[i * 2] = message[i];\n            if (i < message.Length - 1)\n                output[i * 2 + 1] = ' ';\n        }\n        \n        Console.WriteLine(output.ToString());\n    }\n}"
    },
    {
      "id": 34,
      "difficulty": "hard",
      "question": "How should you properly handle cancellation in long-running asynchronous operations?",
      "options": {
        "A": "Call Task.Cancel() on the running task to abort it immediately",
        "B": "Pass a CancellationToken to the async method and periodically check token.IsCancellationRequested",
        "C": "Throw a TaskCancelledException directly when cancellation is needed",
        "D": "Use Thread.Abort() to forcefully terminate the running operation"
      },
      "correct_answer": "B"
    },
    {
      "id": 35,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses CancellationToken?",
      "options": {
        "A": "Operation completed",
        "B": "Operation canceled",
        "C": "A TaskCanceledException will be thrown",
        "D": "Operation timed out"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main()\n    {\n        var cts = new CancellationTokenSource();\n        var token = cts.Token;\n        \n        var task = Task.Run(async () => \n        {\n            try \n            {\n                Console.WriteLine(\"Operation started\");\n                cts.Cancel();\n                \n                // Check before the delay\n                if (token.IsCancellationRequested)\n                {\n                    Console.WriteLine(\"Operation canceled\");\n                    return;\n                }\n                \n                await Task.Delay(2000, token);\n                Console.WriteLine(\"Operation completed\");\n            }\n            catch (OperationCanceledException)\n            {\n                Console.WriteLine(\"Operation was canceled by exception\");\n            }\n        });\n        \n        await task;\n    }\n}"
    },
    {
      "id": 36,
      "difficulty": "hard",
      "question": "Which of the following is NOT a valid way to configure CORS in ASP.NET Core?",
      "options": {
        "A": "Using the app.UseCors() middleware in the Configure method",
        "B": "Applying the [EnableCors] attribute to a controller or action",
        "C": "Configuring a default policy in ConfigureServices with services.AddCors()",
        "D": "Setting the Access-Control-Allow-Origin header directly in web.config"
      },
      "correct_answer": "D"
    },
    {
      "id": 37,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements the Factory Pattern?",
      "options": {
        "A": "Creating SqlRepository\nCreating MongoRepository",
        "B": "Creating SqlRepository",
        "C": "Creating MongoRepository",
        "D": "No output will be produced"
      },
      "correct_answer": "B",
      "code_example": "using System;\n\npublic interface IRepository\n{\n    void Connect();\n}\n\npublic class SqlRepository : IRepository\n{\n    public SqlRepository()\n    {\n        Console.WriteLine(\"Creating SqlRepository\");\n    }\n    \n    public void Connect()\n    {\n        // Connect to SQL Server\n    }\n}\n\npublic class MongoRepository : IRepository\n{\n    public MongoRepository()\n    {\n        Console.WriteLine(\"Creating MongoRepository\");\n    }\n    \n    public void Connect()\n    {\n        // Connect to MongoDB\n    }\n}\n\npublic class RepositoryFactory\n{\n    public static IRepository CreateRepository(string type)\n    {\n        return type.ToLower() switch\n        {\n            \"sql\" => new SqlRepository(),\n            \"mongo\" => new MongoRepository(),\n            _ => throw new ArgumentException(\"Invalid repository type\")\n        };\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var repository = RepositoryFactory.CreateRepository(\"sql\");\n        repository.Connect();\n    }\n}"
    },
    {
      "id": 38,
      "difficulty": "hard",
      "question": "In the Mediator Pattern, which of the following best describes the role of the Mediator?",
      "options": {
        "A": "It implements the business logic for each request directly",
        "B": "It routes requests to the appropriate handlers and centralizes communication between components",
        "C": "It serves as a data access layer between the application and database",
        "D": "It transforms data between incompatible types like an adapter"
      },
      "correct_answer": "B"
    },
    {
      "id": 39,
      "difficulty": "hard",
      "question": "What will be the output of the following code using distributed Redis cache?",
      "options": {
        "A": "Cached value: null\nCached value after setting: CachedData",
        "B": "Cached value: null\nCached value after setting: null",
        "C": "Cached value: CachedData\nCached value after setting: CachedData",
        "D": "A RedisConnectionException will be thrown"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\n\nclass Program\n{\n    static void Main()\n    {\n        // For demonstration: using MemoryDistributedCache instead of actual Redis\n        // In a real app, you would inject IDistributedCache configured with Redis\n        IDistributedCache cache = new MemoryDistributedCache(\n            new MemoryDistributedCacheOptions());\n        \n        string key = \"myKey\";\n        \n        // Try to get the value before setting it\n        string cachedValue = cache.GetString(key);\n        Console.WriteLine($\"Cached value: {cachedValue}\");\n        \n        // Set a value in the cache\n        cache.SetString(key, \"CachedData\", new DistributedCacheEntryOptions\n        {\n            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10)\n        });\n        \n        // Get the value after setting it\n        cachedValue = cache.GetString(key);\n        Console.WriteLine($\"Cached value after setting: {cachedValue}\");\n    }\n}"
    },
    {
      "id": 40,
      "difficulty": "hard",
      "question": "Which of the following is required when implementing COM Interop in a C# application?",
      "options": {
        "A": "Adding the [ComVisible(true)] attribute to all classes that need to be exposed to COM",
        "B": "Setting the 'Register for COM Interop' property to 'True' in project settings for both the caller and callee assemblies",
        "C": "Importing the COM component using the Type Library Importer (TlbImp.exe) or adding a COM reference",
        "D": "COM Interop is automatic in .NET Core and requires no special configuration"
      },
      "correct_answer": "C"
    },
    {
      "id": 41,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses the lock statement and Monitor class?",
      "options": {
        "A": "Thread 1 Enter\nThread 1 Exit\nThread 2 Enter\nThread 2 Exit",
        "B": "Thread 1 Enter\nThread 2 Enter\nThread 1 Exit\nThread 2 Exit",
        "C": "The output order will be random and will vary each time",
        "D": "A SynchronizationLockException will be thrown"
      },
      "correct_answer": "A",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    private static readonly object _lockObject = new object();\n    \n    static void Main()\n    {\n        Task task1 = Task.Run(() => DoWork(\"Thread 1\"));\n        Task task2 = Task.Run(() => DoWork(\"Thread 2\"));\n        \n        Task.WaitAll(task1, task2);\n    }\n    \n    static void DoWork(string threadName)\n    {\n        bool lockTaken = false;\n        try\n        {\n            // Using Monitor instead of lock\n            Monitor.Enter(_lockObject, ref lockTaken);\n            Console.WriteLine($\"{threadName} Enter\");\n            \n            // Simulate work\n            Thread.Sleep(100);\n            \n            Console.WriteLine($\"{threadName} Exit\");\n        }\n        finally\n        {\n            if (lockTaken)\n            {\n                Monitor.Exit(_lockObject);\n            }\n        }\n    }\n}"
    },
    {
      "id": 42,
      "difficulty": "hard",
      "question": "Which of the following is NOT a typical feature of ASP.NET Core SignalR?",
      "options": {
        "A": "Server-to-client remote procedure calls",
        "B": "Client-to-server remote procedure calls",
        "C": "Persistent connection between client and server",
        "D": "Built-in peer-to-peer communication without server involvement"
      },
      "correct_answer": "D"
    },
    {
      "id": 43,
      "difficulty": "hard",
      "question": "What is the key benefit of using the Repository Pattern in a .NET application?",
      "options": {
        "A": "It improves application performance by optimizing database queries",
        "B": "It abstracts the data access layer and makes the application more testable",
        "C": "It eliminates the need for an ORM like Entity Framework",
        "D": "It automatically generates API controllers for data entities"
      },
      "correct_answer": "B"
    },
    {
      "id": 44,
      "difficulty": "hard",
      "question": "Which of the following statements about Apache Kafka in a .NET environment is FALSE?",
      "options": {
        "A": "Kafka is a distributed streaming platform that publishes and subscribes to streams of records",
        "B": "Confluent.Kafka is a popular .NET client library for interacting with Kafka",
        "C": "Kafka guarantees that messages sent by a producer to a topic partition will be delivered in the exact order they were sent",
        "D": "Kafka automatically transforms message formats between producers and consumers using schema evolution"
      },
      "correct_answer": "D"
    },
    {
      "id": 45,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses a readonly struct?",
      "options": {
        "A": "10, 10",
        "B": "10, 20",
        "C": "20, 20",
        "D": "A compilation error will occur"
      },
      "correct_answer": "B",
      "code_example": "using System;\n\npublic readonly struct Point\n{\n    public readonly int X { get; }\n    public readonly int Y { get; }\n    \n    public Point(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n    \n    // Returns a new Point instance\n    public Point WithX(int newX) => new Point(newX, Y);\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Point p1 = new Point(10, 10);\n        Point p2 = p1.WithX(20);\n        \n        Console.WriteLine($\"{p1.X}, {p2.X}\");\n    }\n}"
    },
    {
      "id": 46,
      "difficulty": "hard",
      "question": "What will be the output of the following code that implements the Adapter Pattern?",
      "options": {
        "A": "Legacy System: Processing request\nNew System: Request processed",
        "B": "Legacy System: Processing request",
        "C": "New System: Request processed",
        "D": "An InvalidCastException will be thrown"
      },
      "correct_answer": "A",
      "code_example": "using System;\n\n// Target interface (new system expects this)\npublic interface INewSystem\n{\n    void ProcessRequest();\n}\n\n// Adaptee (legacy system we need to adapt)\npublic class LegacySystem\n{\n    public void ProcessLegacyRequest()\n    {\n        Console.WriteLine(\"Legacy System: Processing request\");\n    }\n}\n\n// Adapter\npublic class LegacySystemAdapter : INewSystem\n{\n    private readonly LegacySystem _legacySystem;\n    \n    public LegacySystemAdapter(LegacySystem legacySystem)\n    {\n        _legacySystem = legacySystem;\n    }\n    \n    public void ProcessRequest()\n    {\n        _legacySystem.ProcessLegacyRequest();\n        Console.WriteLine(\"New System: Request processed\");\n    }\n}\n\n// Client code\nclass Program\n{\n    static void Main()\n    {\n        LegacySystem legacySystem = new LegacySystem();\n        INewSystem adapter = new LegacySystemAdapter(legacySystem);\n        \n        // Client code works with the new interface\n        adapter.ProcessRequest();\n    }\n}"
    },
    {
      "id": 47,
      "difficulty": "hard",
      "question": "What will be the output of the following code that uses Semaphore and Mutex?",
      "options": {
        "A": "Semaphore count: 2\nMutex is owned by the current thread: True",
        "B": "Semaphore count: 0\nMutex is owned by the current thread: False",
        "C": "Semaphore count: 0\nMutex is owned by the current thread: True",
        "D": "Semaphore count: 2\nMutex is owned by the current thread: False"
      },
      "correct_answer": "C",
      "code_example": "using System;\nusing System.Threading;\n\nclass Program\n{\n    static void Main()\n    {\n        // Create a semaphore with initial count 2, max count 2\n        using (var semaphore = new Semaphore(2, 2))\n        {\n            // Wait twice to reduce count to 0\n            semaphore.WaitOne();\n            semaphore.WaitOne();\n            \n            // Get the current count (should be 0)\n            int semaphoreCount = -1; // We'll set this via TryGetAvailableWaiters\n            if (semaphore.GetType().GetMethod(\"TryGetAvailableWaiters\") != null)\n            {\n                // This is for demonstration only - in real code, use reflection more safely\n                // In .NET Framework, we can get the count, in .NET Core we can't easily\n                // So we're just setting it to 0 for this example\n                semaphoreCount = 0;\n            }\n            \n            Console.WriteLine($\"Semaphore count: {semaphoreCount}\");\n        }\n        \n        // Create and acquire a mutex\n        using (var mutex = new Mutex(true)) // true means the calling thread owns it\n        {\n            bool isMutexOwned = mutex.WaitOne(0); // Try to acquire, returns false if already owned\n            \n            // In this case, isMutexOwned should be false as we already own it\n            // So the full truth value should be: !isMutexOwned (we don't get ownership again)\n            // but we do own it from the constructor\n            Console.WriteLine($\"Mutex is owned by the current thread: {true}\");\n            \n            mutex.ReleaseMutex(); // Release ownership from constructor\n        }\n    }\n}"
    },
    {
      "id": 48,
      "difficulty": "hard",
      "question": "What will be the output of the following code using Parallel.Invoke()?",
      "options": {
        "A": "1 2 3 4 5",
        "B": "The output will vary but each number from 1 to 5 will appear exactly once",
        "C": "The order is random but the output will always be exactly '1 2 3 4 5'",
        "D": "The output will contain duplicate numbers due to race conditions"
      },
      "correct_answer": "B",
      "code_example": "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static void Main()\n    {\n        object lockObj = new object();\n        \n        // Use Parallel.Invoke to run 5 actions in parallel\n        Parallel.Invoke(\n            () => PrintNumber(1, lockObj),\n            () => PrintNumber(2, lockObj),\n            () => PrintNumber(3, lockObj),\n            () => PrintNumber(4, lockObj),\n            () => PrintNumber(5, lockObj)\n        );\n    }\n    \n    static void PrintNumber(int num, object lockObj)\n    {\n        // Small random delay to make the order unpredictable\n        Thread.Sleep(new Random().Next(10, 50));\n        \n        // Lock to prevent console output garbling\n        lock (lockObj)\n        {\n            Console.Write($\"{num} \");\n        }\n    }\n}"
    }
  ]
}
